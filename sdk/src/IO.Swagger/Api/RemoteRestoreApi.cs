/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRemoteRestoreApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a remote Vault restore task. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Returns the id of the remote Vault restore Task that was created.  After a Vault is searched by a search Job, this operation can be called to create a task that restores the indexes and/or the Snapshots of a Protection Job, which were archived on a remote Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a remote Vault restore task.</param>
        /// <returns>UniversalId</returns>
        UniversalId CreateRemoteVaultRestoreTask (CreateRemoteVaultRestoreTaskParameters body);

        /// <summary>
        /// Create a remote Vault restore task. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Returns the id of the remote Vault restore Task that was created.  After a Vault is searched by a search Job, this operation can be called to create a task that restores the indexes and/or the Snapshots of a Protection Job, which were archived on a remote Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a remote Vault restore task.</param>
        /// <returns>ApiResponse of UniversalId</returns>
        ApiResponse<UniversalId> CreateRemoteVaultRestoreTaskWithHttpInfo (CreateRemoteVaultRestoreTaskParameters body);
        /// <summary>
        /// Create a search of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// A search Job finds Protection Jobs that archived data to a Vault (External Target) which also match the specified search criteria. The results can be optionally filtered by specifying a Cluster match string, a Protection Job match string, a start time and an end time. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a search of a remote Vault.</param>
        /// <returns>CreatedRemoteVaultSearchJobUid</returns>
        CreatedRemoteVaultSearchJobUid CreateRemoteVaultSearchJob (CreateRemoteVaultSearchJobParameters body);

        /// <summary>
        /// Create a search of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// A search Job finds Protection Jobs that archived data to a Vault (External Target) which also match the specified search criteria. The results can be optionally filtered by specifying a Cluster match string, a Protection Job match string, a start time and an end time. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a search of a remote Vault.</param>
        /// <returns>ApiResponse of CreatedRemoteVaultSearchJobUid</returns>
        ApiResponse<CreatedRemoteVaultSearchJobUid> CreateRemoteVaultSearchJobWithHttpInfo (CreateRemoteVaultSearchJobParameters body);
        /// <summary>
        /// List details about the Job Runs of Protection Jobs found by a single search of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Specify a unique id of the search Job using a combination of the searchJobId, clusterId, and clusterIncarnationId parameters, which are all required.  The results can be optionally filtered by the remote Cluster name. This is part of the CloudRetrieve functionality for finding and restoring archived data from a remote Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchJobId">Specifies the id of the remote Vault search Job assigned by the Cohesity Cluster. Used in combination with the clusterId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the search Job was created. Used in combination with the searchJobId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the search Job was created. Used in combination with the searchJobId and clusterId to uniquely identify the search Job.</param>
        /// <param name="cookie">Specifies the opaque string cookie returned by the previous response, to get next set of results. Used in combination with pageCount to support pagination. (optional)</param>
        /// <param name="pageCount">Specifies the number of Protection Jobs to return in the response to support pagination. (optional)</param>
        /// <param name="clusterName">Optionally filter the result by the remote Cohesity Cluster name. (optional)</param>
        /// <returns>RemoteVaultSearchJobResults</returns>
        RemoteVaultSearchJobResults GetRemoteVaultSearchJobResults (long? searchJobId, long? clusterId, long? clusterIncarnationId, string cookie = null, int? pageCount = null, string clusterName = null);

        /// <summary>
        /// List details about the Job Runs of Protection Jobs found by a single search of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Specify a unique id of the search Job using a combination of the searchJobId, clusterId, and clusterIncarnationId parameters, which are all required.  The results can be optionally filtered by the remote Cluster name. This is part of the CloudRetrieve functionality for finding and restoring archived data from a remote Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchJobId">Specifies the id of the remote Vault search Job assigned by the Cohesity Cluster. Used in combination with the clusterId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the search Job was created. Used in combination with the searchJobId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the search Job was created. Used in combination with the searchJobId and clusterId to uniquely identify the search Job.</param>
        /// <param name="cookie">Specifies the opaque string cookie returned by the previous response, to get next set of results. Used in combination with pageCount to support pagination. (optional)</param>
        /// <param name="pageCount">Specifies the number of Protection Jobs to return in the response to support pagination. (optional)</param>
        /// <param name="clusterName">Optionally filter the result by the remote Cohesity Cluster name. (optional)</param>
        /// <returns>ApiResponse of RemoteVaultSearchJobResults</returns>
        ApiResponse<RemoteVaultSearchJobResults> GetRemoteVaultSearchJobResultsWithHttpInfo (long? searchJobId, long? clusterId, long? clusterIncarnationId, string cookie = null, int? pageCount = null, string clusterName = null);
        /// <summary>
        /// List the remote Vault restore tasks that have completed or are running on this Cohesity Cluster. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// A remote Vault restore task can restore archived data from a Vault (External Target) to this local Cluster. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RemoteVaultRestoreTaskStatus&gt;</returns>
        List<RemoteVaultRestoreTaskStatus> ListRemoteVaultRestoreTasks ();

        /// <summary>
        /// List the remote Vault restore tasks that have completed or are running on this Cohesity Cluster. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// A remote Vault restore task can restore archived data from a Vault (External Target) to this local Cluster. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RemoteVaultRestoreTaskStatus&gt;</returns>
        ApiResponse<List<RemoteVaultRestoreTaskStatus>> ListRemoteVaultRestoreTasksWithHttpInfo ();
        /// <summary>
        /// List details about a single search Job of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Specify an id for a completed or running search Job. A search Job finds data that has been archived to a Vault (External Target). The returned results do not include Job Run (Snapshot) information. It is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the id of the remote Vault search Job to return.</param>
        /// <returns>RemoteVaultSearchJobInformation</returns>
        RemoteVaultSearchJobInformation ListRemoteVaultSearchJobById (long? id);

        /// <summary>
        /// List details about a single search Job of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Specify an id for a completed or running search Job. A search Job finds data that has been archived to a Vault (External Target). The returned results do not include Job Run (Snapshot) information. It is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the id of the remote Vault search Job to return.</param>
        /// <returns>ApiResponse of RemoteVaultSearchJobInformation</returns>
        ApiResponse<RemoteVaultSearchJobInformation> ListRemoteVaultSearchJobByIdWithHttpInfo (long? id);
        /// <summary>
        /// List all the searches of remote Vaults. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// List all the searches of remote Vaults (External Targets) that have run or are running on this Cohesity Cluster. A search finds Protection Jobs that have archived to a Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RemoteVaultSearchJobInformation&gt;</returns>
        List<RemoteVaultSearchJobInformation> ListRemoteVaultSearchJobs ();

        /// <summary>
        /// List all the searches of remote Vaults. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// List all the searches of remote Vaults (External Targets) that have run or are running on this Cohesity Cluster. A search finds Protection Jobs that have archived to a Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RemoteVaultSearchJobInformation&gt;</returns>
        ApiResponse<List<RemoteVaultSearchJobInformation>> ListRemoteVaultSearchJobsWithHttpInfo ();
        /// <summary>
        /// Stop a search of a remote Vault (External Target). (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to stop a Remote Vault Search Job.</param>
        /// <returns></returns>
        void StopRemoteVaultSearchJob (StopRemoteVaultSearchJobParameters body);

        /// <summary>
        /// Stop a search of a remote Vault (External Target). (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to stop a Remote Vault Search Job.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StopRemoteVaultSearchJobWithHttpInfo (StopRemoteVaultSearchJobParameters body);
        /// <summary>
        /// Upload the encryption keys required to restore data from a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// This request contains multiple files stored as multipart mime data. Each file has a key used to encrypt data between a remote Cluster and the remote Vault. Content of the file should be same as the file downloaded from the remote Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to upload encryption keys of a remote Vault. (optional)</param>
        /// <returns></returns>
        void UploadVaultEncryptionKeys (long? id, List<VaultEncryptionKey> body = null);

        /// <summary>
        /// Upload the encryption keys required to restore data from a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// This request contains multiple files stored as multipart mime data. Each file has a key used to encrypt data between a remote Cluster and the remote Vault. Content of the file should be same as the file downloaded from the remote Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to upload encryption keys of a remote Vault. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UploadVaultEncryptionKeysWithHttpInfo (long? id, List<VaultEncryptionKey> body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a remote Vault restore task. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Returns the id of the remote Vault restore Task that was created.  After a Vault is searched by a search Job, this operation can be called to create a task that restores the indexes and/or the Snapshots of a Protection Job, which were archived on a remote Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a remote Vault restore task.</param>
        /// <returns>Task of UniversalId</returns>
        System.Threading.Tasks.Task<UniversalId> CreateRemoteVaultRestoreTaskAsync (CreateRemoteVaultRestoreTaskParameters body);

        /// <summary>
        /// Create a remote Vault restore task. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Returns the id of the remote Vault restore Task that was created.  After a Vault is searched by a search Job, this operation can be called to create a task that restores the indexes and/or the Snapshots of a Protection Job, which were archived on a remote Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a remote Vault restore task.</param>
        /// <returns>Task of ApiResponse (UniversalId)</returns>
        System.Threading.Tasks.Task<ApiResponse<UniversalId>> CreateRemoteVaultRestoreTaskAsyncWithHttpInfo (CreateRemoteVaultRestoreTaskParameters body);
        /// <summary>
        /// Create a search of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// A search Job finds Protection Jobs that archived data to a Vault (External Target) which also match the specified search criteria. The results can be optionally filtered by specifying a Cluster match string, a Protection Job match string, a start time and an end time. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a search of a remote Vault.</param>
        /// <returns>Task of CreatedRemoteVaultSearchJobUid</returns>
        System.Threading.Tasks.Task<CreatedRemoteVaultSearchJobUid> CreateRemoteVaultSearchJobAsync (CreateRemoteVaultSearchJobParameters body);

        /// <summary>
        /// Create a search of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// A search Job finds Protection Jobs that archived data to a Vault (External Target) which also match the specified search criteria. The results can be optionally filtered by specifying a Cluster match string, a Protection Job match string, a start time and an end time. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a search of a remote Vault.</param>
        /// <returns>Task of ApiResponse (CreatedRemoteVaultSearchJobUid)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatedRemoteVaultSearchJobUid>> CreateRemoteVaultSearchJobAsyncWithHttpInfo (CreateRemoteVaultSearchJobParameters body);
        /// <summary>
        /// List details about the Job Runs of Protection Jobs found by a single search of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Specify a unique id of the search Job using a combination of the searchJobId, clusterId, and clusterIncarnationId parameters, which are all required.  The results can be optionally filtered by the remote Cluster name. This is part of the CloudRetrieve functionality for finding and restoring archived data from a remote Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchJobId">Specifies the id of the remote Vault search Job assigned by the Cohesity Cluster. Used in combination with the clusterId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the search Job was created. Used in combination with the searchJobId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the search Job was created. Used in combination with the searchJobId and clusterId to uniquely identify the search Job.</param>
        /// <param name="cookie">Specifies the opaque string cookie returned by the previous response, to get next set of results. Used in combination with pageCount to support pagination. (optional)</param>
        /// <param name="pageCount">Specifies the number of Protection Jobs to return in the response to support pagination. (optional)</param>
        /// <param name="clusterName">Optionally filter the result by the remote Cohesity Cluster name. (optional)</param>
        /// <returns>Task of RemoteVaultSearchJobResults</returns>
        System.Threading.Tasks.Task<RemoteVaultSearchJobResults> GetRemoteVaultSearchJobResultsAsync (long? searchJobId, long? clusterId, long? clusterIncarnationId, string cookie = null, int? pageCount = null, string clusterName = null);

        /// <summary>
        /// List details about the Job Runs of Protection Jobs found by a single search of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Specify a unique id of the search Job using a combination of the searchJobId, clusterId, and clusterIncarnationId parameters, which are all required.  The results can be optionally filtered by the remote Cluster name. This is part of the CloudRetrieve functionality for finding and restoring archived data from a remote Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchJobId">Specifies the id of the remote Vault search Job assigned by the Cohesity Cluster. Used in combination with the clusterId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the search Job was created. Used in combination with the searchJobId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the search Job was created. Used in combination with the searchJobId and clusterId to uniquely identify the search Job.</param>
        /// <param name="cookie">Specifies the opaque string cookie returned by the previous response, to get next set of results. Used in combination with pageCount to support pagination. (optional)</param>
        /// <param name="pageCount">Specifies the number of Protection Jobs to return in the response to support pagination. (optional)</param>
        /// <param name="clusterName">Optionally filter the result by the remote Cohesity Cluster name. (optional)</param>
        /// <returns>Task of ApiResponse (RemoteVaultSearchJobResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteVaultSearchJobResults>> GetRemoteVaultSearchJobResultsAsyncWithHttpInfo (long? searchJobId, long? clusterId, long? clusterIncarnationId, string cookie = null, int? pageCount = null, string clusterName = null);
        /// <summary>
        /// List the remote Vault restore tasks that have completed or are running on this Cohesity Cluster. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// A remote Vault restore task can restore archived data from a Vault (External Target) to this local Cluster. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RemoteVaultRestoreTaskStatus&gt;</returns>
        System.Threading.Tasks.Task<List<RemoteVaultRestoreTaskStatus>> ListRemoteVaultRestoreTasksAsync ();

        /// <summary>
        /// List the remote Vault restore tasks that have completed or are running on this Cohesity Cluster. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// A remote Vault restore task can restore archived data from a Vault (External Target) to this local Cluster. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RemoteVaultRestoreTaskStatus&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RemoteVaultRestoreTaskStatus>>> ListRemoteVaultRestoreTasksAsyncWithHttpInfo ();
        /// <summary>
        /// List details about a single search Job of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Specify an id for a completed or running search Job. A search Job finds data that has been archived to a Vault (External Target). The returned results do not include Job Run (Snapshot) information. It is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the id of the remote Vault search Job to return.</param>
        /// <returns>Task of RemoteVaultSearchJobInformation</returns>
        System.Threading.Tasks.Task<RemoteVaultSearchJobInformation> ListRemoteVaultSearchJobByIdAsync (long? id);

        /// <summary>
        /// List details about a single search Job of a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// Specify an id for a completed or running search Job. A search Job finds data that has been archived to a Vault (External Target). The returned results do not include Job Run (Snapshot) information. It is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the id of the remote Vault search Job to return.</param>
        /// <returns>Task of ApiResponse (RemoteVaultSearchJobInformation)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteVaultSearchJobInformation>> ListRemoteVaultSearchJobByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List all the searches of remote Vaults. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// List all the searches of remote Vaults (External Targets) that have run or are running on this Cohesity Cluster. A search finds Protection Jobs that have archived to a Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RemoteVaultSearchJobInformation&gt;</returns>
        System.Threading.Tasks.Task<List<RemoteVaultSearchJobInformation>> ListRemoteVaultSearchJobsAsync ();

        /// <summary>
        /// List all the searches of remote Vaults. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// List all the searches of remote Vaults (External Targets) that have run or are running on this Cohesity Cluster. A search finds Protection Jobs that have archived to a Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RemoteVaultSearchJobInformation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RemoteVaultSearchJobInformation>>> ListRemoteVaultSearchJobsAsyncWithHttpInfo ();
        /// <summary>
        /// Stop a search of a remote Vault (External Target). (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to stop a Remote Vault Search Job.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StopRemoteVaultSearchJobAsync (StopRemoteVaultSearchJobParameters body);

        /// <summary>
        /// Stop a search of a remote Vault (External Target). (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to stop a Remote Vault Search Job.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StopRemoteVaultSearchJobAsyncWithHttpInfo (StopRemoteVaultSearchJobParameters body);
        /// <summary>
        /// Upload the encryption keys required to restore data from a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// This request contains multiple files stored as multipart mime data. Each file has a key used to encrypt data between a remote Cluster and the remote Vault. Content of the file should be same as the file downloaded from the remote Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to upload encryption keys of a remote Vault. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UploadVaultEncryptionKeysAsync (long? id, List<VaultEncryptionKey> body = null);

        /// <summary>
        /// Upload the encryption keys required to restore data from a remote Vault. (CloudRetrieve)
        /// </summary>
        /// <remarks>
        /// This request contains multiple files stored as multipart mime data. Each file has a key used to encrypt data between a remote Cluster and the remote Vault. Content of the file should be same as the file downloaded from the remote Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to upload encryption keys of a remote Vault. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UploadVaultEncryptionKeysAsyncWithHttpInfo (long? id, List<VaultEncryptionKey> body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RemoteRestoreApi : IRemoteRestoreApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteRestoreApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RemoteRestoreApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteRestoreApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RemoteRestoreApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a remote Vault restore task. (CloudRetrieve) Returns the id of the remote Vault restore Task that was created.  After a Vault is searched by a search Job, this operation can be called to create a task that restores the indexes and/or the Snapshots of a Protection Job, which were archived on a remote Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a remote Vault restore task.</param>
        /// <returns>UniversalId</returns>
        public UniversalId CreateRemoteVaultRestoreTask (CreateRemoteVaultRestoreTaskParameters body)
        {
             ApiResponse<UniversalId> localVarResponse = CreateRemoteVaultRestoreTaskWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a remote Vault restore task. (CloudRetrieve) Returns the id of the remote Vault restore Task that was created.  After a Vault is searched by a search Job, this operation can be called to create a task that restores the indexes and/or the Snapshots of a Protection Job, which were archived on a remote Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a remote Vault restore task.</param>
        /// <returns>ApiResponse of UniversalId</returns>
        public ApiResponse< UniversalId > CreateRemoteVaultRestoreTaskWithHttpInfo (CreateRemoteVaultRestoreTaskParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RemoteRestoreApi->CreateRemoteVaultRestoreTask");

            var localVarPath = "/public/remoteVaults/restoreTasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRemoteVaultRestoreTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UniversalId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UniversalId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UniversalId)));
        }

        /// <summary>
        /// Create a remote Vault restore task. (CloudRetrieve) Returns the id of the remote Vault restore Task that was created.  After a Vault is searched by a search Job, this operation can be called to create a task that restores the indexes and/or the Snapshots of a Protection Job, which were archived on a remote Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a remote Vault restore task.</param>
        /// <returns>Task of UniversalId</returns>
        public async System.Threading.Tasks.Task<UniversalId> CreateRemoteVaultRestoreTaskAsync (CreateRemoteVaultRestoreTaskParameters body)
        {
             ApiResponse<UniversalId> localVarResponse = await CreateRemoteVaultRestoreTaskAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a remote Vault restore task. (CloudRetrieve) Returns the id of the remote Vault restore Task that was created.  After a Vault is searched by a search Job, this operation can be called to create a task that restores the indexes and/or the Snapshots of a Protection Job, which were archived on a remote Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a remote Vault restore task.</param>
        /// <returns>Task of ApiResponse (UniversalId)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UniversalId>> CreateRemoteVaultRestoreTaskAsyncWithHttpInfo (CreateRemoteVaultRestoreTaskParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RemoteRestoreApi->CreateRemoteVaultRestoreTask");

            var localVarPath = "/public/remoteVaults/restoreTasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRemoteVaultRestoreTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UniversalId>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UniversalId) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UniversalId)));
        }

        /// <summary>
        /// Create a search of a remote Vault. (CloudRetrieve) A search Job finds Protection Jobs that archived data to a Vault (External Target) which also match the specified search criteria. The results can be optionally filtered by specifying a Cluster match string, a Protection Job match string, a start time and an end time. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a search of a remote Vault.</param>
        /// <returns>CreatedRemoteVaultSearchJobUid</returns>
        public CreatedRemoteVaultSearchJobUid CreateRemoteVaultSearchJob (CreateRemoteVaultSearchJobParameters body)
        {
             ApiResponse<CreatedRemoteVaultSearchJobUid> localVarResponse = CreateRemoteVaultSearchJobWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a search of a remote Vault. (CloudRetrieve) A search Job finds Protection Jobs that archived data to a Vault (External Target) which also match the specified search criteria. The results can be optionally filtered by specifying a Cluster match string, a Protection Job match string, a start time and an end time. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a search of a remote Vault.</param>
        /// <returns>ApiResponse of CreatedRemoteVaultSearchJobUid</returns>
        public ApiResponse< CreatedRemoteVaultSearchJobUid > CreateRemoteVaultSearchJobWithHttpInfo (CreateRemoteVaultSearchJobParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RemoteRestoreApi->CreateRemoteVaultSearchJob");

            var localVarPath = "/public/remoteVaults/searchJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRemoteVaultSearchJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedRemoteVaultSearchJobUid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatedRemoteVaultSearchJobUid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedRemoteVaultSearchJobUid)));
        }

        /// <summary>
        /// Create a search of a remote Vault. (CloudRetrieve) A search Job finds Protection Jobs that archived data to a Vault (External Target) which also match the specified search criteria. The results can be optionally filtered by specifying a Cluster match string, a Protection Job match string, a start time and an end time. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a search of a remote Vault.</param>
        /// <returns>Task of CreatedRemoteVaultSearchJobUid</returns>
        public async System.Threading.Tasks.Task<CreatedRemoteVaultSearchJobUid> CreateRemoteVaultSearchJobAsync (CreateRemoteVaultSearchJobParameters body)
        {
             ApiResponse<CreatedRemoteVaultSearchJobUid> localVarResponse = await CreateRemoteVaultSearchJobAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a search of a remote Vault. (CloudRetrieve) A search Job finds Protection Jobs that archived data to a Vault (External Target) which also match the specified search criteria. The results can be optionally filtered by specifying a Cluster match string, a Protection Job match string, a start time and an end time. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a search of a remote Vault.</param>
        /// <returns>Task of ApiResponse (CreatedRemoteVaultSearchJobUid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatedRemoteVaultSearchJobUid>> CreateRemoteVaultSearchJobAsyncWithHttpInfo (CreateRemoteVaultSearchJobParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RemoteRestoreApi->CreateRemoteVaultSearchJob");

            var localVarPath = "/public/remoteVaults/searchJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRemoteVaultSearchJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatedRemoteVaultSearchJobUid>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatedRemoteVaultSearchJobUid) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedRemoteVaultSearchJobUid)));
        }

        /// <summary>
        /// List details about the Job Runs of Protection Jobs found by a single search of a remote Vault. (CloudRetrieve) Specify a unique id of the search Job using a combination of the searchJobId, clusterId, and clusterIncarnationId parameters, which are all required.  The results can be optionally filtered by the remote Cluster name. This is part of the CloudRetrieve functionality for finding and restoring archived data from a remote Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchJobId">Specifies the id of the remote Vault search Job assigned by the Cohesity Cluster. Used in combination with the clusterId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the search Job was created. Used in combination with the searchJobId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the search Job was created. Used in combination with the searchJobId and clusterId to uniquely identify the search Job.</param>
        /// <param name="cookie">Specifies the opaque string cookie returned by the previous response, to get next set of results. Used in combination with pageCount to support pagination. (optional)</param>
        /// <param name="pageCount">Specifies the number of Protection Jobs to return in the response to support pagination. (optional)</param>
        /// <param name="clusterName">Optionally filter the result by the remote Cohesity Cluster name. (optional)</param>
        /// <returns>RemoteVaultSearchJobResults</returns>
        public RemoteVaultSearchJobResults GetRemoteVaultSearchJobResults (long? searchJobId, long? clusterId, long? clusterIncarnationId, string cookie = null, int? pageCount = null, string clusterName = null)
        {
             ApiResponse<RemoteVaultSearchJobResults> localVarResponse = GetRemoteVaultSearchJobResultsWithHttpInfo(searchJobId, clusterId, clusterIncarnationId, cookie, pageCount, clusterName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about the Job Runs of Protection Jobs found by a single search of a remote Vault. (CloudRetrieve) Specify a unique id of the search Job using a combination of the searchJobId, clusterId, and clusterIncarnationId parameters, which are all required.  The results can be optionally filtered by the remote Cluster name. This is part of the CloudRetrieve functionality for finding and restoring archived data from a remote Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchJobId">Specifies the id of the remote Vault search Job assigned by the Cohesity Cluster. Used in combination with the clusterId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the search Job was created. Used in combination with the searchJobId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the search Job was created. Used in combination with the searchJobId and clusterId to uniquely identify the search Job.</param>
        /// <param name="cookie">Specifies the opaque string cookie returned by the previous response, to get next set of results. Used in combination with pageCount to support pagination. (optional)</param>
        /// <param name="pageCount">Specifies the number of Protection Jobs to return in the response to support pagination. (optional)</param>
        /// <param name="clusterName">Optionally filter the result by the remote Cohesity Cluster name. (optional)</param>
        /// <returns>ApiResponse of RemoteVaultSearchJobResults</returns>
        public ApiResponse< RemoteVaultSearchJobResults > GetRemoteVaultSearchJobResultsWithHttpInfo (long? searchJobId, long? clusterId, long? clusterIncarnationId, string cookie = null, int? pageCount = null, string clusterName = null)
        {
            // verify the required parameter 'searchJobId' is set
            if (searchJobId == null)
                throw new ApiException(400, "Missing required parameter 'searchJobId' when calling RemoteRestoreApi->GetRemoteVaultSearchJobResults");
            // verify the required parameter 'clusterId' is set
            if (clusterId == null)
                throw new ApiException(400, "Missing required parameter 'clusterId' when calling RemoteRestoreApi->GetRemoteVaultSearchJobResults");
            // verify the required parameter 'clusterIncarnationId' is set
            if (clusterIncarnationId == null)
                throw new ApiException(400, "Missing required parameter 'clusterIncarnationId' when calling RemoteRestoreApi->GetRemoteVaultSearchJobResults");

            var localVarPath = "/public/remoteVaults/searchJobResults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cookie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cookie", cookie)); // query parameter
            if (searchJobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchJobId", searchJobId)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterId", clusterId)); // query parameter
            if (clusterIncarnationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterIncarnationId", clusterIncarnationId)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (clusterName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterName", clusterName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRemoteVaultSearchJobResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteVaultSearchJobResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteVaultSearchJobResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteVaultSearchJobResults)));
        }

        /// <summary>
        /// List details about the Job Runs of Protection Jobs found by a single search of a remote Vault. (CloudRetrieve) Specify a unique id of the search Job using a combination of the searchJobId, clusterId, and clusterIncarnationId parameters, which are all required.  The results can be optionally filtered by the remote Cluster name. This is part of the CloudRetrieve functionality for finding and restoring archived data from a remote Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchJobId">Specifies the id of the remote Vault search Job assigned by the Cohesity Cluster. Used in combination with the clusterId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the search Job was created. Used in combination with the searchJobId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the search Job was created. Used in combination with the searchJobId and clusterId to uniquely identify the search Job.</param>
        /// <param name="cookie">Specifies the opaque string cookie returned by the previous response, to get next set of results. Used in combination with pageCount to support pagination. (optional)</param>
        /// <param name="pageCount">Specifies the number of Protection Jobs to return in the response to support pagination. (optional)</param>
        /// <param name="clusterName">Optionally filter the result by the remote Cohesity Cluster name. (optional)</param>
        /// <returns>Task of RemoteVaultSearchJobResults</returns>
        public async System.Threading.Tasks.Task<RemoteVaultSearchJobResults> GetRemoteVaultSearchJobResultsAsync (long? searchJobId, long? clusterId, long? clusterIncarnationId, string cookie = null, int? pageCount = null, string clusterName = null)
        {
             ApiResponse<RemoteVaultSearchJobResults> localVarResponse = await GetRemoteVaultSearchJobResultsAsyncWithHttpInfo(searchJobId, clusterId, clusterIncarnationId, cookie, pageCount, clusterName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about the Job Runs of Protection Jobs found by a single search of a remote Vault. (CloudRetrieve) Specify a unique id of the search Job using a combination of the searchJobId, clusterId, and clusterIncarnationId parameters, which are all required.  The results can be optionally filtered by the remote Cluster name. This is part of the CloudRetrieve functionality for finding and restoring archived data from a remote Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchJobId">Specifies the id of the remote Vault search Job assigned by the Cohesity Cluster. Used in combination with the clusterId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the search Job was created. Used in combination with the searchJobId and clusterIncarnationId to uniquely identify the search Job.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the search Job was created. Used in combination with the searchJobId and clusterId to uniquely identify the search Job.</param>
        /// <param name="cookie">Specifies the opaque string cookie returned by the previous response, to get next set of results. Used in combination with pageCount to support pagination. (optional)</param>
        /// <param name="pageCount">Specifies the number of Protection Jobs to return in the response to support pagination. (optional)</param>
        /// <param name="clusterName">Optionally filter the result by the remote Cohesity Cluster name. (optional)</param>
        /// <returns>Task of ApiResponse (RemoteVaultSearchJobResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoteVaultSearchJobResults>> GetRemoteVaultSearchJobResultsAsyncWithHttpInfo (long? searchJobId, long? clusterId, long? clusterIncarnationId, string cookie = null, int? pageCount = null, string clusterName = null)
        {
            // verify the required parameter 'searchJobId' is set
            if (searchJobId == null)
                throw new ApiException(400, "Missing required parameter 'searchJobId' when calling RemoteRestoreApi->GetRemoteVaultSearchJobResults");
            // verify the required parameter 'clusterId' is set
            if (clusterId == null)
                throw new ApiException(400, "Missing required parameter 'clusterId' when calling RemoteRestoreApi->GetRemoteVaultSearchJobResults");
            // verify the required parameter 'clusterIncarnationId' is set
            if (clusterIncarnationId == null)
                throw new ApiException(400, "Missing required parameter 'clusterIncarnationId' when calling RemoteRestoreApi->GetRemoteVaultSearchJobResults");

            var localVarPath = "/public/remoteVaults/searchJobResults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cookie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cookie", cookie)); // query parameter
            if (searchJobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "searchJobId", searchJobId)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterId", clusterId)); // query parameter
            if (clusterIncarnationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterIncarnationId", clusterIncarnationId)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (clusterName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterName", clusterName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRemoteVaultSearchJobResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteVaultSearchJobResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteVaultSearchJobResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteVaultSearchJobResults)));
        }

        /// <summary>
        /// List the remote Vault restore tasks that have completed or are running on this Cohesity Cluster. (CloudRetrieve) A remote Vault restore task can restore archived data from a Vault (External Target) to this local Cluster. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RemoteVaultRestoreTaskStatus&gt;</returns>
        public List<RemoteVaultRestoreTaskStatus> ListRemoteVaultRestoreTasks ()
        {
             ApiResponse<List<RemoteVaultRestoreTaskStatus>> localVarResponse = ListRemoteVaultRestoreTasksWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the remote Vault restore tasks that have completed or are running on this Cohesity Cluster. (CloudRetrieve) A remote Vault restore task can restore archived data from a Vault (External Target) to this local Cluster. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RemoteVaultRestoreTaskStatus&gt;</returns>
        public ApiResponse< List<RemoteVaultRestoreTaskStatus> > ListRemoteVaultRestoreTasksWithHttpInfo ()
        {

            var localVarPath = "/public/remoteVaults/restoreTasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRemoteVaultRestoreTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RemoteVaultRestoreTaskStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RemoteVaultRestoreTaskStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RemoteVaultRestoreTaskStatus>)));
        }

        /// <summary>
        /// List the remote Vault restore tasks that have completed or are running on this Cohesity Cluster. (CloudRetrieve) A remote Vault restore task can restore archived data from a Vault (External Target) to this local Cluster. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RemoteVaultRestoreTaskStatus&gt;</returns>
        public async System.Threading.Tasks.Task<List<RemoteVaultRestoreTaskStatus>> ListRemoteVaultRestoreTasksAsync ()
        {
             ApiResponse<List<RemoteVaultRestoreTaskStatus>> localVarResponse = await ListRemoteVaultRestoreTasksAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the remote Vault restore tasks that have completed or are running on this Cohesity Cluster. (CloudRetrieve) A remote Vault restore task can restore archived data from a Vault (External Target) to this local Cluster. This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RemoteVaultRestoreTaskStatus&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RemoteVaultRestoreTaskStatus>>> ListRemoteVaultRestoreTasksAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/remoteVaults/restoreTasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRemoteVaultRestoreTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RemoteVaultRestoreTaskStatus>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RemoteVaultRestoreTaskStatus>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RemoteVaultRestoreTaskStatus>)));
        }

        /// <summary>
        /// List details about a single search Job of a remote Vault. (CloudRetrieve) Specify an id for a completed or running search Job. A search Job finds data that has been archived to a Vault (External Target). The returned results do not include Job Run (Snapshot) information. It is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the id of the remote Vault search Job to return.</param>
        /// <returns>RemoteVaultSearchJobInformation</returns>
        public RemoteVaultSearchJobInformation ListRemoteVaultSearchJobById (long? id)
        {
             ApiResponse<RemoteVaultSearchJobInformation> localVarResponse = ListRemoteVaultSearchJobByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single search Job of a remote Vault. (CloudRetrieve) Specify an id for a completed or running search Job. A search Job finds data that has been archived to a Vault (External Target). The returned results do not include Job Run (Snapshot) information. It is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the id of the remote Vault search Job to return.</param>
        /// <returns>ApiResponse of RemoteVaultSearchJobInformation</returns>
        public ApiResponse< RemoteVaultSearchJobInformation > ListRemoteVaultSearchJobByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RemoteRestoreApi->ListRemoteVaultSearchJobById");

            var localVarPath = "/public/remoteVaults/searchJobs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRemoteVaultSearchJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteVaultSearchJobInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteVaultSearchJobInformation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteVaultSearchJobInformation)));
        }

        /// <summary>
        /// List details about a single search Job of a remote Vault. (CloudRetrieve) Specify an id for a completed or running search Job. A search Job finds data that has been archived to a Vault (External Target). The returned results do not include Job Run (Snapshot) information. It is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the id of the remote Vault search Job to return.</param>
        /// <returns>Task of RemoteVaultSearchJobInformation</returns>
        public async System.Threading.Tasks.Task<RemoteVaultSearchJobInformation> ListRemoteVaultSearchJobByIdAsync (long? id)
        {
             ApiResponse<RemoteVaultSearchJobInformation> localVarResponse = await ListRemoteVaultSearchJobByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single search Job of a remote Vault. (CloudRetrieve) Specify an id for a completed or running search Job. A search Job finds data that has been archived to a Vault (External Target). The returned results do not include Job Run (Snapshot) information. It is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies the id of the remote Vault search Job to return.</param>
        /// <returns>Task of ApiResponse (RemoteVaultSearchJobInformation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoteVaultSearchJobInformation>> ListRemoteVaultSearchJobByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RemoteRestoreApi->ListRemoteVaultSearchJobById");

            var localVarPath = "/public/remoteVaults/searchJobs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRemoteVaultSearchJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteVaultSearchJobInformation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteVaultSearchJobInformation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteVaultSearchJobInformation)));
        }

        /// <summary>
        /// List all the searches of remote Vaults. (CloudRetrieve) List all the searches of remote Vaults (External Targets) that have run or are running on this Cohesity Cluster. A search finds Protection Jobs that have archived to a Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;RemoteVaultSearchJobInformation&gt;</returns>
        public List<RemoteVaultSearchJobInformation> ListRemoteVaultSearchJobs ()
        {
             ApiResponse<List<RemoteVaultSearchJobInformation>> localVarResponse = ListRemoteVaultSearchJobsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all the searches of remote Vaults. (CloudRetrieve) List all the searches of remote Vaults (External Targets) that have run or are running on this Cohesity Cluster. A search finds Protection Jobs that have archived to a Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;RemoteVaultSearchJobInformation&gt;</returns>
        public ApiResponse< List<RemoteVaultSearchJobInformation> > ListRemoteVaultSearchJobsWithHttpInfo ()
        {

            var localVarPath = "/public/remoteVaults/searchJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRemoteVaultSearchJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RemoteVaultSearchJobInformation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RemoteVaultSearchJobInformation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RemoteVaultSearchJobInformation>)));
        }

        /// <summary>
        /// List all the searches of remote Vaults. (CloudRetrieve) List all the searches of remote Vaults (External Targets) that have run or are running on this Cohesity Cluster. A search finds Protection Jobs that have archived to a Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;RemoteVaultSearchJobInformation&gt;</returns>
        public async System.Threading.Tasks.Task<List<RemoteVaultSearchJobInformation>> ListRemoteVaultSearchJobsAsync ()
        {
             ApiResponse<List<RemoteVaultSearchJobInformation>> localVarResponse = await ListRemoteVaultSearchJobsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all the searches of remote Vaults. (CloudRetrieve) List all the searches of remote Vaults (External Targets) that have run or are running on this Cohesity Cluster. A search finds Protection Jobs that have archived to a Vault (External Target). This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.  NOTE: A Vault is equivalent to an External Target in the Cohesity Dashboard. A search Job is equivalent to a search task in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;RemoteVaultSearchJobInformation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RemoteVaultSearchJobInformation>>> ListRemoteVaultSearchJobsAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/remoteVaults/searchJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListRemoteVaultSearchJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RemoteVaultSearchJobInformation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RemoteVaultSearchJobInformation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RemoteVaultSearchJobInformation>)));
        }

        /// <summary>
        /// Stop a search of a remote Vault (External Target). (CloudRetrieve) This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to stop a Remote Vault Search Job.</param>
        /// <returns></returns>
        public void StopRemoteVaultSearchJob (StopRemoteVaultSearchJobParameters body)
        {
             StopRemoteVaultSearchJobWithHttpInfo(body);
        }

        /// <summary>
        /// Stop a search of a remote Vault (External Target). (CloudRetrieve) This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to stop a Remote Vault Search Job.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StopRemoteVaultSearchJobWithHttpInfo (StopRemoteVaultSearchJobParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RemoteRestoreApi->StopRemoteVaultSearchJob");

            var localVarPath = "/public/remoteVaults/searchJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopRemoteVaultSearchJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Stop a search of a remote Vault (External Target). (CloudRetrieve) This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to stop a Remote Vault Search Job.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StopRemoteVaultSearchJobAsync (StopRemoteVaultSearchJobParameters body)
        {
             await StopRemoteVaultSearchJobAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Stop a search of a remote Vault (External Target). (CloudRetrieve) This is part of the CloudRetrieve functionality for finding and restoring archived data from remote Vaults to an alternative (non-original) Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to stop a Remote Vault Search Job.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StopRemoteVaultSearchJobAsyncWithHttpInfo (StopRemoteVaultSearchJobParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RemoteRestoreApi->StopRemoteVaultSearchJob");

            var localVarPath = "/public/remoteVaults/searchJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopRemoteVaultSearchJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload the encryption keys required to restore data from a remote Vault. (CloudRetrieve) This request contains multiple files stored as multipart mime data. Each file has a key used to encrypt data between a remote Cluster and the remote Vault. Content of the file should be same as the file downloaded from the remote Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to upload encryption keys of a remote Vault. (optional)</param>
        /// <returns></returns>
        public void UploadVaultEncryptionKeys (long? id, List<VaultEncryptionKey> body = null)
        {
             UploadVaultEncryptionKeysWithHttpInfo(id, body);
        }

        /// <summary>
        /// Upload the encryption keys required to restore data from a remote Vault. (CloudRetrieve) This request contains multiple files stored as multipart mime data. Each file has a key used to encrypt data between a remote Cluster and the remote Vault. Content of the file should be same as the file downloaded from the remote Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to upload encryption keys of a remote Vault. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UploadVaultEncryptionKeysWithHttpInfo (long? id, List<VaultEncryptionKey> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RemoteRestoreApi->UploadVaultEncryptionKeys");

            var localVarPath = "/public/remoteVaults/encryptionKeys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadVaultEncryptionKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Upload the encryption keys required to restore data from a remote Vault. (CloudRetrieve) This request contains multiple files stored as multipart mime data. Each file has a key used to encrypt data between a remote Cluster and the remote Vault. Content of the file should be same as the file downloaded from the remote Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to upload encryption keys of a remote Vault. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UploadVaultEncryptionKeysAsync (long? id, List<VaultEncryptionKey> body = null)
        {
             await UploadVaultEncryptionKeysAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Upload the encryption keys required to restore data from a remote Vault. (CloudRetrieve) This request contains multiple files stored as multipart mime data. Each file has a key used to encrypt data between a remote Cluster and the remote Vault. Content of the file should be same as the file downloaded from the remote Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to upload encryption keys of a remote Vault. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UploadVaultEncryptionKeysAsyncWithHttpInfo (long? id, List<VaultEncryptionKey> body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RemoteRestoreApi->UploadVaultEncryptionKeys");

            var localVarPath = "/public/remoteVaults/encryptionKeys/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadVaultEncryptionKeys", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
