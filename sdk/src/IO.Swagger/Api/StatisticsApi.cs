/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Lists the entities for the specified schema.
        /// </summary>
        /// <remarks>
        /// An entity is an object found on the Cohesity Cluster, such as a disk or a Node. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the entity schema to search for entities.</param>
        /// <param name="metricNames">Specifies the list of metric names to return such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="includeAggrMetricSources">Specifies whether to include the sources of aggregate metrics of an entity. (optional)</param>
        /// <returns>List&lt;EntityProto&gt;</returns>
        List<EntityProto> GetEntities (string schemaName, List<string> metricNames = null, bool? includeAggrMetricSources = null);

        /// <summary>
        /// Lists the entities for the specified schema.
        /// </summary>
        /// <remarks>
        /// An entity is an object found on the Cohesity Cluster, such as a disk or a Node. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the entity schema to search for entities.</param>
        /// <param name="metricNames">Specifies the list of metric names to return such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="includeAggrMetricSources">Specifies whether to include the sources of aggregate metrics of an entity. (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityProto&gt;</returns>
        ApiResponse<List<EntityProto>> GetEntitiesWithHttpInfo (string schemaName, List<string> metricNames = null, bool? includeAggrMetricSources = null);
        /// <summary>
        /// List the entity schemas filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. If no parameters are specified, all entity schemas found on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricNames">Specifies the list of metric names to filter by such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="schemaNames">Specifies the list of schema names to filter by such as &#39;kIceboxJobVaultStats&#39; which corresponds to &#39;External Target Job Stats&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <returns>List&lt;EntitySchemaProto&gt;</returns>
        List<EntitySchemaProto> GetEntitiesSchema (List<string> metricNames = null, List<string> schemaNames = null);

        /// <summary>
        /// List the entity schemas filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. If no parameters are specified, all entity schemas found on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricNames">Specifies the list of metric names to filter by such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="schemaNames">Specifies the list of schema names to filter by such as &#39;kIceboxJobVaultStats&#39; which corresponds to &#39;External Target Job Stats&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <returns>ApiResponse of List&lt;EntitySchemaProto&gt;</returns>
        ApiResponse<List<EntitySchemaProto>> GetEntitiesSchemaWithHttpInfo (List<string> metricNames = null, List<string> schemaNames = null);
        /// <summary>
        /// Get the entity schema for the specified schema.
        /// </summary>
        /// <remarks>
        /// An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Name of the Schema</param>
        /// <returns>List&lt;EntitySchemaProto&gt;</returns>
        List<EntitySchemaProto> GetEntitySchemaByName (string schemaName);

        /// <summary>
        /// Get the entity schema for the specified schema.
        /// </summary>
        /// <remarks>
        /// An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Name of the Schema</param>
        /// <returns>ApiResponse of List&lt;EntitySchemaProto&gt;</returns>
        ApiResponse<List<EntitySchemaProto>> GetEntitySchemaByNameWithHttpInfo (string schemaName);
        /// <summary>
        /// List a series of data points for an entity of a metric in a schema, during the specified time period.
        /// </summary>
        /// <remarks>
        /// A Metric specifies a data point (such as CPU usage and IOPS) to track over a period of time. For example for a disk in the Cluster, you can report on the &#39;Disk Health&#39; (kDiskAwaitTimeMsecs) Metric of the &#39;Disk Health Metrics&#39; (kSentryDiskStats) Schema for the last week. You must specify the &#39;k&#39; names as input and not the descriptive names. You must also specify the id of the entity that you are reporting on such as a Cluster, disk drive, job, etc. Get the entityId by running the GET /public/statistics/entities operation. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the name of entity schema such as &#39;kIceboxJobVaultStats&#39;.</param>
        /// <param name="entityId">Specifies the id of the entity represented as a string. Get the entityId by running the GET public/statistics/entities operation.</param>
        /// <param name="metricName">Specifies the name of the metric such as the &#39;kDiskAwaitTimeMsecs&#39; which is displayed as &#39;Disk Health&#39; in Advanced Diagnostics of the Cohesity Dashboard.</param>
        /// <param name="startTimeMsecs">Specifies the start time for the series of metric data. Specify the start time as a Unix epoch Timestamp (in milliseconds).</param>
        /// <param name="rollupIntervalSecs">Specifies the time interval granularity (in seconds) for the specified rollup function. Only specify a value if Rollup function is also specified. (optional)</param>
        /// <param name="endTimeMsecs">Specifies the end time for the series of metric data. Specify the end time as a Unix epoch Timestamp (in milliseconds). If not specified, the data points up to the current time are returned. (optional)</param>
        /// <param name="rollupFunction">Specifies the rollup function to apply to the data points for the time interval specified by rollupInternalSecs. The following rollup functions are available: sum, average, count, max, min, median, percentile95, latest, and rate. For more information about the functions, see the Advanced Diagnostics in the Cohesity online help. If not specified, raw data is returned. (optional)</param>
        /// <returns>MetricDataBlock</returns>
        MetricDataBlock GetTimeSeriesStats (string schemaName, string entityId, string metricName, long? startTimeMsecs, int? rollupIntervalSecs = null, long? endTimeMsecs = null, string rollupFunction = null);

        /// <summary>
        /// List a series of data points for an entity of a metric in a schema, during the specified time period.
        /// </summary>
        /// <remarks>
        /// A Metric specifies a data point (such as CPU usage and IOPS) to track over a period of time. For example for a disk in the Cluster, you can report on the &#39;Disk Health&#39; (kDiskAwaitTimeMsecs) Metric of the &#39;Disk Health Metrics&#39; (kSentryDiskStats) Schema for the last week. You must specify the &#39;k&#39; names as input and not the descriptive names. You must also specify the id of the entity that you are reporting on such as a Cluster, disk drive, job, etc. Get the entityId by running the GET /public/statistics/entities operation. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the name of entity schema such as &#39;kIceboxJobVaultStats&#39;.</param>
        /// <param name="entityId">Specifies the id of the entity represented as a string. Get the entityId by running the GET public/statistics/entities operation.</param>
        /// <param name="metricName">Specifies the name of the metric such as the &#39;kDiskAwaitTimeMsecs&#39; which is displayed as &#39;Disk Health&#39; in Advanced Diagnostics of the Cohesity Dashboard.</param>
        /// <param name="startTimeMsecs">Specifies the start time for the series of metric data. Specify the start time as a Unix epoch Timestamp (in milliseconds).</param>
        /// <param name="rollupIntervalSecs">Specifies the time interval granularity (in seconds) for the specified rollup function. Only specify a value if Rollup function is also specified. (optional)</param>
        /// <param name="endTimeMsecs">Specifies the end time for the series of metric data. Specify the end time as a Unix epoch Timestamp (in milliseconds). If not specified, the data points up to the current time are returned. (optional)</param>
        /// <param name="rollupFunction">Specifies the rollup function to apply to the data points for the time interval specified by rollupInternalSecs. The following rollup functions are available: sum, average, count, max, min, median, percentile95, latest, and rate. For more information about the functions, see the Advanced Diagnostics in the Cohesity online help. If not specified, raw data is returned. (optional)</param>
        /// <returns>ApiResponse of MetricDataBlock</returns>
        ApiResponse<MetricDataBlock> GetTimeSeriesStatsWithHttpInfo (string schemaName, string entityId, string metricName, long? startTimeMsecs, int? rollupIntervalSecs = null, long? endTimeMsecs = null, string rollupFunction = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Lists the entities for the specified schema.
        /// </summary>
        /// <remarks>
        /// An entity is an object found on the Cohesity Cluster, such as a disk or a Node. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the entity schema to search for entities.</param>
        /// <param name="metricNames">Specifies the list of metric names to return such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="includeAggrMetricSources">Specifies whether to include the sources of aggregate metrics of an entity. (optional)</param>
        /// <returns>Task of List&lt;EntityProto&gt;</returns>
        System.Threading.Tasks.Task<List<EntityProto>> GetEntitiesAsync (string schemaName, List<string> metricNames = null, bool? includeAggrMetricSources = null);

        /// <summary>
        /// Lists the entities for the specified schema.
        /// </summary>
        /// <remarks>
        /// An entity is an object found on the Cohesity Cluster, such as a disk or a Node. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the entity schema to search for entities.</param>
        /// <param name="metricNames">Specifies the list of metric names to return such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="includeAggrMetricSources">Specifies whether to include the sources of aggregate metrics of an entity. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EntityProto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntityProto>>> GetEntitiesAsyncWithHttpInfo (string schemaName, List<string> metricNames = null, bool? includeAggrMetricSources = null);
        /// <summary>
        /// List the entity schemas filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. If no parameters are specified, all entity schemas found on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricNames">Specifies the list of metric names to filter by such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="schemaNames">Specifies the list of schema names to filter by such as &#39;kIceboxJobVaultStats&#39; which corresponds to &#39;External Target Job Stats&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <returns>Task of List&lt;EntitySchemaProto&gt;</returns>
        System.Threading.Tasks.Task<List<EntitySchemaProto>> GetEntitiesSchemaAsync (List<string> metricNames = null, List<string> schemaNames = null);

        /// <summary>
        /// List the entity schemas filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. If no parameters are specified, all entity schemas found on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricNames">Specifies the list of metric names to filter by such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="schemaNames">Specifies the list of schema names to filter by such as &#39;kIceboxJobVaultStats&#39; which corresponds to &#39;External Target Job Stats&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EntitySchemaProto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntitySchemaProto>>> GetEntitiesSchemaAsyncWithHttpInfo (List<string> metricNames = null, List<string> schemaNames = null);
        /// <summary>
        /// Get the entity schema for the specified schema.
        /// </summary>
        /// <remarks>
        /// An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Name of the Schema</param>
        /// <returns>Task of List&lt;EntitySchemaProto&gt;</returns>
        System.Threading.Tasks.Task<List<EntitySchemaProto>> GetEntitySchemaByNameAsync (string schemaName);

        /// <summary>
        /// Get the entity schema for the specified schema.
        /// </summary>
        /// <remarks>
        /// An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Name of the Schema</param>
        /// <returns>Task of ApiResponse (List&lt;EntitySchemaProto&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EntitySchemaProto>>> GetEntitySchemaByNameAsyncWithHttpInfo (string schemaName);
        /// <summary>
        /// List a series of data points for an entity of a metric in a schema, during the specified time period.
        /// </summary>
        /// <remarks>
        /// A Metric specifies a data point (such as CPU usage and IOPS) to track over a period of time. For example for a disk in the Cluster, you can report on the &#39;Disk Health&#39; (kDiskAwaitTimeMsecs) Metric of the &#39;Disk Health Metrics&#39; (kSentryDiskStats) Schema for the last week. You must specify the &#39;k&#39; names as input and not the descriptive names. You must also specify the id of the entity that you are reporting on such as a Cluster, disk drive, job, etc. Get the entityId by running the GET /public/statistics/entities operation. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the name of entity schema such as &#39;kIceboxJobVaultStats&#39;.</param>
        /// <param name="entityId">Specifies the id of the entity represented as a string. Get the entityId by running the GET public/statistics/entities operation.</param>
        /// <param name="metricName">Specifies the name of the metric such as the &#39;kDiskAwaitTimeMsecs&#39; which is displayed as &#39;Disk Health&#39; in Advanced Diagnostics of the Cohesity Dashboard.</param>
        /// <param name="startTimeMsecs">Specifies the start time for the series of metric data. Specify the start time as a Unix epoch Timestamp (in milliseconds).</param>
        /// <param name="rollupIntervalSecs">Specifies the time interval granularity (in seconds) for the specified rollup function. Only specify a value if Rollup function is also specified. (optional)</param>
        /// <param name="endTimeMsecs">Specifies the end time for the series of metric data. Specify the end time as a Unix epoch Timestamp (in milliseconds). If not specified, the data points up to the current time are returned. (optional)</param>
        /// <param name="rollupFunction">Specifies the rollup function to apply to the data points for the time interval specified by rollupInternalSecs. The following rollup functions are available: sum, average, count, max, min, median, percentile95, latest, and rate. For more information about the functions, see the Advanced Diagnostics in the Cohesity online help. If not specified, raw data is returned. (optional)</param>
        /// <returns>Task of MetricDataBlock</returns>
        System.Threading.Tasks.Task<MetricDataBlock> GetTimeSeriesStatsAsync (string schemaName, string entityId, string metricName, long? startTimeMsecs, int? rollupIntervalSecs = null, long? endTimeMsecs = null, string rollupFunction = null);

        /// <summary>
        /// List a series of data points for an entity of a metric in a schema, during the specified time period.
        /// </summary>
        /// <remarks>
        /// A Metric specifies a data point (such as CPU usage and IOPS) to track over a period of time. For example for a disk in the Cluster, you can report on the &#39;Disk Health&#39; (kDiskAwaitTimeMsecs) Metric of the &#39;Disk Health Metrics&#39; (kSentryDiskStats) Schema for the last week. You must specify the &#39;k&#39; names as input and not the descriptive names. You must also specify the id of the entity that you are reporting on such as a Cluster, disk drive, job, etc. Get the entityId by running the GET /public/statistics/entities operation. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the name of entity schema such as &#39;kIceboxJobVaultStats&#39;.</param>
        /// <param name="entityId">Specifies the id of the entity represented as a string. Get the entityId by running the GET public/statistics/entities operation.</param>
        /// <param name="metricName">Specifies the name of the metric such as the &#39;kDiskAwaitTimeMsecs&#39; which is displayed as &#39;Disk Health&#39; in Advanced Diagnostics of the Cohesity Dashboard.</param>
        /// <param name="startTimeMsecs">Specifies the start time for the series of metric data. Specify the start time as a Unix epoch Timestamp (in milliseconds).</param>
        /// <param name="rollupIntervalSecs">Specifies the time interval granularity (in seconds) for the specified rollup function. Only specify a value if Rollup function is also specified. (optional)</param>
        /// <param name="endTimeMsecs">Specifies the end time for the series of metric data. Specify the end time as a Unix epoch Timestamp (in milliseconds). If not specified, the data points up to the current time are returned. (optional)</param>
        /// <param name="rollupFunction">Specifies the rollup function to apply to the data points for the time interval specified by rollupInternalSecs. The following rollup functions are available: sum, average, count, max, min, median, percentile95, latest, and rate. For more information about the functions, see the Advanced Diagnostics in the Cohesity online help. If not specified, raw data is returned. (optional)</param>
        /// <returns>Task of ApiResponse (MetricDataBlock)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetricDataBlock>> GetTimeSeriesStatsAsyncWithHttpInfo (string schemaName, string entityId, string metricName, long? startTimeMsecs, int? rollupIntervalSecs = null, long? endTimeMsecs = null, string rollupFunction = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatisticsApi : IStatisticsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatisticsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Lists the entities for the specified schema. An entity is an object found on the Cohesity Cluster, such as a disk or a Node. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the entity schema to search for entities.</param>
        /// <param name="metricNames">Specifies the list of metric names to return such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="includeAggrMetricSources">Specifies whether to include the sources of aggregate metrics of an entity. (optional)</param>
        /// <returns>List&lt;EntityProto&gt;</returns>
        public List<EntityProto> GetEntities (string schemaName, List<string> metricNames = null, bool? includeAggrMetricSources = null)
        {
             ApiResponse<List<EntityProto>> localVarResponse = GetEntitiesWithHttpInfo(schemaName, metricNames, includeAggrMetricSources);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the entities for the specified schema. An entity is an object found on the Cohesity Cluster, such as a disk or a Node. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the entity schema to search for entities.</param>
        /// <param name="metricNames">Specifies the list of metric names to return such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="includeAggrMetricSources">Specifies whether to include the sources of aggregate metrics of an entity. (optional)</param>
        /// <returns>ApiResponse of List&lt;EntityProto&gt;</returns>
        public ApiResponse< List<EntityProto> > GetEntitiesWithHttpInfo (string schemaName, List<string> metricNames = null, bool? includeAggrMetricSources = null)
        {
            // verify the required parameter 'schemaName' is set
            if (schemaName == null)
                throw new ApiException(400, "Missing required parameter 'schemaName' when calling StatisticsApi->GetEntities");

            var localVarPath = "/public/statistics/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (metricNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "metricNames", metricNames)); // query parameter
            if (schemaName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaName", schemaName)); // query parameter
            if (includeAggrMetricSources != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAggrMetricSources", includeAggrMetricSources)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityProto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntityProto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityProto>)));
        }

        /// <summary>
        /// Lists the entities for the specified schema. An entity is an object found on the Cohesity Cluster, such as a disk or a Node. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the entity schema to search for entities.</param>
        /// <param name="metricNames">Specifies the list of metric names to return such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="includeAggrMetricSources">Specifies whether to include the sources of aggregate metrics of an entity. (optional)</param>
        /// <returns>Task of List&lt;EntityProto&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntityProto>> GetEntitiesAsync (string schemaName, List<string> metricNames = null, bool? includeAggrMetricSources = null)
        {
             ApiResponse<List<EntityProto>> localVarResponse = await GetEntitiesAsyncWithHttpInfo(schemaName, metricNames, includeAggrMetricSources);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the entities for the specified schema. An entity is an object found on the Cohesity Cluster, such as a disk or a Node. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the entity schema to search for entities.</param>
        /// <param name="metricNames">Specifies the list of metric names to return such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="includeAggrMetricSources">Specifies whether to include the sources of aggregate metrics of an entity. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EntityProto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EntityProto>>> GetEntitiesAsyncWithHttpInfo (string schemaName, List<string> metricNames = null, bool? includeAggrMetricSources = null)
        {
            // verify the required parameter 'schemaName' is set
            if (schemaName == null)
                throw new ApiException(400, "Missing required parameter 'schemaName' when calling StatisticsApi->GetEntities");

            var localVarPath = "/public/statistics/entities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (metricNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "metricNames", metricNames)); // query parameter
            if (schemaName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaName", schemaName)); // query parameter
            if (includeAggrMetricSources != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeAggrMetricSources", includeAggrMetricSources)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntities", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntityProto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntityProto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntityProto>)));
        }

        /// <summary>
        /// List the entity schemas filtered by the specified parameters. An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. If no parameters are specified, all entity schemas found on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricNames">Specifies the list of metric names to filter by such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="schemaNames">Specifies the list of schema names to filter by such as &#39;kIceboxJobVaultStats&#39; which corresponds to &#39;External Target Job Stats&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <returns>List&lt;EntitySchemaProto&gt;</returns>
        public List<EntitySchemaProto> GetEntitiesSchema (List<string> metricNames = null, List<string> schemaNames = null)
        {
             ApiResponse<List<EntitySchemaProto>> localVarResponse = GetEntitiesSchemaWithHttpInfo(metricNames, schemaNames);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the entity schemas filtered by the specified parameters. An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. If no parameters are specified, all entity schemas found on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricNames">Specifies the list of metric names to filter by such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="schemaNames">Specifies the list of schema names to filter by such as &#39;kIceboxJobVaultStats&#39; which corresponds to &#39;External Target Job Stats&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <returns>ApiResponse of List&lt;EntitySchemaProto&gt;</returns>
        public ApiResponse< List<EntitySchemaProto> > GetEntitiesSchemaWithHttpInfo (List<string> metricNames = null, List<string> schemaNames = null)
        {

            var localVarPath = "/public/statistics/entitiesSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (metricNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "metricNames", metricNames)); // query parameter
            if (schemaNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "schemaNames", schemaNames)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntitiesSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntitySchemaProto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntitySchemaProto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntitySchemaProto>)));
        }

        /// <summary>
        /// List the entity schemas filtered by the specified parameters. An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. If no parameters are specified, all entity schemas found on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricNames">Specifies the list of metric names to filter by such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="schemaNames">Specifies the list of schema names to filter by such as &#39;kIceboxJobVaultStats&#39; which corresponds to &#39;External Target Job Stats&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <returns>Task of List&lt;EntitySchemaProto&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntitySchemaProto>> GetEntitiesSchemaAsync (List<string> metricNames = null, List<string> schemaNames = null)
        {
             ApiResponse<List<EntitySchemaProto>> localVarResponse = await GetEntitiesSchemaAsyncWithHttpInfo(metricNames, schemaNames);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the entity schemas filtered by the specified parameters. An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. If no parameters are specified, all entity schemas found on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metricNames">Specifies the list of metric names to filter by such as &#39;kRandomIos&#39; which corresponds to &#39;Random IOs&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <param name="schemaNames">Specifies the list of schema names to filter by such as &#39;kIceboxJobVaultStats&#39; which corresponds to &#39;External Target Job Stats&#39; in Advanced Diagnostics of the Cohesity Dashboard. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EntitySchemaProto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EntitySchemaProto>>> GetEntitiesSchemaAsyncWithHttpInfo (List<string> metricNames = null, List<string> schemaNames = null)
        {

            var localVarPath = "/public/statistics/entitiesSchema";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (metricNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "metricNames", metricNames)); // query parameter
            if (schemaNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "schemaNames", schemaNames)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntitiesSchema", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntitySchemaProto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntitySchemaProto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntitySchemaProto>)));
        }

        /// <summary>
        /// Get the entity schema for the specified schema. An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Name of the Schema</param>
        /// <returns>List&lt;EntitySchemaProto&gt;</returns>
        public List<EntitySchemaProto> GetEntitySchemaByName (string schemaName)
        {
             ApiResponse<List<EntitySchemaProto>> localVarResponse = GetEntitySchemaByNameWithHttpInfo(schemaName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the entity schema for the specified schema. An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Name of the Schema</param>
        /// <returns>ApiResponse of List&lt;EntitySchemaProto&gt;</returns>
        public ApiResponse< List<EntitySchemaProto> > GetEntitySchemaByNameWithHttpInfo (string schemaName)
        {
            // verify the required parameter 'schemaName' is set
            if (schemaName == null)
                throw new ApiException(400, "Missing required parameter 'schemaName' when calling StatisticsApi->GetEntitySchemaByName");

            var localVarPath = "/public/statistics/entitiesSchema/{schemaName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaName != null) localVarPathParams.Add("schemaName", this.Configuration.ApiClient.ParameterToString(schemaName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntitySchemaByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntitySchemaProto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntitySchemaProto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntitySchemaProto>)));
        }

        /// <summary>
        /// Get the entity schema for the specified schema. An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Name of the Schema</param>
        /// <returns>Task of List&lt;EntitySchemaProto&gt;</returns>
        public async System.Threading.Tasks.Task<List<EntitySchemaProto>> GetEntitySchemaByNameAsync (string schemaName)
        {
             ApiResponse<List<EntitySchemaProto>> localVarResponse = await GetEntitySchemaByNameAsyncWithHttpInfo(schemaName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the entity schema for the specified schema. An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Name of the Schema</param>
        /// <returns>Task of ApiResponse (List&lt;EntitySchemaProto&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EntitySchemaProto>>> GetEntitySchemaByNameAsyncWithHttpInfo (string schemaName)
        {
            // verify the required parameter 'schemaName' is set
            if (schemaName == null)
                throw new ApiException(400, "Missing required parameter 'schemaName' when calling StatisticsApi->GetEntitySchemaByName");

            var localVarPath = "/public/statistics/entitiesSchema/{schemaName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (schemaName != null) localVarPathParams.Add("schemaName", this.Configuration.ApiClient.ParameterToString(schemaName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntitySchemaByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EntitySchemaProto>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<EntitySchemaProto>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EntitySchemaProto>)));
        }

        /// <summary>
        /// List a series of data points for an entity of a metric in a schema, during the specified time period. A Metric specifies a data point (such as CPU usage and IOPS) to track over a period of time. For example for a disk in the Cluster, you can report on the &#39;Disk Health&#39; (kDiskAwaitTimeMsecs) Metric of the &#39;Disk Health Metrics&#39; (kSentryDiskStats) Schema for the last week. You must specify the &#39;k&#39; names as input and not the descriptive names. You must also specify the id of the entity that you are reporting on such as a Cluster, disk drive, job, etc. Get the entityId by running the GET /public/statistics/entities operation. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the name of entity schema such as &#39;kIceboxJobVaultStats&#39;.</param>
        /// <param name="entityId">Specifies the id of the entity represented as a string. Get the entityId by running the GET public/statistics/entities operation.</param>
        /// <param name="metricName">Specifies the name of the metric such as the &#39;kDiskAwaitTimeMsecs&#39; which is displayed as &#39;Disk Health&#39; in Advanced Diagnostics of the Cohesity Dashboard.</param>
        /// <param name="startTimeMsecs">Specifies the start time for the series of metric data. Specify the start time as a Unix epoch Timestamp (in milliseconds).</param>
        /// <param name="rollupIntervalSecs">Specifies the time interval granularity (in seconds) for the specified rollup function. Only specify a value if Rollup function is also specified. (optional)</param>
        /// <param name="endTimeMsecs">Specifies the end time for the series of metric data. Specify the end time as a Unix epoch Timestamp (in milliseconds). If not specified, the data points up to the current time are returned. (optional)</param>
        /// <param name="rollupFunction">Specifies the rollup function to apply to the data points for the time interval specified by rollupInternalSecs. The following rollup functions are available: sum, average, count, max, min, median, percentile95, latest, and rate. For more information about the functions, see the Advanced Diagnostics in the Cohesity online help. If not specified, raw data is returned. (optional)</param>
        /// <returns>MetricDataBlock</returns>
        public MetricDataBlock GetTimeSeriesStats (string schemaName, string entityId, string metricName, long? startTimeMsecs, int? rollupIntervalSecs = null, long? endTimeMsecs = null, string rollupFunction = null)
        {
             ApiResponse<MetricDataBlock> localVarResponse = GetTimeSeriesStatsWithHttpInfo(schemaName, entityId, metricName, startTimeMsecs, rollupIntervalSecs, endTimeMsecs, rollupFunction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a series of data points for an entity of a metric in a schema, during the specified time period. A Metric specifies a data point (such as CPU usage and IOPS) to track over a period of time. For example for a disk in the Cluster, you can report on the &#39;Disk Health&#39; (kDiskAwaitTimeMsecs) Metric of the &#39;Disk Health Metrics&#39; (kSentryDiskStats) Schema for the last week. You must specify the &#39;k&#39; names as input and not the descriptive names. You must also specify the id of the entity that you are reporting on such as a Cluster, disk drive, job, etc. Get the entityId by running the GET /public/statistics/entities operation. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the name of entity schema such as &#39;kIceboxJobVaultStats&#39;.</param>
        /// <param name="entityId">Specifies the id of the entity represented as a string. Get the entityId by running the GET public/statistics/entities operation.</param>
        /// <param name="metricName">Specifies the name of the metric such as the &#39;kDiskAwaitTimeMsecs&#39; which is displayed as &#39;Disk Health&#39; in Advanced Diagnostics of the Cohesity Dashboard.</param>
        /// <param name="startTimeMsecs">Specifies the start time for the series of metric data. Specify the start time as a Unix epoch Timestamp (in milliseconds).</param>
        /// <param name="rollupIntervalSecs">Specifies the time interval granularity (in seconds) for the specified rollup function. Only specify a value if Rollup function is also specified. (optional)</param>
        /// <param name="endTimeMsecs">Specifies the end time for the series of metric data. Specify the end time as a Unix epoch Timestamp (in milliseconds). If not specified, the data points up to the current time are returned. (optional)</param>
        /// <param name="rollupFunction">Specifies the rollup function to apply to the data points for the time interval specified by rollupInternalSecs. The following rollup functions are available: sum, average, count, max, min, median, percentile95, latest, and rate. For more information about the functions, see the Advanced Diagnostics in the Cohesity online help. If not specified, raw data is returned. (optional)</param>
        /// <returns>ApiResponse of MetricDataBlock</returns>
        public ApiResponse< MetricDataBlock > GetTimeSeriesStatsWithHttpInfo (string schemaName, string entityId, string metricName, long? startTimeMsecs, int? rollupIntervalSecs = null, long? endTimeMsecs = null, string rollupFunction = null)
        {
            // verify the required parameter 'schemaName' is set
            if (schemaName == null)
                throw new ApiException(400, "Missing required parameter 'schemaName' when calling StatisticsApi->GetTimeSeriesStats");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling StatisticsApi->GetTimeSeriesStats");
            // verify the required parameter 'metricName' is set
            if (metricName == null)
                throw new ApiException(400, "Missing required parameter 'metricName' when calling StatisticsApi->GetTimeSeriesStats");
            // verify the required parameter 'startTimeMsecs' is set
            if (startTimeMsecs == null)
                throw new ApiException(400, "Missing required parameter 'startTimeMsecs' when calling StatisticsApi->GetTimeSeriesStats");

            var localVarPath = "/public/statistics/timeSeriesStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rollupIntervalSecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rollupIntervalSecs", rollupIntervalSecs)); // query parameter
            if (schemaName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaName", schemaName)); // query parameter
            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityId", entityId)); // query parameter
            if (metricName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metricName", metricName)); // query parameter
            if (startTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeMsecs", startTimeMsecs)); // query parameter
            if (endTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeMsecs", endTimeMsecs)); // query parameter
            if (rollupFunction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rollupFunction", rollupFunction)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeSeriesStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetricDataBlock>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetricDataBlock) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetricDataBlock)));
        }

        /// <summary>
        /// List a series of data points for an entity of a metric in a schema, during the specified time period. A Metric specifies a data point (such as CPU usage and IOPS) to track over a period of time. For example for a disk in the Cluster, you can report on the &#39;Disk Health&#39; (kDiskAwaitTimeMsecs) Metric of the &#39;Disk Health Metrics&#39; (kSentryDiskStats) Schema for the last week. You must specify the &#39;k&#39; names as input and not the descriptive names. You must also specify the id of the entity that you are reporting on such as a Cluster, disk drive, job, etc. Get the entityId by running the GET /public/statistics/entities operation. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the name of entity schema such as &#39;kIceboxJobVaultStats&#39;.</param>
        /// <param name="entityId">Specifies the id of the entity represented as a string. Get the entityId by running the GET public/statistics/entities operation.</param>
        /// <param name="metricName">Specifies the name of the metric such as the &#39;kDiskAwaitTimeMsecs&#39; which is displayed as &#39;Disk Health&#39; in Advanced Diagnostics of the Cohesity Dashboard.</param>
        /// <param name="startTimeMsecs">Specifies the start time for the series of metric data. Specify the start time as a Unix epoch Timestamp (in milliseconds).</param>
        /// <param name="rollupIntervalSecs">Specifies the time interval granularity (in seconds) for the specified rollup function. Only specify a value if Rollup function is also specified. (optional)</param>
        /// <param name="endTimeMsecs">Specifies the end time for the series of metric data. Specify the end time as a Unix epoch Timestamp (in milliseconds). If not specified, the data points up to the current time are returned. (optional)</param>
        /// <param name="rollupFunction">Specifies the rollup function to apply to the data points for the time interval specified by rollupInternalSecs. The following rollup functions are available: sum, average, count, max, min, median, percentile95, latest, and rate. For more information about the functions, see the Advanced Diagnostics in the Cohesity online help. If not specified, raw data is returned. (optional)</param>
        /// <returns>Task of MetricDataBlock</returns>
        public async System.Threading.Tasks.Task<MetricDataBlock> GetTimeSeriesStatsAsync (string schemaName, string entityId, string metricName, long? startTimeMsecs, int? rollupIntervalSecs = null, long? endTimeMsecs = null, string rollupFunction = null)
        {
             ApiResponse<MetricDataBlock> localVarResponse = await GetTimeSeriesStatsAsyncWithHttpInfo(schemaName, entityId, metricName, startTimeMsecs, rollupIntervalSecs, endTimeMsecs, rollupFunction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a series of data points for an entity of a metric in a schema, during the specified time period. A Metric specifies a data point (such as CPU usage and IOPS) to track over a period of time. For example for a disk in the Cluster, you can report on the &#39;Disk Health&#39; (kDiskAwaitTimeMsecs) Metric of the &#39;Disk Health Metrics&#39; (kSentryDiskStats) Schema for the last week. You must specify the &#39;k&#39; names as input and not the descriptive names. You must also specify the id of the entity that you are reporting on such as a Cluster, disk drive, job, etc. Get the entityId by running the GET /public/statistics/entities operation. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemaName">Specifies the name of entity schema such as &#39;kIceboxJobVaultStats&#39;.</param>
        /// <param name="entityId">Specifies the id of the entity represented as a string. Get the entityId by running the GET public/statistics/entities operation.</param>
        /// <param name="metricName">Specifies the name of the metric such as the &#39;kDiskAwaitTimeMsecs&#39; which is displayed as &#39;Disk Health&#39; in Advanced Diagnostics of the Cohesity Dashboard.</param>
        /// <param name="startTimeMsecs">Specifies the start time for the series of metric data. Specify the start time as a Unix epoch Timestamp (in milliseconds).</param>
        /// <param name="rollupIntervalSecs">Specifies the time interval granularity (in seconds) for the specified rollup function. Only specify a value if Rollup function is also specified. (optional)</param>
        /// <param name="endTimeMsecs">Specifies the end time for the series of metric data. Specify the end time as a Unix epoch Timestamp (in milliseconds). If not specified, the data points up to the current time are returned. (optional)</param>
        /// <param name="rollupFunction">Specifies the rollup function to apply to the data points for the time interval specified by rollupInternalSecs. The following rollup functions are available: sum, average, count, max, min, median, percentile95, latest, and rate. For more information about the functions, see the Advanced Diagnostics in the Cohesity online help. If not specified, raw data is returned. (optional)</param>
        /// <returns>Task of ApiResponse (MetricDataBlock)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetricDataBlock>> GetTimeSeriesStatsAsyncWithHttpInfo (string schemaName, string entityId, string metricName, long? startTimeMsecs, int? rollupIntervalSecs = null, long? endTimeMsecs = null, string rollupFunction = null)
        {
            // verify the required parameter 'schemaName' is set
            if (schemaName == null)
                throw new ApiException(400, "Missing required parameter 'schemaName' when calling StatisticsApi->GetTimeSeriesStats");
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new ApiException(400, "Missing required parameter 'entityId' when calling StatisticsApi->GetTimeSeriesStats");
            // verify the required parameter 'metricName' is set
            if (metricName == null)
                throw new ApiException(400, "Missing required parameter 'metricName' when calling StatisticsApi->GetTimeSeriesStats");
            // verify the required parameter 'startTimeMsecs' is set
            if (startTimeMsecs == null)
                throw new ApiException(400, "Missing required parameter 'startTimeMsecs' when calling StatisticsApi->GetTimeSeriesStats");

            var localVarPath = "/public/statistics/timeSeriesStats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rollupIntervalSecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rollupIntervalSecs", rollupIntervalSecs)); // query parameter
            if (schemaName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "schemaName", schemaName)); // query parameter
            if (entityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entityId", entityId)); // query parameter
            if (metricName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "metricName", metricName)); // query parameter
            if (startTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeMsecs", startTimeMsecs)); // query parameter
            if (endTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeMsecs", endTimeMsecs)); // query parameter
            if (rollupFunction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "rollupFunction", rollupFunction)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeSeriesStats", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetricDataBlock>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetricDataBlock) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetricDataBlock)));
        }

    }
}
