/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnalyticsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Analyze the uploaded jar.
        /// </summary>
        /// <remarks>
        /// Returns the result of the jar analysis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AnalyseJarResult</returns>
        AnalyseJarResult AnalyzeJar (AnalyseJarArg body = null);

        /// <summary>
        /// Analyze the uploaded jar.
        /// </summary>
        /// <remarks>
        /// Returns the result of the jar analysis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AnalyseJarResult</returns>
        ApiResponse<AnalyseJarResult> AnalyzeJarWithHttpInfo (AnalyseJarArg body = null);
        /// <summary>
        /// Cancel a specific map reduce instance run.
        /// </summary>
        /// <remarks>
        /// Returns the result.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>KillMapReduceInstanceResult</returns>
        KillMapReduceInstanceResult CancelMapReduceInstanceRun (long? id);

        /// <summary>
        /// Cancel a specific map reduce instance run.
        /// </summary>
        /// <remarks>
        /// Returns the result.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of KillMapReduceInstanceResult</returns>
        ApiResponse<KillMapReduceInstanceResult> CancelMapReduceInstanceRunWithHttpInfo (long? id);
        /// <summary>
        /// Create an Application.
        /// </summary>
        /// <remarks>
        /// Returns the created application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>MapReduceInfo</returns>
        MapReduceInfo CreateApplication (MapReduceInfo body = null);

        /// <summary>
        /// Create an Application.
        /// </summary>
        /// <remarks>
        /// Returns the created application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MapReduceInfo</returns>
        ApiResponse<MapReduceInfo> CreateApplicationWithHttpInfo (MapReduceInfo body = null);
        /// <summary>
        /// Create a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the created mapper.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>MapperInfo</returns>
        MapperInfo CreateMapper (MapperInfo body = null);

        /// <summary>
        /// Create a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the created mapper.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MapperInfo</returns>
        ApiResponse<MapperInfo> CreateMapperWithHttpInfo (MapperInfo body = null);
        /// <summary>
        /// Create a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the created reducer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ReducerInfo</returns>
        ReducerInfo CreateReducer (ReducerInfo body = null);

        /// <summary>
        /// Create a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the created reducer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ReducerInfo</returns>
        ApiResponse<ReducerInfo> CreateReducerWithHttpInfo (ReducerInfo body = null);
        /// <summary>
        /// Delete an Application.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteApplication (long? id);

        /// <summary>
        /// Delete an Application.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteApplicationWithHttpInfo (long? id);
        /// <summary>
        /// Delete a Map-Reduce Application Instance Run.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteMapReduceInstanceRun (long? id);

        /// <summary>
        /// Delete a Map-Reduce Application Instance Run.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMapReduceInstanceRunWithHttpInfo (long? id);
        /// <summary>
        /// Delete a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteMapper (long? id);

        /// <summary>
        /// Delete a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteMapperWithHttpInfo (long? id);
        /// <summary>
        /// Delete a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteReducer (long? id);

        /// <summary>
        /// Delete a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteReducerWithHttpInfo (long? id);
        /// <summary>
        /// Delete the uploaded jar from temporary locaation.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void DeleteUploadedJar (UploadMRJarViewPathWrapper body = null);

        /// <summary>
        /// Delete the uploaded jar from temporary locaation.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUploadedJarWithHttpInfo (UploadMRJarViewPathWrapper body = null);
        /// <summary>
        /// Downloads the map reduce base jar.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the map reduce base jar from the cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ExtractFileRangeResult</returns>
        ExtractFileRangeResult DownloadMRBaseJar ();

        /// <summary>
        /// Downloads the map reduce base jar.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the map reduce base jar from the cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ExtractFileRangeResult</returns>
        ApiResponse<ExtractFileRangeResult> DownloadMRBaseJarWithHttpInfo ();
        /// <summary>
        /// Download map reduce base instance run output files from Yoda.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the map reduce instance run output files from Yoda.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">filepath of the file on NFS. (optional)</param>
        /// <param name="startOffset">start offset from where bytes will be read. (optional)</param>
        /// <param name="lengthBytes">Number of bytes to be read from start_offset. (optional)</param>
        /// <param name="isNfsFile">If true, then extracts file from NFS, else from local file system. (optional)</param>
        /// <param name="partitionId">Cluster partition id for the file to be read. (optional)</param>
        /// <param name="viewBoxId">View box id for the file to be read. Required for nfs files only. (optional)</param>
        /// <param name="viewName">View name for the file to be read. Required for nfs files only. (optional)</param>
        /// <returns>ExtractFileRangeResult</returns>
        ExtractFileRangeResult DownloadMROutputFiles (string filePath = null, long? startOffset = null, long? lengthBytes = null, bool? isNfsFile = null, long? partitionId = null, long? viewBoxId = null, string viewName = null);

        /// <summary>
        /// Download map reduce base instance run output files from Yoda.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the map reduce instance run output files from Yoda.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">filepath of the file on NFS. (optional)</param>
        /// <param name="startOffset">start offset from where bytes will be read. (optional)</param>
        /// <param name="lengthBytes">Number of bytes to be read from start_offset. (optional)</param>
        /// <param name="isNfsFile">If true, then extracts file from NFS, else from local file system. (optional)</param>
        /// <param name="partitionId">Cluster partition id for the file to be read. (optional)</param>
        /// <param name="viewBoxId">View box id for the file to be read. Required for nfs files only. (optional)</param>
        /// <param name="viewName">View name for the file to be read. Required for nfs files only. (optional)</param>
        /// <returns>ApiResponse of ExtractFileRangeResult</returns>
        ApiResponse<ExtractFileRangeResult> DownloadMROutputFilesWithHttpInfo (string filePath = null, long? startOffset = null, long? lengthBytes = null, bool? isNfsFile = null, long? partitionId = null, long? viewBoxId = null, string viewName = null);
        /// <summary>
        /// List details about a single Application.
        /// </summary>
        /// <remarks>
        /// Returns the Application corresponding to the specified Application Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MapReduceInfo</returns>
        MapReduceInfo GetApplicationById (long? id);

        /// <summary>
        /// List details about a single Application.
        /// </summary>
        /// <remarks>
        /// Returns the Application corresponding to the specified Application Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MapReduceInfo</returns>
        ApiResponse<MapReduceInfo> GetApplicationByIdWithHttpInfo (long? id);
        /// <summary>
        /// List Applications filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Applications currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApplicationsWrapper</returns>
        ApplicationsWrapper GetApplications ();

        /// <summary>
        /// List Applications filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Applications currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApplicationsWrapper</returns>
        ApiResponse<ApplicationsWrapper> GetApplicationsWithHttpInfo ();
        /// <summary>
        /// Get details about the mounted path to upload Jars.
        /// </summary>
        /// <remarks>
        /// Returns the mounted path to upload Jars.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMRJarUploadPathResult</returns>
        GetMRJarUploadPathResult GetMRUploadJarPath ();

        /// <summary>
        /// Get details about the mounted path to upload Jars.
        /// </summary>
        /// <remarks>
        /// Returns the mounted path to upload Jars.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMRJarUploadPathResult</returns>
        ApiResponse<GetMRJarUploadPathResult> GetMRUploadJarPathWithHttpInfo ();
        /// <summary>
        /// List map reduce application runs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all map reduce application instance runs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApplicationsWrapper</returns>
        ApplicationsWrapper GetMapReduceAppRuns (GetMapReduceAppRunsParams body = null);

        /// <summary>
        /// List map reduce application runs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all map reduce application instance runs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ApplicationsWrapper</returns>
        ApiResponse<ApplicationsWrapper> GetMapReduceAppRunsWithHttpInfo (GetMapReduceAppRunsParams body = null);
        /// <summary>
        /// List details about a single Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the Mapper corresponding to the specified Mapper Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MapperInfo</returns>
        MapperInfo GetMapperById (long? id);

        /// <summary>
        /// List details about a single Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the Mapper corresponding to the specified Mapper Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MapperInfo</returns>
        ApiResponse<MapperInfo> GetMapperByIdWithHttpInfo (long? id);
        /// <summary>
        /// List Mappers filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Mappers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MappersWrapper</returns>
        MappersWrapper GetMappers ();

        /// <summary>
        /// List Mappers filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Mappers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MappersWrapper</returns>
        ApiResponse<MappersWrapper> GetMappersWithHttpInfo ();
        /// <summary>
        /// List details about a single Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the Reducer corresponding to the specified Reducer Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ReducerInfo</returns>
        ReducerInfo GetReducerById (long? id);

        /// <summary>
        /// List details about a single Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the Reducer corresponding to the specified Reducer Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ReducerInfo</returns>
        ApiResponse<ReducerInfo> GetReducerByIdWithHttpInfo (long? id);
        /// <summary>
        /// List Reducers filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Reducers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReducersWrapper</returns>
        ReducersWrapper GetReducers ();

        /// <summary>
        /// List Reducers filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Reducers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReducersWrapper</returns>
        ApiResponse<ReducersWrapper> GetReducersWithHttpInfo ();
        /// <summary>
        /// Run a map-reduce application instance.
        /// </summary>
        /// <remarks>
        /// Returns the updated Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>RunMapReduceInstanceResult</returns>
        RunMapReduceInstanceResult RunMapReduceAppInstance (RunMapReduceParams body = null);

        /// <summary>
        /// Run a map-reduce application instance.
        /// </summary>
        /// <remarks>
        /// Returns the updated Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RunMapReduceInstanceResult</returns>
        ApiResponse<RunMapReduceInstanceResult> RunMapReduceAppInstanceWithHttpInfo (RunMapReduceParams body = null);
        /// <summary>
        /// Update an Application.
        /// </summary>
        /// <remarks>
        /// Returns the updated Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>MapReduceInfo</returns>
        MapReduceInfo UpdateApplication (long? id, MapReduceInfo body = null);

        /// <summary>
        /// Update an Application.
        /// </summary>
        /// <remarks>
        /// Returns the updated Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MapReduceInfo</returns>
        ApiResponse<MapReduceInfo> UpdateApplicationWithHttpInfo (long? id, MapReduceInfo body = null);
        /// <summary>
        /// Update a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the updated Mapper.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>MapperInfo</returns>
        MapperInfo UpdateMapper (long? id, MapperInfo body = null);

        /// <summary>
        /// Update a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the updated Mapper.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MapperInfo</returns>
        ApiResponse<MapperInfo> UpdateMapperWithHttpInfo (long? id, MapperInfo body = null);
        /// <summary>
        /// Update a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the updated reducer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ReducerInfo</returns>
        ReducerInfo UpdateReducer (long? id, ReducerInfo body = null);

        /// <summary>
        /// Update a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the updated reducer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ReducerInfo</returns>
        ApiResponse<ReducerInfo> UpdateReducerWithHttpInfo (long? id, ReducerInfo body = null);
        /// <summary>
        /// Upload a jar to pre-specified Yoda internal view.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the jar name and local mount path where the jar will be uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UploadMRJarViewPathWrapper</returns>
        UploadMRJarViewPathWrapper UploadJar ();

        /// <summary>
        /// Upload a jar to pre-specified Yoda internal view.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the jar name and local mount path where the jar will be uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UploadMRJarViewPathWrapper</returns>
        ApiResponse<UploadMRJarViewPathWrapper> UploadJarWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Analyze the uploaded jar.
        /// </summary>
        /// <remarks>
        /// Returns the result of the jar analysis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AnalyseJarResult</returns>
        System.Threading.Tasks.Task<AnalyseJarResult> AnalyzeJarAsync (AnalyseJarArg body = null);

        /// <summary>
        /// Analyze the uploaded jar.
        /// </summary>
        /// <remarks>
        /// Returns the result of the jar analysis.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AnalyseJarResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<AnalyseJarResult>> AnalyzeJarAsyncWithHttpInfo (AnalyseJarArg body = null);
        /// <summary>
        /// Cancel a specific map reduce instance run.
        /// </summary>
        /// <remarks>
        /// Returns the result.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of KillMapReduceInstanceResult</returns>
        System.Threading.Tasks.Task<KillMapReduceInstanceResult> CancelMapReduceInstanceRunAsync (long? id);

        /// <summary>
        /// Cancel a specific map reduce instance run.
        /// </summary>
        /// <remarks>
        /// Returns the result.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (KillMapReduceInstanceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<KillMapReduceInstanceResult>> CancelMapReduceInstanceRunAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Create an Application.
        /// </summary>
        /// <remarks>
        /// Returns the created application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MapReduceInfo</returns>
        System.Threading.Tasks.Task<MapReduceInfo> CreateApplicationAsync (MapReduceInfo body = null);

        /// <summary>
        /// Create an Application.
        /// </summary>
        /// <remarks>
        /// Returns the created application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MapReduceInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapReduceInfo>> CreateApplicationAsyncWithHttpInfo (MapReduceInfo body = null);
        /// <summary>
        /// Create a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the created mapper.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MapperInfo</returns>
        System.Threading.Tasks.Task<MapperInfo> CreateMapperAsync (MapperInfo body = null);

        /// <summary>
        /// Create a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the created mapper.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MapperInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapperInfo>> CreateMapperAsyncWithHttpInfo (MapperInfo body = null);
        /// <summary>
        /// Create a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the created reducer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ReducerInfo</returns>
        System.Threading.Tasks.Task<ReducerInfo> CreateReducerAsync (ReducerInfo body = null);

        /// <summary>
        /// Create a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the created reducer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ReducerInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReducerInfo>> CreateReducerAsyncWithHttpInfo (ReducerInfo body = null);
        /// <summary>
        /// Delete an Application.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteApplicationAsync (long? id);

        /// <summary>
        /// Delete an Application.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Delete a Map-Reduce Application Instance Run.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMapReduceInstanceRunAsync (long? id);

        /// <summary>
        /// Delete a Map-Reduce Application Instance Run.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMapReduceInstanceRunAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Delete a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteMapperAsync (long? id);

        /// <summary>
        /// Delete a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMapperAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Delete a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteReducerAsync (long? id);

        /// <summary>
        /// Delete a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReducerAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Delete the uploaded jar from temporary locaation.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUploadedJarAsync (UploadMRJarViewPathWrapper body = null);

        /// <summary>
        /// Delete the uploaded jar from temporary locaation.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUploadedJarAsyncWithHttpInfo (UploadMRJarViewPathWrapper body = null);
        /// <summary>
        /// Downloads the map reduce base jar.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the map reduce base jar from the cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ExtractFileRangeResult</returns>
        System.Threading.Tasks.Task<ExtractFileRangeResult> DownloadMRBaseJarAsync ();

        /// <summary>
        /// Downloads the map reduce base jar.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the map reduce base jar from the cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ExtractFileRangeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractFileRangeResult>> DownloadMRBaseJarAsyncWithHttpInfo ();
        /// <summary>
        /// Download map reduce base instance run output files from Yoda.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the map reduce instance run output files from Yoda.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">filepath of the file on NFS. (optional)</param>
        /// <param name="startOffset">start offset from where bytes will be read. (optional)</param>
        /// <param name="lengthBytes">Number of bytes to be read from start_offset. (optional)</param>
        /// <param name="isNfsFile">If true, then extracts file from NFS, else from local file system. (optional)</param>
        /// <param name="partitionId">Cluster partition id for the file to be read. (optional)</param>
        /// <param name="viewBoxId">View box id for the file to be read. Required for nfs files only. (optional)</param>
        /// <param name="viewName">View name for the file to be read. Required for nfs files only. (optional)</param>
        /// <returns>Task of ExtractFileRangeResult</returns>
        System.Threading.Tasks.Task<ExtractFileRangeResult> DownloadMROutputFilesAsync (string filePath = null, long? startOffset = null, long? lengthBytes = null, bool? isNfsFile = null, long? partitionId = null, long? viewBoxId = null, string viewName = null);

        /// <summary>
        /// Download map reduce base instance run output files from Yoda.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the map reduce instance run output files from Yoda.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">filepath of the file on NFS. (optional)</param>
        /// <param name="startOffset">start offset from where bytes will be read. (optional)</param>
        /// <param name="lengthBytes">Number of bytes to be read from start_offset. (optional)</param>
        /// <param name="isNfsFile">If true, then extracts file from NFS, else from local file system. (optional)</param>
        /// <param name="partitionId">Cluster partition id for the file to be read. (optional)</param>
        /// <param name="viewBoxId">View box id for the file to be read. Required for nfs files only. (optional)</param>
        /// <param name="viewName">View name for the file to be read. Required for nfs files only. (optional)</param>
        /// <returns>Task of ApiResponse (ExtractFileRangeResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractFileRangeResult>> DownloadMROutputFilesAsyncWithHttpInfo (string filePath = null, long? startOffset = null, long? lengthBytes = null, bool? isNfsFile = null, long? partitionId = null, long? viewBoxId = null, string viewName = null);
        /// <summary>
        /// List details about a single Application.
        /// </summary>
        /// <remarks>
        /// Returns the Application corresponding to the specified Application Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MapReduceInfo</returns>
        System.Threading.Tasks.Task<MapReduceInfo> GetApplicationByIdAsync (long? id);

        /// <summary>
        /// List details about a single Application.
        /// </summary>
        /// <remarks>
        /// Returns the Application corresponding to the specified Application Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MapReduceInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapReduceInfo>> GetApplicationByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List Applications filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Applications currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApplicationsWrapper</returns>
        System.Threading.Tasks.Task<ApplicationsWrapper> GetApplicationsAsync ();

        /// <summary>
        /// List Applications filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Applications currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApplicationsWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationsWrapper>> GetApplicationsAsyncWithHttpInfo ();
        /// <summary>
        /// Get details about the mounted path to upload Jars.
        /// </summary>
        /// <remarks>
        /// Returns the mounted path to upload Jars.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMRJarUploadPathResult</returns>
        System.Threading.Tasks.Task<GetMRJarUploadPathResult> GetMRUploadJarPathAsync ();

        /// <summary>
        /// Get details about the mounted path to upload Jars.
        /// </summary>
        /// <remarks>
        /// Returns the mounted path to upload Jars.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMRJarUploadPathResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMRJarUploadPathResult>> GetMRUploadJarPathAsyncWithHttpInfo ();
        /// <summary>
        /// List map reduce application runs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all map reduce application instance runs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApplicationsWrapper</returns>
        System.Threading.Tasks.Task<ApplicationsWrapper> GetMapReduceAppRunsAsync (GetMapReduceAppRunsParams body = null);

        /// <summary>
        /// List map reduce application runs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all map reduce application instance runs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationsWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApplicationsWrapper>> GetMapReduceAppRunsAsyncWithHttpInfo (GetMapReduceAppRunsParams body = null);
        /// <summary>
        /// List details about a single Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the Mapper corresponding to the specified Mapper Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MapperInfo</returns>
        System.Threading.Tasks.Task<MapperInfo> GetMapperByIdAsync (long? id);

        /// <summary>
        /// List details about a single Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the Mapper corresponding to the specified Mapper Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MapperInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapperInfo>> GetMapperByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List Mappers filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Mappers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MappersWrapper</returns>
        System.Threading.Tasks.Task<MappersWrapper> GetMappersAsync ();

        /// <summary>
        /// List Mappers filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Mappers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MappersWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<MappersWrapper>> GetMappersAsyncWithHttpInfo ();
        /// <summary>
        /// List details about a single Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the Reducer corresponding to the specified Reducer Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ReducerInfo</returns>
        System.Threading.Tasks.Task<ReducerInfo> GetReducerByIdAsync (long? id);

        /// <summary>
        /// List details about a single Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the Reducer corresponding to the specified Reducer Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ReducerInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReducerInfo>> GetReducerByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List Reducers filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Reducers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReducersWrapper</returns>
        System.Threading.Tasks.Task<ReducersWrapper> GetReducersAsync ();

        /// <summary>
        /// List Reducers filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Reducers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReducersWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReducersWrapper>> GetReducersAsyncWithHttpInfo ();
        /// <summary>
        /// Run a map-reduce application instance.
        /// </summary>
        /// <remarks>
        /// Returns the updated Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RunMapReduceInstanceResult</returns>
        System.Threading.Tasks.Task<RunMapReduceInstanceResult> RunMapReduceAppInstanceAsync (RunMapReduceParams body = null);

        /// <summary>
        /// Run a map-reduce application instance.
        /// </summary>
        /// <remarks>
        /// Returns the updated Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RunMapReduceInstanceResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<RunMapReduceInstanceResult>> RunMapReduceAppInstanceAsyncWithHttpInfo (RunMapReduceParams body = null);
        /// <summary>
        /// Update an Application.
        /// </summary>
        /// <remarks>
        /// Returns the updated Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MapReduceInfo</returns>
        System.Threading.Tasks.Task<MapReduceInfo> UpdateApplicationAsync (long? id, MapReduceInfo body = null);

        /// <summary>
        /// Update an Application.
        /// </summary>
        /// <remarks>
        /// Returns the updated Application.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MapReduceInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapReduceInfo>> UpdateApplicationAsyncWithHttpInfo (long? id, MapReduceInfo body = null);
        /// <summary>
        /// Update a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the updated Mapper.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MapperInfo</returns>
        System.Threading.Tasks.Task<MapperInfo> UpdateMapperAsync (long? id, MapperInfo body = null);

        /// <summary>
        /// Update a Mapper.
        /// </summary>
        /// <remarks>
        /// Returns the updated Mapper.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MapperInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapperInfo>> UpdateMapperAsyncWithHttpInfo (long? id, MapperInfo body = null);
        /// <summary>
        /// Update a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the updated reducer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ReducerInfo</returns>
        System.Threading.Tasks.Task<ReducerInfo> UpdateReducerAsync (long? id, ReducerInfo body = null);

        /// <summary>
        /// Update a Reducer.
        /// </summary>
        /// <remarks>
        /// Returns the updated reducer.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ReducerInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReducerInfo>> UpdateReducerAsyncWithHttpInfo (long? id, ReducerInfo body = null);
        /// <summary>
        /// Upload a jar to pre-specified Yoda internal view.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the jar name and local mount path where the jar will be uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UploadMRJarViewPathWrapper</returns>
        System.Threading.Tasks.Task<UploadMRJarViewPathWrapper> UploadJarAsync ();

        /// <summary>
        /// Upload a jar to pre-specified Yoda internal view.
        /// </summary>
        /// <remarks>
        /// Returns a struct containing the jar name and local mount path where the jar will be uploaded.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UploadMRJarViewPathWrapper)</returns>
        System.Threading.Tasks.Task<ApiResponse<UploadMRJarViewPathWrapper>> UploadJarAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnalyticsApi : IAnalyticsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnalyticsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnalyticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnalyticsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Analyze the uploaded jar. Returns the result of the jar analysis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AnalyseJarResult</returns>
        public AnalyseJarResult AnalyzeJar (AnalyseJarArg body = null)
        {
             ApiResponse<AnalyseJarResult> localVarResponse = AnalyzeJarWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Analyze the uploaded jar. Returns the result of the jar analysis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AnalyseJarResult</returns>
        public ApiResponse< AnalyseJarResult > AnalyzeJarWithHttpInfo (AnalyseJarArg body = null)
        {

            var localVarPath = "/public/analytics/analyzeJar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnalyseJarResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnalyseJarResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnalyseJarResult)));
        }

        /// <summary>
        /// Analyze the uploaded jar. Returns the result of the jar analysis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AnalyseJarResult</returns>
        public async System.Threading.Tasks.Task<AnalyseJarResult> AnalyzeJarAsync (AnalyseJarArg body = null)
        {
             ApiResponse<AnalyseJarResult> localVarResponse = await AnalyzeJarAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Analyze the uploaded jar. Returns the result of the jar analysis.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AnalyseJarResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AnalyseJarResult>> AnalyzeJarAsyncWithHttpInfo (AnalyseJarArg body = null)
        {

            var localVarPath = "/public/analytics/analyzeJar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AnalyzeJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AnalyseJarResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AnalyseJarResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AnalyseJarResult)));
        }

        /// <summary>
        /// Cancel a specific map reduce instance run. Returns the result.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>KillMapReduceInstanceResult</returns>
        public KillMapReduceInstanceResult CancelMapReduceInstanceRun (long? id)
        {
             ApiResponse<KillMapReduceInstanceResult> localVarResponse = CancelMapReduceInstanceRunWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a specific map reduce instance run. Returns the result.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of KillMapReduceInstanceResult</returns>
        public ApiResponse< KillMapReduceInstanceResult > CancelMapReduceInstanceRunWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->CancelMapReduceInstanceRun");

            var localVarPath = "/public/analytics/cancelAppInstanceRun/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelMapReduceInstanceRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KillMapReduceInstanceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KillMapReduceInstanceResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KillMapReduceInstanceResult)));
        }

        /// <summary>
        /// Cancel a specific map reduce instance run. Returns the result.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of KillMapReduceInstanceResult</returns>
        public async System.Threading.Tasks.Task<KillMapReduceInstanceResult> CancelMapReduceInstanceRunAsync (long? id)
        {
             ApiResponse<KillMapReduceInstanceResult> localVarResponse = await CancelMapReduceInstanceRunAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a specific map reduce instance run. Returns the result.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (KillMapReduceInstanceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KillMapReduceInstanceResult>> CancelMapReduceInstanceRunAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->CancelMapReduceInstanceRun");

            var localVarPath = "/public/analytics/cancelAppInstanceRun/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelMapReduceInstanceRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KillMapReduceInstanceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KillMapReduceInstanceResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KillMapReduceInstanceResult)));
        }

        /// <summary>
        /// Create an Application. Returns the created application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>MapReduceInfo</returns>
        public MapReduceInfo CreateApplication (MapReduceInfo body = null)
        {
             ApiResponse<MapReduceInfo> localVarResponse = CreateApplicationWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Application. Returns the created application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MapReduceInfo</returns>
        public ApiResponse< MapReduceInfo > CreateApplicationWithHttpInfo (MapReduceInfo body = null)
        {

            var localVarPath = "/public/analytics/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapReduceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapReduceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapReduceInfo)));
        }

        /// <summary>
        /// Create an Application. Returns the created application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MapReduceInfo</returns>
        public async System.Threading.Tasks.Task<MapReduceInfo> CreateApplicationAsync (MapReduceInfo body = null)
        {
             ApiResponse<MapReduceInfo> localVarResponse = await CreateApplicationAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Application. Returns the created application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MapReduceInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MapReduceInfo>> CreateApplicationAsyncWithHttpInfo (MapReduceInfo body = null)
        {

            var localVarPath = "/public/analytics/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapReduceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapReduceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapReduceInfo)));
        }

        /// <summary>
        /// Create a Mapper. Returns the created mapper.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>MapperInfo</returns>
        public MapperInfo CreateMapper (MapperInfo body = null)
        {
             ApiResponse<MapperInfo> localVarResponse = CreateMapperWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Mapper. Returns the created mapper.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MapperInfo</returns>
        public ApiResponse< MapperInfo > CreateMapperWithHttpInfo (MapperInfo body = null)
        {

            var localVarPath = "/public/analytics/mappers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMapper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapperInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapperInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapperInfo)));
        }

        /// <summary>
        /// Create a Mapper. Returns the created mapper.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MapperInfo</returns>
        public async System.Threading.Tasks.Task<MapperInfo> CreateMapperAsync (MapperInfo body = null)
        {
             ApiResponse<MapperInfo> localVarResponse = await CreateMapperAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Mapper. Returns the created mapper.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MapperInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MapperInfo>> CreateMapperAsyncWithHttpInfo (MapperInfo body = null)
        {

            var localVarPath = "/public/analytics/mappers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMapper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapperInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapperInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapperInfo)));
        }

        /// <summary>
        /// Create a Reducer. Returns the created reducer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ReducerInfo</returns>
        public ReducerInfo CreateReducer (ReducerInfo body = null)
        {
             ApiResponse<ReducerInfo> localVarResponse = CreateReducerWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Reducer. Returns the created reducer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ReducerInfo</returns>
        public ApiResponse< ReducerInfo > CreateReducerWithHttpInfo (ReducerInfo body = null)
        {

            var localVarPath = "/public/analytics/reducers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReducer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReducerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReducerInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReducerInfo)));
        }

        /// <summary>
        /// Create a Reducer. Returns the created reducer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ReducerInfo</returns>
        public async System.Threading.Tasks.Task<ReducerInfo> CreateReducerAsync (ReducerInfo body = null)
        {
             ApiResponse<ReducerInfo> localVarResponse = await CreateReducerAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Reducer. Returns the created reducer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ReducerInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReducerInfo>> CreateReducerAsyncWithHttpInfo (ReducerInfo body = null)
        {

            var localVarPath = "/public/analytics/reducers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateReducer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReducerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReducerInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReducerInfo)));
        }

        /// <summary>
        /// Delete an Application. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteApplication (long? id)
        {
             DeleteApplicationWithHttpInfo(id);
        }

        /// <summary>
        /// Delete an Application. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteApplicationWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->DeleteApplication");

            var localVarPath = "/public/analytics/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an Application. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteApplicationAsync (long? id)
        {
             await DeleteApplicationAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete an Application. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteApplicationAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->DeleteApplication");

            var localVarPath = "/public/analytics/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Map-Reduce Application Instance Run. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteMapReduceInstanceRun (long? id)
        {
             DeleteMapReduceInstanceRunWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Map-Reduce Application Instance Run. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMapReduceInstanceRunWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->DeleteMapReduceInstanceRun");

            var localVarPath = "/public/analytics/mrAppRun/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMapReduceInstanceRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Map-Reduce Application Instance Run. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMapReduceInstanceRunAsync (long? id)
        {
             await DeleteMapReduceInstanceRunAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a Map-Reduce Application Instance Run. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMapReduceInstanceRunAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->DeleteMapReduceInstanceRun");

            var localVarPath = "/public/analytics/mrAppRun/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMapReduceInstanceRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Mapper. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteMapper (long? id)
        {
             DeleteMapperWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Mapper. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteMapperWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->DeleteMapper");

            var localVarPath = "/public/analytics/mappers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMapper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Mapper. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteMapperAsync (long? id)
        {
             await DeleteMapperAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a Mapper. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteMapperAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->DeleteMapper");

            var localVarPath = "/public/analytics/mappers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteMapper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Reducer. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteReducer (long? id)
        {
             DeleteReducerWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Reducer. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteReducerWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->DeleteReducer");

            var localVarPath = "/public/analytics/reducers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReducer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Reducer. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteReducerAsync (long? id)
        {
             await DeleteReducerAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a Reducer. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteReducerAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->DeleteReducer");

            var localVarPath = "/public/analytics/reducers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteReducer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the uploaded jar from temporary locaation. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void DeleteUploadedJar (UploadMRJarViewPathWrapper body = null)
        {
             DeleteUploadedJarWithHttpInfo(body);
        }

        /// <summary>
        /// Delete the uploaded jar from temporary locaation. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUploadedJarWithHttpInfo (UploadMRJarViewPathWrapper body = null)
        {

            var localVarPath = "/public/analytics/uploadJar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUploadedJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the uploaded jar from temporary locaation. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUploadedJarAsync (UploadMRJarViewPathWrapper body = null)
        {
             await DeleteUploadedJarAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Delete the uploaded jar from temporary locaation. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUploadedJarAsyncWithHttpInfo (UploadMRJarViewPathWrapper body = null)
        {

            var localVarPath = "/public/analytics/uploadJar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUploadedJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Downloads the map reduce base jar. Returns a struct containing the map reduce base jar from the cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ExtractFileRangeResult</returns>
        public ExtractFileRangeResult DownloadMRBaseJar ()
        {
             ApiResponse<ExtractFileRangeResult> localVarResponse = DownloadMRBaseJarWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Downloads the map reduce base jar. Returns a struct containing the map reduce base jar from the cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ExtractFileRangeResult</returns>
        public ApiResponse< ExtractFileRangeResult > DownloadMRBaseJarWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/mrBaseJar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadMRBaseJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtractFileRangeResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtractFileRangeResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtractFileRangeResult)));
        }

        /// <summary>
        /// Downloads the map reduce base jar. Returns a struct containing the map reduce base jar from the cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ExtractFileRangeResult</returns>
        public async System.Threading.Tasks.Task<ExtractFileRangeResult> DownloadMRBaseJarAsync ()
        {
             ApiResponse<ExtractFileRangeResult> localVarResponse = await DownloadMRBaseJarAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Downloads the map reduce base jar. Returns a struct containing the map reduce base jar from the cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ExtractFileRangeResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtractFileRangeResult>> DownloadMRBaseJarAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/mrBaseJar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadMRBaseJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtractFileRangeResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtractFileRangeResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtractFileRangeResult)));
        }

        /// <summary>
        /// Download map reduce base instance run output files from Yoda. Returns a struct containing the map reduce instance run output files from Yoda.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">filepath of the file on NFS. (optional)</param>
        /// <param name="startOffset">start offset from where bytes will be read. (optional)</param>
        /// <param name="lengthBytes">Number of bytes to be read from start_offset. (optional)</param>
        /// <param name="isNfsFile">If true, then extracts file from NFS, else from local file system. (optional)</param>
        /// <param name="partitionId">Cluster partition id for the file to be read. (optional)</param>
        /// <param name="viewBoxId">View box id for the file to be read. Required for nfs files only. (optional)</param>
        /// <param name="viewName">View name for the file to be read. Required for nfs files only. (optional)</param>
        /// <returns>ExtractFileRangeResult</returns>
        public ExtractFileRangeResult DownloadMROutputFiles (string filePath = null, long? startOffset = null, long? lengthBytes = null, bool? isNfsFile = null, long? partitionId = null, long? viewBoxId = null, string viewName = null)
        {
             ApiResponse<ExtractFileRangeResult> localVarResponse = DownloadMROutputFilesWithHttpInfo(filePath, startOffset, lengthBytes, isNfsFile, partitionId, viewBoxId, viewName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download map reduce base instance run output files from Yoda. Returns a struct containing the map reduce instance run output files from Yoda.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">filepath of the file on NFS. (optional)</param>
        /// <param name="startOffset">start offset from where bytes will be read. (optional)</param>
        /// <param name="lengthBytes">Number of bytes to be read from start_offset. (optional)</param>
        /// <param name="isNfsFile">If true, then extracts file from NFS, else from local file system. (optional)</param>
        /// <param name="partitionId">Cluster partition id for the file to be read. (optional)</param>
        /// <param name="viewBoxId">View box id for the file to be read. Required for nfs files only. (optional)</param>
        /// <param name="viewName">View name for the file to be read. Required for nfs files only. (optional)</param>
        /// <returns>ApiResponse of ExtractFileRangeResult</returns>
        public ApiResponse< ExtractFileRangeResult > DownloadMROutputFilesWithHttpInfo (string filePath = null, long? startOffset = null, long? lengthBytes = null, bool? isNfsFile = null, long? partitionId = null, long? viewBoxId = null, string viewName = null)
        {

            var localVarPath = "/public/analytics/mrOutputfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filePath", filePath)); // query parameter
            if (startOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startOffset", startOffset)); // query parameter
            if (lengthBytes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lengthBytes", lengthBytes)); // query parameter
            if (isNfsFile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNfsFile", isNfsFile)); // query parameter
            if (partitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partitionId", partitionId)); // query parameter
            if (viewBoxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "viewBoxId", viewBoxId)); // query parameter
            if (viewName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "viewName", viewName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadMROutputFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtractFileRangeResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtractFileRangeResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtractFileRangeResult)));
        }

        /// <summary>
        /// Download map reduce base instance run output files from Yoda. Returns a struct containing the map reduce instance run output files from Yoda.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">filepath of the file on NFS. (optional)</param>
        /// <param name="startOffset">start offset from where bytes will be read. (optional)</param>
        /// <param name="lengthBytes">Number of bytes to be read from start_offset. (optional)</param>
        /// <param name="isNfsFile">If true, then extracts file from NFS, else from local file system. (optional)</param>
        /// <param name="partitionId">Cluster partition id for the file to be read. (optional)</param>
        /// <param name="viewBoxId">View box id for the file to be read. Required for nfs files only. (optional)</param>
        /// <param name="viewName">View name for the file to be read. Required for nfs files only. (optional)</param>
        /// <returns>Task of ExtractFileRangeResult</returns>
        public async System.Threading.Tasks.Task<ExtractFileRangeResult> DownloadMROutputFilesAsync (string filePath = null, long? startOffset = null, long? lengthBytes = null, bool? isNfsFile = null, long? partitionId = null, long? viewBoxId = null, string viewName = null)
        {
             ApiResponse<ExtractFileRangeResult> localVarResponse = await DownloadMROutputFilesAsyncWithHttpInfo(filePath, startOffset, lengthBytes, isNfsFile, partitionId, viewBoxId, viewName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Download map reduce base instance run output files from Yoda. Returns a struct containing the map reduce instance run output files from Yoda.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filePath">filepath of the file on NFS. (optional)</param>
        /// <param name="startOffset">start offset from where bytes will be read. (optional)</param>
        /// <param name="lengthBytes">Number of bytes to be read from start_offset. (optional)</param>
        /// <param name="isNfsFile">If true, then extracts file from NFS, else from local file system. (optional)</param>
        /// <param name="partitionId">Cluster partition id for the file to be read. (optional)</param>
        /// <param name="viewBoxId">View box id for the file to be read. Required for nfs files only. (optional)</param>
        /// <param name="viewName">View name for the file to be read. Required for nfs files only. (optional)</param>
        /// <returns>Task of ApiResponse (ExtractFileRangeResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtractFileRangeResult>> DownloadMROutputFilesAsyncWithHttpInfo (string filePath = null, long? startOffset = null, long? lengthBytes = null, bool? isNfsFile = null, long? partitionId = null, long? viewBoxId = null, string viewName = null)
        {

            var localVarPath = "/public/analytics/mrOutputfiles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filePath", filePath)); // query parameter
            if (startOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startOffset", startOffset)); // query parameter
            if (lengthBytes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lengthBytes", lengthBytes)); // query parameter
            if (isNfsFile != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isNfsFile", isNfsFile)); // query parameter
            if (partitionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partitionId", partitionId)); // query parameter
            if (viewBoxId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "viewBoxId", viewBoxId)); // query parameter
            if (viewName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "viewName", viewName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DownloadMROutputFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtractFileRangeResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtractFileRangeResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtractFileRangeResult)));
        }

        /// <summary>
        /// List details about a single Application. Returns the Application corresponding to the specified Application Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MapReduceInfo</returns>
        public MapReduceInfo GetApplicationById (long? id)
        {
             ApiResponse<MapReduceInfo> localVarResponse = GetApplicationByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single Application. Returns the Application corresponding to the specified Application Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MapReduceInfo</returns>
        public ApiResponse< MapReduceInfo > GetApplicationByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->GetApplicationById");

            var localVarPath = "/public/analytics/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapReduceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapReduceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapReduceInfo)));
        }

        /// <summary>
        /// List details about a single Application. Returns the Application corresponding to the specified Application Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MapReduceInfo</returns>
        public async System.Threading.Tasks.Task<MapReduceInfo> GetApplicationByIdAsync (long? id)
        {
             ApiResponse<MapReduceInfo> localVarResponse = await GetApplicationByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single Application. Returns the Application corresponding to the specified Application Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MapReduceInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MapReduceInfo>> GetApplicationByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->GetApplicationById");

            var localVarPath = "/public/analytics/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplicationById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapReduceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapReduceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapReduceInfo)));
        }

        /// <summary>
        /// List Applications filtered by the specified parameters. If no parameters are specified, all Applications currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApplicationsWrapper</returns>
        public ApplicationsWrapper GetApplications ()
        {
             ApiResponse<ApplicationsWrapper> localVarResponse = GetApplicationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Applications filtered by the specified parameters. If no parameters are specified, all Applications currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApplicationsWrapper</returns>
        public ApiResponse< ApplicationsWrapper > GetApplicationsWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationsWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationsWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationsWrapper)));
        }

        /// <summary>
        /// List Applications filtered by the specified parameters. If no parameters are specified, all Applications currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApplicationsWrapper</returns>
        public async System.Threading.Tasks.Task<ApplicationsWrapper> GetApplicationsAsync ()
        {
             ApiResponse<ApplicationsWrapper> localVarResponse = await GetApplicationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Applications filtered by the specified parameters. If no parameters are specified, all Applications currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApplicationsWrapper)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationsWrapper>> GetApplicationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetApplications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationsWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationsWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationsWrapper)));
        }

        /// <summary>
        /// Get details about the mounted path to upload Jars. Returns the mounted path to upload Jars.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetMRJarUploadPathResult</returns>
        public GetMRJarUploadPathResult GetMRUploadJarPath ()
        {
             ApiResponse<GetMRJarUploadPathResult> localVarResponse = GetMRUploadJarPathWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about the mounted path to upload Jars. Returns the mounted path to upload Jars.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetMRJarUploadPathResult</returns>
        public ApiResponse< GetMRJarUploadPathResult > GetMRUploadJarPathWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/uploadJarPath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMRUploadJarPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMRJarUploadPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMRJarUploadPathResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMRJarUploadPathResult)));
        }

        /// <summary>
        /// Get details about the mounted path to upload Jars. Returns the mounted path to upload Jars.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetMRJarUploadPathResult</returns>
        public async System.Threading.Tasks.Task<GetMRJarUploadPathResult> GetMRUploadJarPathAsync ()
        {
             ApiResponse<GetMRJarUploadPathResult> localVarResponse = await GetMRUploadJarPathAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details about the mounted path to upload Jars. Returns the mounted path to upload Jars.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetMRJarUploadPathResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMRJarUploadPathResult>> GetMRUploadJarPathAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/uploadJarPath";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMRUploadJarPath", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMRJarUploadPathResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMRJarUploadPathResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMRJarUploadPathResult)));
        }

        /// <summary>
        /// List map reduce application runs filtered by the specified parameters. If no parameters are specified, all map reduce application instance runs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApplicationsWrapper</returns>
        public ApplicationsWrapper GetMapReduceAppRuns (GetMapReduceAppRunsParams body = null)
        {
             ApiResponse<ApplicationsWrapper> localVarResponse = GetMapReduceAppRunsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List map reduce application runs filtered by the specified parameters. If no parameters are specified, all map reduce application instance runs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ApplicationsWrapper</returns>
        public ApiResponse< ApplicationsWrapper > GetMapReduceAppRunsWithHttpInfo (GetMapReduceAppRunsParams body = null)
        {

            var localVarPath = "/public/analytics/mrAppRuns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMapReduceAppRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationsWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationsWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationsWrapper)));
        }

        /// <summary>
        /// List map reduce application runs filtered by the specified parameters. If no parameters are specified, all map reduce application instance runs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApplicationsWrapper</returns>
        public async System.Threading.Tasks.Task<ApplicationsWrapper> GetMapReduceAppRunsAsync (GetMapReduceAppRunsParams body = null)
        {
             ApiResponse<ApplicationsWrapper> localVarResponse = await GetMapReduceAppRunsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List map reduce application runs filtered by the specified parameters. If no parameters are specified, all map reduce application instance runs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ApplicationsWrapper)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApplicationsWrapper>> GetMapReduceAppRunsAsyncWithHttpInfo (GetMapReduceAppRunsParams body = null)
        {

            var localVarPath = "/public/analytics/mrAppRuns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMapReduceAppRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApplicationsWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApplicationsWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApplicationsWrapper)));
        }

        /// <summary>
        /// List details about a single Mapper. Returns the Mapper corresponding to the specified Mapper Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>MapperInfo</returns>
        public MapperInfo GetMapperById (long? id)
        {
             ApiResponse<MapperInfo> localVarResponse = GetMapperByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single Mapper. Returns the Mapper corresponding to the specified Mapper Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of MapperInfo</returns>
        public ApiResponse< MapperInfo > GetMapperByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->GetMapperById");

            var localVarPath = "/public/analytics/mappers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMapperById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapperInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapperInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapperInfo)));
        }

        /// <summary>
        /// List details about a single Mapper. Returns the Mapper corresponding to the specified Mapper Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of MapperInfo</returns>
        public async System.Threading.Tasks.Task<MapperInfo> GetMapperByIdAsync (long? id)
        {
             ApiResponse<MapperInfo> localVarResponse = await GetMapperByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single Mapper. Returns the Mapper corresponding to the specified Mapper Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (MapperInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MapperInfo>> GetMapperByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->GetMapperById");

            var localVarPath = "/public/analytics/mappers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMapperById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapperInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapperInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapperInfo)));
        }

        /// <summary>
        /// List Mappers filtered by the specified parameters. If no parameters are specified, all Mappers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MappersWrapper</returns>
        public MappersWrapper GetMappers ()
        {
             ApiResponse<MappersWrapper> localVarResponse = GetMappersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Mappers filtered by the specified parameters. If no parameters are specified, all Mappers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MappersWrapper</returns>
        public ApiResponse< MappersWrapper > GetMappersWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/mappers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMappers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MappersWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MappersWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MappersWrapper)));
        }

        /// <summary>
        /// List Mappers filtered by the specified parameters. If no parameters are specified, all Mappers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MappersWrapper</returns>
        public async System.Threading.Tasks.Task<MappersWrapper> GetMappersAsync ()
        {
             ApiResponse<MappersWrapper> localVarResponse = await GetMappersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Mappers filtered by the specified parameters. If no parameters are specified, all Mappers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MappersWrapper)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MappersWrapper>> GetMappersAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/mappers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetMappers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MappersWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MappersWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MappersWrapper)));
        }

        /// <summary>
        /// List details about a single Reducer. Returns the Reducer corresponding to the specified Reducer Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ReducerInfo</returns>
        public ReducerInfo GetReducerById (long? id)
        {
             ApiResponse<ReducerInfo> localVarResponse = GetReducerByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single Reducer. Returns the Reducer corresponding to the specified Reducer Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of ReducerInfo</returns>
        public ApiResponse< ReducerInfo > GetReducerByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->GetReducerById");

            var localVarPath = "/public/analytics/reducers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReducerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReducerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReducerInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReducerInfo)));
        }

        /// <summary>
        /// List details about a single Reducer. Returns the Reducer corresponding to the specified Reducer Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ReducerInfo</returns>
        public async System.Threading.Tasks.Task<ReducerInfo> GetReducerByIdAsync (long? id)
        {
             ApiResponse<ReducerInfo> localVarResponse = await GetReducerByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single Reducer. Returns the Reducer corresponding to the specified Reducer Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (ReducerInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReducerInfo>> GetReducerByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->GetReducerById");

            var localVarPath = "/public/analytics/reducers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReducerById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReducerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReducerInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReducerInfo)));
        }

        /// <summary>
        /// List Reducers filtered by the specified parameters. If no parameters are specified, all Reducers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReducersWrapper</returns>
        public ReducersWrapper GetReducers ()
        {
             ApiResponse<ReducersWrapper> localVarResponse = GetReducersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Reducers filtered by the specified parameters. If no parameters are specified, all Reducers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReducersWrapper</returns>
        public ApiResponse< ReducersWrapper > GetReducersWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/reducers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReducers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReducersWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReducersWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReducersWrapper)));
        }

        /// <summary>
        /// List Reducers filtered by the specified parameters. If no parameters are specified, all Reducers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReducersWrapper</returns>
        public async System.Threading.Tasks.Task<ReducersWrapper> GetReducersAsync ()
        {
             ApiResponse<ReducersWrapper> localVarResponse = await GetReducersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Reducers filtered by the specified parameters. If no parameters are specified, all Reducers currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReducersWrapper)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReducersWrapper>> GetReducersAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/reducers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReducers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReducersWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReducersWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReducersWrapper)));
        }

        /// <summary>
        /// Run a map-reduce application instance. Returns the updated Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>RunMapReduceInstanceResult</returns>
        public RunMapReduceInstanceResult RunMapReduceAppInstance (RunMapReduceParams body = null)
        {
             ApiResponse<RunMapReduceInstanceResult> localVarResponse = RunMapReduceAppInstanceWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Run a map-reduce application instance. Returns the updated Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of RunMapReduceInstanceResult</returns>
        public ApiResponse< RunMapReduceInstanceResult > RunMapReduceAppInstanceWithHttpInfo (RunMapReduceParams body = null)
        {

            var localVarPath = "/public/analytics/runAppInstance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunMapReduceAppInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunMapReduceInstanceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RunMapReduceInstanceResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunMapReduceInstanceResult)));
        }

        /// <summary>
        /// Run a map-reduce application instance. Returns the updated Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of RunMapReduceInstanceResult</returns>
        public async System.Threading.Tasks.Task<RunMapReduceInstanceResult> RunMapReduceAppInstanceAsync (RunMapReduceParams body = null)
        {
             ApiResponse<RunMapReduceInstanceResult> localVarResponse = await RunMapReduceAppInstanceAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Run a map-reduce application instance. Returns the updated Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (RunMapReduceInstanceResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RunMapReduceInstanceResult>> RunMapReduceAppInstanceAsyncWithHttpInfo (RunMapReduceParams body = null)
        {

            var localVarPath = "/public/analytics/runAppInstance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunMapReduceAppInstance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RunMapReduceInstanceResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RunMapReduceInstanceResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RunMapReduceInstanceResult)));
        }

        /// <summary>
        /// Update an Application. Returns the updated Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>MapReduceInfo</returns>
        public MapReduceInfo UpdateApplication (long? id, MapReduceInfo body = null)
        {
             ApiResponse<MapReduceInfo> localVarResponse = UpdateApplicationWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Application. Returns the updated Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MapReduceInfo</returns>
        public ApiResponse< MapReduceInfo > UpdateApplicationWithHttpInfo (long? id, MapReduceInfo body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->UpdateApplication");

            var localVarPath = "/public/analytics/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapReduceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapReduceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapReduceInfo)));
        }

        /// <summary>
        /// Update an Application. Returns the updated Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MapReduceInfo</returns>
        public async System.Threading.Tasks.Task<MapReduceInfo> UpdateApplicationAsync (long? id, MapReduceInfo body = null)
        {
             ApiResponse<MapReduceInfo> localVarResponse = await UpdateApplicationAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an Application. Returns the updated Application.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MapReduceInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MapReduceInfo>> UpdateApplicationAsyncWithHttpInfo (long? id, MapReduceInfo body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->UpdateApplication");

            var localVarPath = "/public/analytics/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplication", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapReduceInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapReduceInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapReduceInfo)));
        }

        /// <summary>
        /// Update a Mapper. Returns the updated Mapper.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>MapperInfo</returns>
        public MapperInfo UpdateMapper (long? id, MapperInfo body = null)
        {
             ApiResponse<MapperInfo> localVarResponse = UpdateMapperWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Mapper. Returns the updated Mapper.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MapperInfo</returns>
        public ApiResponse< MapperInfo > UpdateMapperWithHttpInfo (long? id, MapperInfo body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->UpdateMapper");

            var localVarPath = "/public/analytics/mappers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMapper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapperInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapperInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapperInfo)));
        }

        /// <summary>
        /// Update a Mapper. Returns the updated Mapper.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MapperInfo</returns>
        public async System.Threading.Tasks.Task<MapperInfo> UpdateMapperAsync (long? id, MapperInfo body = null)
        {
             ApiResponse<MapperInfo> localVarResponse = await UpdateMapperAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Mapper. Returns the updated Mapper.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MapperInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MapperInfo>> UpdateMapperAsyncWithHttpInfo (long? id, MapperInfo body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->UpdateMapper");

            var localVarPath = "/public/analytics/mappers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateMapper", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MapperInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MapperInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MapperInfo)));
        }

        /// <summary>
        /// Update a Reducer. Returns the updated reducer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ReducerInfo</returns>
        public ReducerInfo UpdateReducer (long? id, ReducerInfo body = null)
        {
             ApiResponse<ReducerInfo> localVarResponse = UpdateReducerWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Reducer. Returns the updated reducer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of ReducerInfo</returns>
        public ApiResponse< ReducerInfo > UpdateReducerWithHttpInfo (long? id, ReducerInfo body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->UpdateReducer");

            var localVarPath = "/public/analytics/reducers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReducer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReducerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReducerInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReducerInfo)));
        }

        /// <summary>
        /// Update a Reducer. Returns the updated reducer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ReducerInfo</returns>
        public async System.Threading.Tasks.Task<ReducerInfo> UpdateReducerAsync (long? id, ReducerInfo body = null)
        {
             ApiResponse<ReducerInfo> localVarResponse = await UpdateReducerAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Reducer. Returns the updated reducer.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (ReducerInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReducerInfo>> UpdateReducerAsyncWithHttpInfo (long? id, ReducerInfo body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AnalyticsApi->UpdateReducer");

            var localVarPath = "/public/analytics/reducers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateReducer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReducerInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReducerInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReducerInfo)));
        }

        /// <summary>
        /// Upload a jar to pre-specified Yoda internal view. Returns a struct containing the jar name and local mount path where the jar will be uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UploadMRJarViewPathWrapper</returns>
        public UploadMRJarViewPathWrapper UploadJar ()
        {
             ApiResponse<UploadMRJarViewPathWrapper> localVarResponse = UploadJarWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a jar to pre-specified Yoda internal view. Returns a struct containing the jar name and local mount path where the jar will be uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UploadMRJarViewPathWrapper</returns>
        public ApiResponse< UploadMRJarViewPathWrapper > UploadJarWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/uploadJar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadMRJarViewPathWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadMRJarViewPathWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadMRJarViewPathWrapper)));
        }

        /// <summary>
        /// Upload a jar to pre-specified Yoda internal view. Returns a struct containing the jar name and local mount path where the jar will be uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UploadMRJarViewPathWrapper</returns>
        public async System.Threading.Tasks.Task<UploadMRJarViewPathWrapper> UploadJarAsync ()
        {
             ApiResponse<UploadMRJarViewPathWrapper> localVarResponse = await UploadJarAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a jar to pre-specified Yoda internal view. Returns a struct containing the jar name and local mount path where the jar will be uploaded.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UploadMRJarViewPathWrapper)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UploadMRJarViewPathWrapper>> UploadJarAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/analytics/uploadJar";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UploadJar", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UploadMRJarViewPathWrapper>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UploadMRJarViewPathWrapper) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UploadMRJarViewPathWrapper)));
        }

    }
}
