/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchedulerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an email report scheduler job.
        /// </summary>
        /// <remarks>
        /// Returns the created email report scheduler job. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule. This operation may also be used to send a report once (with no schedule), by setting the EnableRecurring field to false.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter</returns>
        SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter CreateSchedulerJob (SchedulerProtoSchedulerJob body);

        /// <summary>
        /// Create an email report scheduler job.
        /// </summary>
        /// <remarks>
        /// Returns the created email report scheduler job. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule. This operation may also be used to send a report once (with no schedule), by setting the EnableRecurring field to false.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter</returns>
        ApiResponse<SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter> CreateSchedulerJobWithHttpInfo (SchedulerProtoSchedulerJob body);
        /// <summary>
        /// Delete one or more email report schedule jobs.
        /// </summary>
        /// <remarks>
        /// Specify a list of email report schedule job ids to unschedule and delete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of ids (optional)</param>
        /// <returns></returns>
        void DeleteSchedulerJobs (List<long?> ids = null);

        /// <summary>
        /// Delete one or more email report schedule jobs.
        /// </summary>
        /// <remarks>
        /// Specify a list of email report schedule job ids to unschedule and delete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of ids (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSchedulerJobsWithHttpInfo (List<long?> ids = null);
        /// <summary>
        /// List the email report schedule jobs that are scheduled to run.
        /// </summary>
        /// <remarks>
        /// Returns all the email report scheduler jobs that are scheduled to run. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SchedulerProto</returns>
        SchedulerProto GetSchedulerJobs ();

        /// <summary>
        /// List the email report schedule jobs that are scheduled to run.
        /// </summary>
        /// <remarks>
        /// Returns all the email report scheduler jobs that are scheduled to run. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SchedulerProto</returns>
        ApiResponse<SchedulerProto> GetSchedulerJobsWithHttpInfo ();
        /// <summary>
        /// Update an existing email report schedule job.
        /// </summary>
        /// <remarks>
        /// Returns the updated email report scheduler job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Job Parameter. (optional)</param>
        /// <returns>SchedulerProtoSchedulerJob</returns>
        SchedulerProtoSchedulerJob UpdateSchedulerJob (SchedulerProtoSchedulerJob body = null);

        /// <summary>
        /// Update an existing email report schedule job.
        /// </summary>
        /// <remarks>
        /// Returns the updated email report scheduler job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Job Parameter. (optional)</param>
        /// <returns>ApiResponse of SchedulerProtoSchedulerJob</returns>
        ApiResponse<SchedulerProtoSchedulerJob> UpdateSchedulerJobWithHttpInfo (SchedulerProtoSchedulerJob body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an email report scheduler job.
        /// </summary>
        /// <remarks>
        /// Returns the created email report scheduler job. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule. This operation may also be used to send a report once (with no schedule), by setting the EnableRecurring field to false.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter</returns>
        System.Threading.Tasks.Task<SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter> CreateSchedulerJobAsync (SchedulerProtoSchedulerJob body);

        /// <summary>
        /// Create an email report scheduler job.
        /// </summary>
        /// <remarks>
        /// Returns the created email report scheduler job. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule. This operation may also be used to send a report once (with no schedule), by setting the EnableRecurring field to false.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter>> CreateSchedulerJobAsyncWithHttpInfo (SchedulerProtoSchedulerJob body);
        /// <summary>
        /// Delete one or more email report schedule jobs.
        /// </summary>
        /// <remarks>
        /// Specify a list of email report schedule job ids to unschedule and delete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of ids (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSchedulerJobsAsync (List<long?> ids = null);

        /// <summary>
        /// Delete one or more email report schedule jobs.
        /// </summary>
        /// <remarks>
        /// Specify a list of email report schedule job ids to unschedule and delete.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of ids (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSchedulerJobsAsyncWithHttpInfo (List<long?> ids = null);
        /// <summary>
        /// List the email report schedule jobs that are scheduled to run.
        /// </summary>
        /// <remarks>
        /// Returns all the email report scheduler jobs that are scheduled to run. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SchedulerProto</returns>
        System.Threading.Tasks.Task<SchedulerProto> GetSchedulerJobsAsync ();

        /// <summary>
        /// List the email report schedule jobs that are scheduled to run.
        /// </summary>
        /// <remarks>
        /// Returns all the email report scheduler jobs that are scheduled to run. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SchedulerProto)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchedulerProto>> GetSchedulerJobsAsyncWithHttpInfo ();
        /// <summary>
        /// Update an existing email report schedule job.
        /// </summary>
        /// <remarks>
        /// Returns the updated email report scheduler job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Job Parameter. (optional)</param>
        /// <returns>Task of SchedulerProtoSchedulerJob</returns>
        System.Threading.Tasks.Task<SchedulerProtoSchedulerJob> UpdateSchedulerJobAsync (SchedulerProtoSchedulerJob body = null);

        /// <summary>
        /// Update an existing email report schedule job.
        /// </summary>
        /// <remarks>
        /// Returns the updated email report scheduler job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Job Parameter. (optional)</param>
        /// <returns>Task of ApiResponse (SchedulerProtoSchedulerJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchedulerProtoSchedulerJob>> UpdateSchedulerJobAsyncWithHttpInfo (SchedulerProtoSchedulerJob body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchedulerApi : ISchedulerApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchedulerApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchedulerApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an email report scheduler job. Returns the created email report scheduler job. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule. This operation may also be used to send a report once (with no schedule), by setting the EnableRecurring field to false.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter</returns>
        public SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter CreateSchedulerJob (SchedulerProtoSchedulerJob body)
        {
             ApiResponse<SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter> localVarResponse = CreateSchedulerJobWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an email report scheduler job. Returns the created email report scheduler job. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule. This operation may also be used to send a report once (with no schedule), by setting the EnableRecurring field to false.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter</returns>
        public ApiResponse< SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter > CreateSchedulerJobWithHttpInfo (SchedulerProtoSchedulerJob body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchedulerApi->CreateSchedulerJob");

            var localVarPath = "/public/scheduler";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSchedulerJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter)));
        }

        /// <summary>
        /// Create an email report scheduler job. Returns the created email report scheduler job. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule. This operation may also be used to send a report once (with no schedule), by setting the EnableRecurring field to false.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter</returns>
        public async System.Threading.Tasks.Task<SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter> CreateSchedulerJobAsync (SchedulerProtoSchedulerJob body)
        {
             ApiResponse<SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter> localVarResponse = await CreateSchedulerJobAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an email report scheduler job. Returns the created email report scheduler job. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule. This operation may also be used to send a report once (with no schedule), by setting the EnableRecurring field to false.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter>> CreateSchedulerJobAsyncWithHttpInfo (SchedulerProtoSchedulerJob body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchedulerApi->CreateSchedulerJob");

            var localVarPath = "/public/scheduler";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSchedulerJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameter)));
        }

        /// <summary>
        /// Delete one or more email report schedule jobs. Specify a list of email report schedule job ids to unschedule and delete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of ids (optional)</param>
        /// <returns></returns>
        public void DeleteSchedulerJobs (List<long?> ids = null)
        {
             DeleteSchedulerJobsWithHttpInfo(ids);
        }

        /// <summary>
        /// Delete one or more email report schedule jobs. Specify a list of email report schedule job ids to unschedule and delete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of ids (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSchedulerJobsWithHttpInfo (List<long?> ids = null)
        {

            var localVarPath = "/public/scheduler";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSchedulerJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete one or more email report schedule jobs. Specify a list of email report schedule job ids to unschedule and delete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of ids (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSchedulerJobsAsync (List<long?> ids = null)
        {
             await DeleteSchedulerJobsAsyncWithHttpInfo(ids);

        }

        /// <summary>
        /// Delete one or more email report schedule jobs. Specify a list of email report schedule job ids to unschedule and delete.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of ids (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSchedulerJobsAsyncWithHttpInfo (List<long?> ids = null)
        {

            var localVarPath = "/public/scheduler";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null && ids.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(ids); // http body (model) parameter
            }
            else
            {
                localVarPostBody = ids; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSchedulerJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List the email report schedule jobs that are scheduled to run. Returns all the email report scheduler jobs that are scheduled to run. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>SchedulerProto</returns>
        public SchedulerProto GetSchedulerJobs ()
        {
             ApiResponse<SchedulerProto> localVarResponse = GetSchedulerJobsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the email report schedule jobs that are scheduled to run. Returns all the email report scheduler jobs that are scheduled to run. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SchedulerProto</returns>
        public ApiResponse< SchedulerProto > GetSchedulerJobsWithHttpInfo ()
        {

            var localVarPath = "/public/scheduler";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchedulerJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchedulerProto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchedulerProto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchedulerProto)));
        }

        /// <summary>
        /// List the email report schedule jobs that are scheduled to run. Returns all the email report scheduler jobs that are scheduled to run. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SchedulerProto</returns>
        public async System.Threading.Tasks.Task<SchedulerProto> GetSchedulerJobsAsync ()
        {
             ApiResponse<SchedulerProto> localVarResponse = await GetSchedulerJobsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the email report schedule jobs that are scheduled to run. Returns all the email report scheduler jobs that are scheduled to run. An email report scheduler job generates a report with the specified parameters and sends that report to the specified email accounts according to the defined schedule.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SchedulerProto)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchedulerProto>> GetSchedulerJobsAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/scheduler";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSchedulerJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchedulerProto>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchedulerProto) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchedulerProto)));
        }

        /// <summary>
        /// Update an existing email report schedule job. Returns the updated email report scheduler job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Job Parameter. (optional)</param>
        /// <returns>SchedulerProtoSchedulerJob</returns>
        public SchedulerProtoSchedulerJob UpdateSchedulerJob (SchedulerProtoSchedulerJob body = null)
        {
             ApiResponse<SchedulerProtoSchedulerJob> localVarResponse = UpdateSchedulerJobWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing email report schedule job. Returns the updated email report scheduler job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Job Parameter. (optional)</param>
        /// <returns>ApiResponse of SchedulerProtoSchedulerJob</returns>
        public ApiResponse< SchedulerProtoSchedulerJob > UpdateSchedulerJobWithHttpInfo (SchedulerProtoSchedulerJob body = null)
        {

            var localVarPath = "/public/scheduler";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSchedulerJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchedulerProtoSchedulerJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchedulerProtoSchedulerJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchedulerProtoSchedulerJob)));
        }

        /// <summary>
        /// Update an existing email report schedule job. Returns the updated email report scheduler job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Job Parameter. (optional)</param>
        /// <returns>Task of SchedulerProtoSchedulerJob</returns>
        public async System.Threading.Tasks.Task<SchedulerProtoSchedulerJob> UpdateSchedulerJobAsync (SchedulerProtoSchedulerJob body = null)
        {
             ApiResponse<SchedulerProtoSchedulerJob> localVarResponse = await UpdateSchedulerJobAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing email report schedule job. Returns the updated email report scheduler job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Job Parameter. (optional)</param>
        /// <returns>Task of ApiResponse (SchedulerProtoSchedulerJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchedulerProtoSchedulerJob>> UpdateSchedulerJobAsyncWithHttpInfo (SchedulerProtoSchedulerJob body = null)
        {

            var localVarPath = "/public/scheduler";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateSchedulerJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchedulerProtoSchedulerJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchedulerProtoSchedulerJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchedulerProtoSchedulerJob)));
        }

    }
}
