/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClusterPartitionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List details about a single Cluster Partition.
        /// </summary>
        /// <remarks>
        /// Returns the Cluster Partition corresponding to the specified Cluster Partition Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Cluster Partition to return.</param>
        /// <returns>ClusterPartition</returns>
        ClusterPartition GetClusterPartitionById (long? id);

        /// <summary>
        /// List details about a single Cluster Partition.
        /// </summary>
        /// <remarks>
        /// Returns the Cluster Partition corresponding to the specified Cluster Partition Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Cluster Partition to return.</param>
        /// <returns>ApiResponse of ClusterPartition</returns>
        ApiResponse<ClusterPartition> GetClusterPartitionByIdWithHttpInfo (long? id);
        /// <summary>
        /// List Cluster Partitions filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Cluster Partitions currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of Cluster Partition Ids.  Filter by a list of Cluster Partition ids. If empty, the Cluster Partitions are not filtered by id. (optional)</param>
        /// <param name="names">Array of Cluster Partition Names.  Filter by a list of Cluster Partition Names. If empty, the Cluster Partitions are not filtered by names. (optional)</param>
        /// <returns>List&lt;ClusterPartition&gt;</returns>
        List<ClusterPartition> GetClusterPartitions (List<long?> ids = null, List<string> names = null);

        /// <summary>
        /// List Cluster Partitions filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Cluster Partitions currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of Cluster Partition Ids.  Filter by a list of Cluster Partition ids. If empty, the Cluster Partitions are not filtered by id. (optional)</param>
        /// <param name="names">Array of Cluster Partition Names.  Filter by a list of Cluster Partition Names. If empty, the Cluster Partitions are not filtered by names. (optional)</param>
        /// <returns>ApiResponse of List&lt;ClusterPartition&gt;</returns>
        ApiResponse<List<ClusterPartition>> GetClusterPartitionsWithHttpInfo (List<long?> ids = null, List<string> names = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List details about a single Cluster Partition.
        /// </summary>
        /// <remarks>
        /// Returns the Cluster Partition corresponding to the specified Cluster Partition Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Cluster Partition to return.</param>
        /// <returns>Task of ClusterPartition</returns>
        System.Threading.Tasks.Task<ClusterPartition> GetClusterPartitionByIdAsync (long? id);

        /// <summary>
        /// List details about a single Cluster Partition.
        /// </summary>
        /// <remarks>
        /// Returns the Cluster Partition corresponding to the specified Cluster Partition Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Cluster Partition to return.</param>
        /// <returns>Task of ApiResponse (ClusterPartition)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClusterPartition>> GetClusterPartitionByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List Cluster Partitions filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Cluster Partitions currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of Cluster Partition Ids.  Filter by a list of Cluster Partition ids. If empty, the Cluster Partitions are not filtered by id. (optional)</param>
        /// <param name="names">Array of Cluster Partition Names.  Filter by a list of Cluster Partition Names. If empty, the Cluster Partitions are not filtered by names. (optional)</param>
        /// <returns>Task of List&lt;ClusterPartition&gt;</returns>
        System.Threading.Tasks.Task<List<ClusterPartition>> GetClusterPartitionsAsync (List<long?> ids = null, List<string> names = null);

        /// <summary>
        /// List Cluster Partitions filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Cluster Partitions currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of Cluster Partition Ids.  Filter by a list of Cluster Partition ids. If empty, the Cluster Partitions are not filtered by id. (optional)</param>
        /// <param name="names">Array of Cluster Partition Names.  Filter by a list of Cluster Partition Names. If empty, the Cluster Partitions are not filtered by names. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ClusterPartition&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClusterPartition>>> GetClusterPartitionsAsyncWithHttpInfo (List<long?> ids = null, List<string> names = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClusterPartitionsApi : IClusterPartitionsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterPartitionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClusterPartitionsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterPartitionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClusterPartitionsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List details about a single Cluster Partition. Returns the Cluster Partition corresponding to the specified Cluster Partition Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Cluster Partition to return.</param>
        /// <returns>ClusterPartition</returns>
        public ClusterPartition GetClusterPartitionById (long? id)
        {
             ApiResponse<ClusterPartition> localVarResponse = GetClusterPartitionByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single Cluster Partition. Returns the Cluster Partition corresponding to the specified Cluster Partition Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Cluster Partition to return.</param>
        /// <returns>ApiResponse of ClusterPartition</returns>
        public ApiResponse< ClusterPartition > GetClusterPartitionByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClusterPartitionsApi->GetClusterPartitionById");

            var localVarPath = "/public/clusterPartitions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClusterPartitionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusterPartition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClusterPartition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusterPartition)));
        }

        /// <summary>
        /// List details about a single Cluster Partition. Returns the Cluster Partition corresponding to the specified Cluster Partition Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Cluster Partition to return.</param>
        /// <returns>Task of ClusterPartition</returns>
        public async System.Threading.Tasks.Task<ClusterPartition> GetClusterPartitionByIdAsync (long? id)
        {
             ApiResponse<ClusterPartition> localVarResponse = await GetClusterPartitionByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single Cluster Partition. Returns the Cluster Partition corresponding to the specified Cluster Partition Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Cluster Partition to return.</param>
        /// <returns>Task of ApiResponse (ClusterPartition)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClusterPartition>> GetClusterPartitionByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClusterPartitionsApi->GetClusterPartitionById");

            var localVarPath = "/public/clusterPartitions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClusterPartitionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusterPartition>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClusterPartition) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusterPartition)));
        }

        /// <summary>
        /// List Cluster Partitions filtered by the specified parameters. If no parameters are specified, all Cluster Partitions currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of Cluster Partition Ids.  Filter by a list of Cluster Partition ids. If empty, the Cluster Partitions are not filtered by id. (optional)</param>
        /// <param name="names">Array of Cluster Partition Names.  Filter by a list of Cluster Partition Names. If empty, the Cluster Partitions are not filtered by names. (optional)</param>
        /// <returns>List&lt;ClusterPartition&gt;</returns>
        public List<ClusterPartition> GetClusterPartitions (List<long?> ids = null, List<string> names = null)
        {
             ApiResponse<List<ClusterPartition>> localVarResponse = GetClusterPartitionsWithHttpInfo(ids, names);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Cluster Partitions filtered by the specified parameters. If no parameters are specified, all Cluster Partitions currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of Cluster Partition Ids.  Filter by a list of Cluster Partition ids. If empty, the Cluster Partitions are not filtered by id. (optional)</param>
        /// <param name="names">Array of Cluster Partition Names.  Filter by a list of Cluster Partition Names. If empty, the Cluster Partitions are not filtered by names. (optional)</param>
        /// <returns>ApiResponse of List&lt;ClusterPartition&gt;</returns>
        public ApiResponse< List<ClusterPartition> > GetClusterPartitionsWithHttpInfo (List<long?> ids = null, List<string> names = null)
        {

            var localVarPath = "/public/clusterPartitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "names", names)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClusterPartitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ClusterPartition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ClusterPartition>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ClusterPartition>)));
        }

        /// <summary>
        /// List Cluster Partitions filtered by the specified parameters. If no parameters are specified, all Cluster Partitions currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of Cluster Partition Ids.  Filter by a list of Cluster Partition ids. If empty, the Cluster Partitions are not filtered by id. (optional)</param>
        /// <param name="names">Array of Cluster Partition Names.  Filter by a list of Cluster Partition Names. If empty, the Cluster Partitions are not filtered by names. (optional)</param>
        /// <returns>Task of List&lt;ClusterPartition&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClusterPartition>> GetClusterPartitionsAsync (List<long?> ids = null, List<string> names = null)
        {
             ApiResponse<List<ClusterPartition>> localVarResponse = await GetClusterPartitionsAsyncWithHttpInfo(ids, names);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Cluster Partitions filtered by the specified parameters. If no parameters are specified, all Cluster Partitions currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Array of Cluster Partition Ids.  Filter by a list of Cluster Partition ids. If empty, the Cluster Partitions are not filtered by id. (optional)</param>
        /// <param name="names">Array of Cluster Partition Names.  Filter by a list of Cluster Partition Names. If empty, the Cluster Partitions are not filtered by names. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ClusterPartition&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ClusterPartition>>> GetClusterPartitionsAsyncWithHttpInfo (List<long?> ids = null, List<string> names = null)
        {

            var localVarPath = "/public/clusterPartitions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "names", names)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClusterPartitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ClusterPartition>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ClusterPartition>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ClusterPartition>)));
        }

    }
}
