/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRestoreTasksApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a recover or clone task with specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns></returns>
        void CancelRestoreTask (long? id);

        /// <summary>
        /// Cancel a recover or clone task with specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelRestoreTaskWithHttpInfo (long? id);
        /// <summary>
        /// Create a Restore Task for cloning Applications like SQL Databases.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning Applications like SQL DB.</param>
        /// <returns>RestoreTask</returns>
        RestoreTask CreateApplicationsCloneTask (ApplicationsRestoreTaskRequest body);

        /// <summary>
        /// Create a Restore Task for cloning Applications like SQL Databases.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning Applications like SQL DB.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        ApiResponse<RestoreTask> CreateApplicationsCloneTaskWithHttpInfo (ApplicationsRestoreTaskRequest body);
        /// <summary>
        /// Create a Restore Task for recovering Applications like SQL Databases.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering Applications like SQL DB. volumes to mount points.</param>
        /// <returns>RestoreTask</returns>
        RestoreTask CreateApplicationsRecoverTask (ApplicationsRestoreTaskRequest body);

        /// <summary>
        /// Create a Restore Task for recovering Applications like SQL Databases.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering Applications like SQL DB. volumes to mount points.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        ApiResponse<RestoreTask> CreateApplicationsRecoverTaskWithHttpInfo (ApplicationsRestoreTaskRequest body);
        /// <summary>
        /// Create a Restore Task for cloning VMs or a View.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task that clones VMs or a View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning VMs or a View.</param>
        /// <returns>RestoreTask</returns>
        RestoreTask CreateCloneTask (CloneTaskRequest body);

        /// <summary>
        /// Create a Restore Task for cloning VMs or a View.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task that clones VMs or a View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning VMs or a View.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        ApiResponse<RestoreTask> CreateCloneTaskWithHttpInfo (CloneTaskRequest body);
        /// <summary>
        /// Create a Restore Task for recovering VMs or instantly mounting volumes.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task. This operation returns the following types of Restore Tasks: 1) A Restore Task that recovers VMs back to the original location or a new location. 2) A Restore Task that mounts the volumes of a Server (such as a VM or Physical Server) onto the specified target system. The Snapshots of the Server that contains the volumes that are mounted is determined by Array of Objects. The content of the Server is available from the mount point for the Granular Level Recovery (GLR) of application data. For example recovering Microsoft Exchange data using Kroll Ontrack® PowerControls™.  NOTE: Volumes are mounted \&quot;instantly\&quot; if the Snapshot is stored locally on the Cohesity Cluster. If the Snapshot is archival target, it will take longer because it must be retrieved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering VMs or mounting volumes to mount points.</param>
        /// <returns>RestoreTask</returns>
        RestoreTask CreateRecoverTask (RecoverTaskRequest body);

        /// <summary>
        /// Create a Restore Task for recovering VMs or instantly mounting volumes.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task. This operation returns the following types of Restore Tasks: 1) A Restore Task that recovers VMs back to the original location or a new location. 2) A Restore Task that mounts the volumes of a Server (such as a VM or Physical Server) onto the specified target system. The Snapshots of the Server that contains the volumes that are mounted is determined by Array of Objects. The content of the Server is available from the mount point for the Granular Level Recovery (GLR) of application data. For example recovering Microsoft Exchange data using Kroll Ontrack® PowerControls™.  NOTE: Volumes are mounted \&quot;instantly\&quot; if the Snapshot is stored locally on the Cohesity Cluster. If the Snapshot is archival target, it will take longer because it must be retrieved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering VMs or mounting volumes to mount points.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        ApiResponse<RestoreTask> CreateRecoverTaskWithHttpInfo (RecoverTaskRequest body);
        /// <summary>
        /// Create a Restore Task for recovering files and folders.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task that recovers files and folders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering files or folders.</param>
        /// <returns>RestoreTask</returns>
        RestoreTask CreateRestoreFilesTask (RestoreFilesTaskRequest body);

        /// <summary>
        /// Create a Restore Task for recovering files and folders.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task that recovers files and folders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering files or folders.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        ApiResponse<RestoreTask> CreateRestoreFilesTaskWithHttpInfo (RestoreFilesTaskRequest body);
        /// <summary>
        /// Get the information about snapshots that contain the specified file or folder. In addition, information about the file or folder is provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Specifies the id of the Job that captured the snapshots. These snapshots are searched for the specified files or folders. This field is required.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. This field is required.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. This field is required.</param>
        /// <param name="sourceId">Specifies the id of the Protection Source object (such as a VM) to search. When a Job Run executes, snapshots of the specified Protection Source object are captured. This operation searches the snapshots of the object for the file or folder. This field is required.</param>
        /// <param name="filename">Specifies the name of the file or folder to find in the snapshots. This field is required.</param>
        /// <returns>List&lt;FileSnapshotInformation&gt;</returns>
        List<FileSnapshotInformation> GetFileSnapshotsInformation (long? jobId, long? clusterId, long? clusterIncarnationId, long? sourceId, string filename);

        /// <summary>
        /// Get the information about snapshots that contain the specified file or folder. In addition, information about the file or folder is provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Specifies the id of the Job that captured the snapshots. These snapshots are searched for the specified files or folders. This field is required.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. This field is required.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. This field is required.</param>
        /// <param name="sourceId">Specifies the id of the Protection Source object (such as a VM) to search. When a Job Run executes, snapshots of the specified Protection Source object are captured. This operation searches the snapshots of the object for the file or folder. This field is required.</param>
        /// <param name="filename">Specifies the name of the file or folder to find in the snapshots. This field is required.</param>
        /// <returns>ApiResponse of List&lt;FileSnapshotInformation&gt;</returns>
        ApiResponse<List<FileSnapshotInformation>> GetFileSnapshotsInformationWithHttpInfo (long? jobId, long? clusterId, long? clusterIncarnationId, long? sourceId, string filename);
        /// <summary>
        /// List details about a single Restore Task.
        /// </summary>
        /// <remarks>
        /// Returns the Restore Task corresponding to the specified Restore Task id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>RestoreTask</returns>
        RestoreTask GetRestoreTaskById (long? id);

        /// <summary>
        /// List details about a single Restore Task.
        /// </summary>
        /// <remarks>
        /// Returns the Restore Task corresponding to the specified Restore Task id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        ApiResponse<RestoreTask> GetRestoreTaskByIdWithHttpInfo (long? id);
        /// <summary>
        /// List the Restore Tasks filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Restore Tasks found on the Cohesity Cluster are returned. Both running and completed Restore Tasks are reported. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">Filter by a list of Restore Task ids. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the start time is creation time of the Cohesity Cluster. (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the end time is the current time. (optional)</param>
        /// <param name="pageCount">Specifies the number of completed Restore Tasks to return in the response for pagination purposes. Running Restore Tasks are always returned. The newest completed Restore Tasks are returned. (optional)</param>
        /// <param name="taskTypes">Filter by the types of Restore Tasks such as &#39;kRecoverVMs&#39;, &#39;kCloneVMs&#39;, &#39;kCloneView&#39; or &#39;kMountVolumes&#39;. (optional)</param>
        /// <returns>List&lt;RestoreTask&gt;</returns>
        List<RestoreTask> GetRestoreTasks (List<long?> taskIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null, List<string> taskTypes = null);

        /// <summary>
        /// List the Restore Tasks filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Restore Tasks found on the Cohesity Cluster are returned. Both running and completed Restore Tasks are reported. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">Filter by a list of Restore Task ids. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the start time is creation time of the Cohesity Cluster. (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the end time is the current time. (optional)</param>
        /// <param name="pageCount">Specifies the number of completed Restore Tasks to return in the response for pagination purposes. Running Restore Tasks are always returned. The newest completed Restore Tasks are returned. (optional)</param>
        /// <param name="taskTypes">Filter by the types of Restore Tasks such as &#39;kRecoverVMs&#39;, &#39;kCloneVMs&#39;, &#39;kCloneView&#39; or &#39;kMountVolumes&#39;. (optional)</param>
        /// <returns>ApiResponse of List&lt;RestoreTask&gt;</returns>
        ApiResponse<List<RestoreTask>> GetRestoreTasksWithHttpInfo (List<long?> taskIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null, List<string> taskTypes = null);
        /// <summary>
        /// Get information about the logical volumes found in a VM.
        /// </summary>
        /// <remarks>
        /// All fields must be specified for this operation. To get values for these fields, invoke the GET /public/restore/objects operation. A specific Job Run is defined by the jobRunId, startedTimeUsecs, and attemptNumber fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attemptNumber">Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3. (optional)</param>
        /// <param name="sourceId">Specifies the id of the VM object to search for volumes. (optional)</param>
        /// <param name="supportedVolumesOnly">Specifies to return only supported volumes information. Unsupported volumes are not returned if this flag is set to true. Default is false. (optional)</param>
        /// <param name="jobId">Specifies the Job id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job. (optional)</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. (optional)</param>
        /// <param name="startedTimeUsecs">Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="originalJobId">Specifies the id for the Protection Job that originally captured the snapshots of the original object. If the object was backed up on a Primary Cluster replicated to this Cohesity Cluster, and a new Inactive Job is created, this field still contains the id of the original Job and NOT the id of the new Inactive Job. This field is used in combination with the clusterId and clusterIncarnationId to uniquely identify a Job. (optional)</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. (optional)</param>
        /// <param name="jobRunId">Specifies the id of the Job Run that captured the snapshot. (optional)</param>
        /// <returns>List&lt;VmVolumesInformation&gt;</returns>
        List<VmVolumesInformation> GetVmVolumesInformation (long? attemptNumber = null, long? sourceId = null, bool? supportedVolumesOnly = null, long? jobId = null, long? clusterIncarnationId = null, long? startedTimeUsecs = null, long? originalJobId = null, long? clusterId = null, long? jobRunId = null);

        /// <summary>
        /// Get information about the logical volumes found in a VM.
        /// </summary>
        /// <remarks>
        /// All fields must be specified for this operation. To get values for these fields, invoke the GET /public/restore/objects operation. A specific Job Run is defined by the jobRunId, startedTimeUsecs, and attemptNumber fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attemptNumber">Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3. (optional)</param>
        /// <param name="sourceId">Specifies the id of the VM object to search for volumes. (optional)</param>
        /// <param name="supportedVolumesOnly">Specifies to return only supported volumes information. Unsupported volumes are not returned if this flag is set to true. Default is false. (optional)</param>
        /// <param name="jobId">Specifies the Job id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job. (optional)</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. (optional)</param>
        /// <param name="startedTimeUsecs">Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="originalJobId">Specifies the id for the Protection Job that originally captured the snapshots of the original object. If the object was backed up on a Primary Cluster replicated to this Cohesity Cluster, and a new Inactive Job is created, this field still contains the id of the original Job and NOT the id of the new Inactive Job. This field is used in combination with the clusterId and clusterIncarnationId to uniquely identify a Job. (optional)</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. (optional)</param>
        /// <param name="jobRunId">Specifies the id of the Job Run that captured the snapshot. (optional)</param>
        /// <returns>ApiResponse of List&lt;VmVolumesInformation&gt;</returns>
        ApiResponse<List<VmVolumesInformation>> GetVmVolumesInformationWithHttpInfo (long? attemptNumber = null, long? sourceId = null, bool? supportedVolumesOnly = null, long? jobId = null, long? clusterIncarnationId = null, long? startedTimeUsecs = null, long? originalJobId = null, long? clusterId = null, long? jobRunId = null);
        /// <summary>
        /// Find backup objects that match the specified search and filter criteria on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// If no search pattern or filter parameters are specified, all backup objects currently found on the Cohesity Cluster are returned. Only leaf objects that have been protected by a Job are returned such as VMs, Views and databases. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to leaf backup objects such as VMs, Views and databases.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="operatingSystems">Filter by the Operating Systems running on VMs and Physical Servers. This filter is applicable only to VMs and physical servers. (optional)</param>
        /// <param name="application">Filter by application when the environment type is kSQL. For example, if SQL is specified the SQL databases are returned. (optional)</param>
        /// <param name="ownerEntityId">Filter objects by the Entity id of the owner VM. For example, if a ownerEntityId is provided while searching for SQL databases, only SQL databases belonging to the VM with the specified id are returned. ownerEntityId is only significant if application is set to SQL. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <returns>ObjectSearchResults</returns>
        ObjectSearchResults SearchObjects (List<long?> jobIds = null, List<long?> viewBoxIds = null, List<string> environments = null, long? startIndex = null, List<string> operatingSystems = null, string application = null, long? ownerEntityId = null, string search = null, List<long?> registeredSourceIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null);

        /// <summary>
        /// Find backup objects that match the specified search and filter criteria on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// If no search pattern or filter parameters are specified, all backup objects currently found on the Cohesity Cluster are returned. Only leaf objects that have been protected by a Job are returned such as VMs, Views and databases. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to leaf backup objects such as VMs, Views and databases.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="operatingSystems">Filter by the Operating Systems running on VMs and Physical Servers. This filter is applicable only to VMs and physical servers. (optional)</param>
        /// <param name="application">Filter by application when the environment type is kSQL. For example, if SQL is specified the SQL databases are returned. (optional)</param>
        /// <param name="ownerEntityId">Filter objects by the Entity id of the owner VM. For example, if a ownerEntityId is provided while searching for SQL databases, only SQL databases belonging to the VM with the specified id are returned. ownerEntityId is only significant if application is set to SQL. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <returns>ApiResponse of ObjectSearchResults</returns>
        ApiResponse<ObjectSearchResults> SearchObjectsWithHttpInfo (List<long?> jobIds = null, List<long?> viewBoxIds = null, List<string> environments = null, long? startIndex = null, List<string> operatingSystems = null, string application = null, long? ownerEntityId = null, string search = null, List<long?> registeredSourceIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null);
        /// <summary>
        /// Search for files and folders to recover that match the specified search and filter criteria on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Use the files and folders returned by this operation to populate the list of files and folders to recover in the POST /public/restore/files operation. If no search pattern or filter parameters are specified, all files and folders currently found on the Cohesity Cluster are returned. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to files and folders that are found in the source objects (such as VMs).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="sourceIds">Filter by source ids. Only files and folders found in the listed sources (such as VMs) are returned. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <param name="folderOnly">Filter by folders or files. If true, only folders are returned. If false, only files are returned. If not specified, both files and folders are returned. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; or &#39;kGenericNas&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>FileSearchResults</returns>
        FileSearchResults SearchRestoredFiles (long? startTimeUsecs = null, long? endTimeUsecs = null, List<long?> sourceIds = null, long? startIndex = null, long? pageCount = null, bool? folderOnly = null, string search = null, List<long?> jobIds = null, List<long?> registeredSourceIds = null, List<long?> viewBoxIds = null, List<string> environments = null);

        /// <summary>
        /// Search for files and folders to recover that match the specified search and filter criteria on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Use the files and folders returned by this operation to populate the list of files and folders to recover in the POST /public/restore/files operation. If no search pattern or filter parameters are specified, all files and folders currently found on the Cohesity Cluster are returned. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to files and folders that are found in the source objects (such as VMs).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="sourceIds">Filter by source ids. Only files and folders found in the listed sources (such as VMs) are returned. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <param name="folderOnly">Filter by folders or files. If true, only folders are returned. If false, only files are returned. If not specified, both files and folders are returned. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; or &#39;kGenericNas&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>ApiResponse of FileSearchResults</returns>
        ApiResponse<FileSearchResults> SearchRestoredFilesWithHttpInfo (long? startTimeUsecs = null, long? endTimeUsecs = null, List<long?> sourceIds = null, long? startIndex = null, long? pageCount = null, bool? folderOnly = null, string search = null, List<long?> jobIds = null, List<long?> registeredSourceIds = null, List<long?> viewBoxIds = null, List<string> environments = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a recover or clone task with specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelRestoreTaskAsync (long? id);

        /// <summary>
        /// Cancel a recover or clone task with specified id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelRestoreTaskAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Create a Restore Task for cloning Applications like SQL Databases.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning Applications like SQL DB.</param>
        /// <returns>Task of RestoreTask</returns>
        System.Threading.Tasks.Task<RestoreTask> CreateApplicationsCloneTaskAsync (ApplicationsRestoreTaskRequest body);

        /// <summary>
        /// Create a Restore Task for cloning Applications like SQL Databases.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning Applications like SQL DB.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestoreTask>> CreateApplicationsCloneTaskAsyncWithHttpInfo (ApplicationsRestoreTaskRequest body);
        /// <summary>
        /// Create a Restore Task for recovering Applications like SQL Databases.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering Applications like SQL DB. volumes to mount points.</param>
        /// <returns>Task of RestoreTask</returns>
        System.Threading.Tasks.Task<RestoreTask> CreateApplicationsRecoverTaskAsync (ApplicationsRestoreTaskRequest body);

        /// <summary>
        /// Create a Restore Task for recovering Applications like SQL Databases.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering Applications like SQL DB. volumes to mount points.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestoreTask>> CreateApplicationsRecoverTaskAsyncWithHttpInfo (ApplicationsRestoreTaskRequest body);
        /// <summary>
        /// Create a Restore Task for cloning VMs or a View.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task that clones VMs or a View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning VMs or a View.</param>
        /// <returns>Task of RestoreTask</returns>
        System.Threading.Tasks.Task<RestoreTask> CreateCloneTaskAsync (CloneTaskRequest body);

        /// <summary>
        /// Create a Restore Task for cloning VMs or a View.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task that clones VMs or a View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning VMs or a View.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestoreTask>> CreateCloneTaskAsyncWithHttpInfo (CloneTaskRequest body);
        /// <summary>
        /// Create a Restore Task for recovering VMs or instantly mounting volumes.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task. This operation returns the following types of Restore Tasks: 1) A Restore Task that recovers VMs back to the original location or a new location. 2) A Restore Task that mounts the volumes of a Server (such as a VM or Physical Server) onto the specified target system. The Snapshots of the Server that contains the volumes that are mounted is determined by Array of Objects. The content of the Server is available from the mount point for the Granular Level Recovery (GLR) of application data. For example recovering Microsoft Exchange data using Kroll Ontrack® PowerControls™.  NOTE: Volumes are mounted \&quot;instantly\&quot; if the Snapshot is stored locally on the Cohesity Cluster. If the Snapshot is archival target, it will take longer because it must be retrieved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering VMs or mounting volumes to mount points.</param>
        /// <returns>Task of RestoreTask</returns>
        System.Threading.Tasks.Task<RestoreTask> CreateRecoverTaskAsync (RecoverTaskRequest body);

        /// <summary>
        /// Create a Restore Task for recovering VMs or instantly mounting volumes.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task. This operation returns the following types of Restore Tasks: 1) A Restore Task that recovers VMs back to the original location or a new location. 2) A Restore Task that mounts the volumes of a Server (such as a VM or Physical Server) onto the specified target system. The Snapshots of the Server that contains the volumes that are mounted is determined by Array of Objects. The content of the Server is available from the mount point for the Granular Level Recovery (GLR) of application data. For example recovering Microsoft Exchange data using Kroll Ontrack® PowerControls™.  NOTE: Volumes are mounted \&quot;instantly\&quot; if the Snapshot is stored locally on the Cohesity Cluster. If the Snapshot is archival target, it will take longer because it must be retrieved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering VMs or mounting volumes to mount points.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestoreTask>> CreateRecoverTaskAsyncWithHttpInfo (RecoverTaskRequest body);
        /// <summary>
        /// Create a Restore Task for recovering files and folders.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task that recovers files and folders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering files or folders.</param>
        /// <returns>Task of RestoreTask</returns>
        System.Threading.Tasks.Task<RestoreTask> CreateRestoreFilesTaskAsync (RestoreFilesTaskRequest body);

        /// <summary>
        /// Create a Restore Task for recovering files and folders.
        /// </summary>
        /// <remarks>
        /// Returns the created Restore Task that recovers files and folders.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering files or folders.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestoreTask>> CreateRestoreFilesTaskAsyncWithHttpInfo (RestoreFilesTaskRequest body);
        /// <summary>
        /// Get the information about snapshots that contain the specified file or folder. In addition, information about the file or folder is provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Specifies the id of the Job that captured the snapshots. These snapshots are searched for the specified files or folders. This field is required.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. This field is required.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. This field is required.</param>
        /// <param name="sourceId">Specifies the id of the Protection Source object (such as a VM) to search. When a Job Run executes, snapshots of the specified Protection Source object are captured. This operation searches the snapshots of the object for the file or folder. This field is required.</param>
        /// <param name="filename">Specifies the name of the file or folder to find in the snapshots. This field is required.</param>
        /// <returns>Task of List&lt;FileSnapshotInformation&gt;</returns>
        System.Threading.Tasks.Task<List<FileSnapshotInformation>> GetFileSnapshotsInformationAsync (long? jobId, long? clusterId, long? clusterIncarnationId, long? sourceId, string filename);

        /// <summary>
        /// Get the information about snapshots that contain the specified file or folder. In addition, information about the file or folder is provided.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Specifies the id of the Job that captured the snapshots. These snapshots are searched for the specified files or folders. This field is required.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. This field is required.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. This field is required.</param>
        /// <param name="sourceId">Specifies the id of the Protection Source object (such as a VM) to search. When a Job Run executes, snapshots of the specified Protection Source object are captured. This operation searches the snapshots of the object for the file or folder. This field is required.</param>
        /// <param name="filename">Specifies the name of the file or folder to find in the snapshots. This field is required.</param>
        /// <returns>Task of ApiResponse (List&lt;FileSnapshotInformation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FileSnapshotInformation>>> GetFileSnapshotsInformationAsyncWithHttpInfo (long? jobId, long? clusterId, long? clusterIncarnationId, long? sourceId, string filename);
        /// <summary>
        /// List details about a single Restore Task.
        /// </summary>
        /// <remarks>
        /// Returns the Restore Task corresponding to the specified Restore Task id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>Task of RestoreTask</returns>
        System.Threading.Tasks.Task<RestoreTask> GetRestoreTaskByIdAsync (long? id);

        /// <summary>
        /// List details about a single Restore Task.
        /// </summary>
        /// <remarks>
        /// Returns the Restore Task corresponding to the specified Restore Task id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestoreTask>> GetRestoreTaskByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List the Restore Tasks filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Restore Tasks found on the Cohesity Cluster are returned. Both running and completed Restore Tasks are reported. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">Filter by a list of Restore Task ids. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the start time is creation time of the Cohesity Cluster. (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the end time is the current time. (optional)</param>
        /// <param name="pageCount">Specifies the number of completed Restore Tasks to return in the response for pagination purposes. Running Restore Tasks are always returned. The newest completed Restore Tasks are returned. (optional)</param>
        /// <param name="taskTypes">Filter by the types of Restore Tasks such as &#39;kRecoverVMs&#39;, &#39;kCloneVMs&#39;, &#39;kCloneView&#39; or &#39;kMountVolumes&#39;. (optional)</param>
        /// <returns>Task of List&lt;RestoreTask&gt;</returns>
        System.Threading.Tasks.Task<List<RestoreTask>> GetRestoreTasksAsync (List<long?> taskIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null, List<string> taskTypes = null);

        /// <summary>
        /// List the Restore Tasks filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Restore Tasks found on the Cohesity Cluster are returned. Both running and completed Restore Tasks are reported. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">Filter by a list of Restore Task ids. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the start time is creation time of the Cohesity Cluster. (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the end time is the current time. (optional)</param>
        /// <param name="pageCount">Specifies the number of completed Restore Tasks to return in the response for pagination purposes. Running Restore Tasks are always returned. The newest completed Restore Tasks are returned. (optional)</param>
        /// <param name="taskTypes">Filter by the types of Restore Tasks such as &#39;kRecoverVMs&#39;, &#39;kCloneVMs&#39;, &#39;kCloneView&#39; or &#39;kMountVolumes&#39;. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RestoreTask&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RestoreTask>>> GetRestoreTasksAsyncWithHttpInfo (List<long?> taskIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null, List<string> taskTypes = null);
        /// <summary>
        /// Get information about the logical volumes found in a VM.
        /// </summary>
        /// <remarks>
        /// All fields must be specified for this operation. To get values for these fields, invoke the GET /public/restore/objects operation. A specific Job Run is defined by the jobRunId, startedTimeUsecs, and attemptNumber fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attemptNumber">Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3. (optional)</param>
        /// <param name="sourceId">Specifies the id of the VM object to search for volumes. (optional)</param>
        /// <param name="supportedVolumesOnly">Specifies to return only supported volumes information. Unsupported volumes are not returned if this flag is set to true. Default is false. (optional)</param>
        /// <param name="jobId">Specifies the Job id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job. (optional)</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. (optional)</param>
        /// <param name="startedTimeUsecs">Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="originalJobId">Specifies the id for the Protection Job that originally captured the snapshots of the original object. If the object was backed up on a Primary Cluster replicated to this Cohesity Cluster, and a new Inactive Job is created, this field still contains the id of the original Job and NOT the id of the new Inactive Job. This field is used in combination with the clusterId and clusterIncarnationId to uniquely identify a Job. (optional)</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. (optional)</param>
        /// <param name="jobRunId">Specifies the id of the Job Run that captured the snapshot. (optional)</param>
        /// <returns>Task of List&lt;VmVolumesInformation&gt;</returns>
        System.Threading.Tasks.Task<List<VmVolumesInformation>> GetVmVolumesInformationAsync (long? attemptNumber = null, long? sourceId = null, bool? supportedVolumesOnly = null, long? jobId = null, long? clusterIncarnationId = null, long? startedTimeUsecs = null, long? originalJobId = null, long? clusterId = null, long? jobRunId = null);

        /// <summary>
        /// Get information about the logical volumes found in a VM.
        /// </summary>
        /// <remarks>
        /// All fields must be specified for this operation. To get values for these fields, invoke the GET /public/restore/objects operation. A specific Job Run is defined by the jobRunId, startedTimeUsecs, and attemptNumber fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attemptNumber">Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3. (optional)</param>
        /// <param name="sourceId">Specifies the id of the VM object to search for volumes. (optional)</param>
        /// <param name="supportedVolumesOnly">Specifies to return only supported volumes information. Unsupported volumes are not returned if this flag is set to true. Default is false. (optional)</param>
        /// <param name="jobId">Specifies the Job id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job. (optional)</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. (optional)</param>
        /// <param name="startedTimeUsecs">Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="originalJobId">Specifies the id for the Protection Job that originally captured the snapshots of the original object. If the object was backed up on a Primary Cluster replicated to this Cohesity Cluster, and a new Inactive Job is created, this field still contains the id of the original Job and NOT the id of the new Inactive Job. This field is used in combination with the clusterId and clusterIncarnationId to uniquely identify a Job. (optional)</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. (optional)</param>
        /// <param name="jobRunId">Specifies the id of the Job Run that captured the snapshot. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VmVolumesInformation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VmVolumesInformation>>> GetVmVolumesInformationAsyncWithHttpInfo (long? attemptNumber = null, long? sourceId = null, bool? supportedVolumesOnly = null, long? jobId = null, long? clusterIncarnationId = null, long? startedTimeUsecs = null, long? originalJobId = null, long? clusterId = null, long? jobRunId = null);
        /// <summary>
        /// Find backup objects that match the specified search and filter criteria on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// If no search pattern or filter parameters are specified, all backup objects currently found on the Cohesity Cluster are returned. Only leaf objects that have been protected by a Job are returned such as VMs, Views and databases. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to leaf backup objects such as VMs, Views and databases.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="operatingSystems">Filter by the Operating Systems running on VMs and Physical Servers. This filter is applicable only to VMs and physical servers. (optional)</param>
        /// <param name="application">Filter by application when the environment type is kSQL. For example, if SQL is specified the SQL databases are returned. (optional)</param>
        /// <param name="ownerEntityId">Filter objects by the Entity id of the owner VM. For example, if a ownerEntityId is provided while searching for SQL databases, only SQL databases belonging to the VM with the specified id are returned. ownerEntityId is only significant if application is set to SQL. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <returns>Task of ObjectSearchResults</returns>
        System.Threading.Tasks.Task<ObjectSearchResults> SearchObjectsAsync (List<long?> jobIds = null, List<long?> viewBoxIds = null, List<string> environments = null, long? startIndex = null, List<string> operatingSystems = null, string application = null, long? ownerEntityId = null, string search = null, List<long?> registeredSourceIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null);

        /// <summary>
        /// Find backup objects that match the specified search and filter criteria on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// If no search pattern or filter parameters are specified, all backup objects currently found on the Cohesity Cluster are returned. Only leaf objects that have been protected by a Job are returned such as VMs, Views and databases. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to leaf backup objects such as VMs, Views and databases.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="operatingSystems">Filter by the Operating Systems running on VMs and Physical Servers. This filter is applicable only to VMs and physical servers. (optional)</param>
        /// <param name="application">Filter by application when the environment type is kSQL. For example, if SQL is specified the SQL databases are returned. (optional)</param>
        /// <param name="ownerEntityId">Filter objects by the Entity id of the owner VM. For example, if a ownerEntityId is provided while searching for SQL databases, only SQL databases belonging to the VM with the specified id are returned. ownerEntityId is only significant if application is set to SQL. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <returns>Task of ApiResponse (ObjectSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<ObjectSearchResults>> SearchObjectsAsyncWithHttpInfo (List<long?> jobIds = null, List<long?> viewBoxIds = null, List<string> environments = null, long? startIndex = null, List<string> operatingSystems = null, string application = null, long? ownerEntityId = null, string search = null, List<long?> registeredSourceIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null);
        /// <summary>
        /// Search for files and folders to recover that match the specified search and filter criteria on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Use the files and folders returned by this operation to populate the list of files and folders to recover in the POST /public/restore/files operation. If no search pattern or filter parameters are specified, all files and folders currently found on the Cohesity Cluster are returned. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to files and folders that are found in the source objects (such as VMs).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="sourceIds">Filter by source ids. Only files and folders found in the listed sources (such as VMs) are returned. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <param name="folderOnly">Filter by folders or files. If true, only folders are returned. If false, only files are returned. If not specified, both files and folders are returned. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; or &#39;kGenericNas&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of FileSearchResults</returns>
        System.Threading.Tasks.Task<FileSearchResults> SearchRestoredFilesAsync (long? startTimeUsecs = null, long? endTimeUsecs = null, List<long?> sourceIds = null, long? startIndex = null, long? pageCount = null, bool? folderOnly = null, string search = null, List<long?> jobIds = null, List<long?> registeredSourceIds = null, List<long?> viewBoxIds = null, List<string> environments = null);

        /// <summary>
        /// Search for files and folders to recover that match the specified search and filter criteria on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Use the files and folders returned by this operation to populate the list of files and folders to recover in the POST /public/restore/files operation. If no search pattern or filter parameters are specified, all files and folders currently found on the Cohesity Cluster are returned. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to files and folders that are found in the source objects (such as VMs).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="sourceIds">Filter by source ids. Only files and folders found in the listed sources (such as VMs) are returned. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <param name="folderOnly">Filter by folders or files. If true, only folders are returned. If false, only files are returned. If not specified, both files and folders are returned. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; or &#39;kGenericNas&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of ApiResponse (FileSearchResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileSearchResults>> SearchRestoredFilesAsyncWithHttpInfo (long? startTimeUsecs = null, long? endTimeUsecs = null, List<long?> sourceIds = null, long? startIndex = null, long? pageCount = null, bool? folderOnly = null, string search = null, List<long?> jobIds = null, List<long?> registeredSourceIds = null, List<long?> viewBoxIds = null, List<string> environments = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RestoreTasksApi : IRestoreTasksApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RestoreTasksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RestoreTasksApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RestoreTasksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RestoreTasksApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel a recover or clone task with specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns></returns>
        public void CancelRestoreTask (long? id)
        {
             CancelRestoreTaskWithHttpInfo(id);
        }

        /// <summary>
        /// Cancel a recover or clone task with specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelRestoreTaskWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RestoreTasksApi->CancelRestoreTask");

            var localVarPath = "/public/restore/tasks/cancel/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelRestoreTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a recover or clone task with specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelRestoreTaskAsync (long? id)
        {
             await CancelRestoreTaskAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Cancel a recover or clone task with specified id. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelRestoreTaskAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RestoreTasksApi->CancelRestoreTask");

            var localVarPath = "/public/restore/tasks/cancel/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelRestoreTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a Restore Task for cloning Applications like SQL Databases. Returns the created Restore Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning Applications like SQL DB.</param>
        /// <returns>RestoreTask</returns>
        public RestoreTask CreateApplicationsCloneTask (ApplicationsRestoreTaskRequest body)
        {
             ApiResponse<RestoreTask> localVarResponse = CreateApplicationsCloneTaskWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Restore Task for cloning Applications like SQL Databases. Returns the created Restore Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning Applications like SQL DB.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        public ApiResponse< RestoreTask > CreateApplicationsCloneTaskWithHttpInfo (ApplicationsRestoreTaskRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RestoreTasksApi->CreateApplicationsCloneTask");

            var localVarPath = "/public/restore/applicationsClone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplicationsCloneTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// Create a Restore Task for cloning Applications like SQL Databases. Returns the created Restore Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning Applications like SQL DB.</param>
        /// <returns>Task of RestoreTask</returns>
        public async System.Threading.Tasks.Task<RestoreTask> CreateApplicationsCloneTaskAsync (ApplicationsRestoreTaskRequest body)
        {
             ApiResponse<RestoreTask> localVarResponse = await CreateApplicationsCloneTaskAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Restore Task for cloning Applications like SQL Databases. Returns the created Restore Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning Applications like SQL DB.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestoreTask>> CreateApplicationsCloneTaskAsyncWithHttpInfo (ApplicationsRestoreTaskRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RestoreTasksApi->CreateApplicationsCloneTask");

            var localVarPath = "/public/restore/applicationsClone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplicationsCloneTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// Create a Restore Task for recovering Applications like SQL Databases. Returns the created Restore Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering Applications like SQL DB. volumes to mount points.</param>
        /// <returns>RestoreTask</returns>
        public RestoreTask CreateApplicationsRecoverTask (ApplicationsRestoreTaskRequest body)
        {
             ApiResponse<RestoreTask> localVarResponse = CreateApplicationsRecoverTaskWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Restore Task for recovering Applications like SQL Databases. Returns the created Restore Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering Applications like SQL DB. volumes to mount points.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        public ApiResponse< RestoreTask > CreateApplicationsRecoverTaskWithHttpInfo (ApplicationsRestoreTaskRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RestoreTasksApi->CreateApplicationsRecoverTask");

            var localVarPath = "/public/restore/applicationsRecover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplicationsRecoverTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// Create a Restore Task for recovering Applications like SQL Databases. Returns the created Restore Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering Applications like SQL DB. volumes to mount points.</param>
        /// <returns>Task of RestoreTask</returns>
        public async System.Threading.Tasks.Task<RestoreTask> CreateApplicationsRecoverTaskAsync (ApplicationsRestoreTaskRequest body)
        {
             ApiResponse<RestoreTask> localVarResponse = await CreateApplicationsRecoverTaskAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Restore Task for recovering Applications like SQL Databases. Returns the created Restore Task.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering Applications like SQL DB. volumes to mount points.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestoreTask>> CreateApplicationsRecoverTaskAsyncWithHttpInfo (ApplicationsRestoreTaskRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RestoreTasksApi->CreateApplicationsRecoverTask");

            var localVarPath = "/public/restore/applicationsRecover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateApplicationsRecoverTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// Create a Restore Task for cloning VMs or a View. Returns the created Restore Task that clones VMs or a View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning VMs or a View.</param>
        /// <returns>RestoreTask</returns>
        public RestoreTask CreateCloneTask (CloneTaskRequest body)
        {
             ApiResponse<RestoreTask> localVarResponse = CreateCloneTaskWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Restore Task for cloning VMs or a View. Returns the created Restore Task that clones VMs or a View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning VMs or a View.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        public ApiResponse< RestoreTask > CreateCloneTaskWithHttpInfo (CloneTaskRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RestoreTasksApi->CreateCloneTask");

            var localVarPath = "/public/restore/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCloneTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// Create a Restore Task for cloning VMs or a View. Returns the created Restore Task that clones VMs or a View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning VMs or a View.</param>
        /// <returns>Task of RestoreTask</returns>
        public async System.Threading.Tasks.Task<RestoreTask> CreateCloneTaskAsync (CloneTaskRequest body)
        {
             ApiResponse<RestoreTask> localVarResponse = await CreateCloneTaskAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Restore Task for cloning VMs or a View. Returns the created Restore Task that clones VMs or a View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for cloning VMs or a View.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestoreTask>> CreateCloneTaskAsyncWithHttpInfo (CloneTaskRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RestoreTasksApi->CreateCloneTask");

            var localVarPath = "/public/restore/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateCloneTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// Create a Restore Task for recovering VMs or instantly mounting volumes. Returns the created Restore Task. This operation returns the following types of Restore Tasks: 1) A Restore Task that recovers VMs back to the original location or a new location. 2) A Restore Task that mounts the volumes of a Server (such as a VM or Physical Server) onto the specified target system. The Snapshots of the Server that contains the volumes that are mounted is determined by Array of Objects. The content of the Server is available from the mount point for the Granular Level Recovery (GLR) of application data. For example recovering Microsoft Exchange data using Kroll Ontrack® PowerControls™.  NOTE: Volumes are mounted \&quot;instantly\&quot; if the Snapshot is stored locally on the Cohesity Cluster. If the Snapshot is archival target, it will take longer because it must be retrieved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering VMs or mounting volumes to mount points.</param>
        /// <returns>RestoreTask</returns>
        public RestoreTask CreateRecoverTask (RecoverTaskRequest body)
        {
             ApiResponse<RestoreTask> localVarResponse = CreateRecoverTaskWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Restore Task for recovering VMs or instantly mounting volumes. Returns the created Restore Task. This operation returns the following types of Restore Tasks: 1) A Restore Task that recovers VMs back to the original location or a new location. 2) A Restore Task that mounts the volumes of a Server (such as a VM or Physical Server) onto the specified target system. The Snapshots of the Server that contains the volumes that are mounted is determined by Array of Objects. The content of the Server is available from the mount point for the Granular Level Recovery (GLR) of application data. For example recovering Microsoft Exchange data using Kroll Ontrack® PowerControls™.  NOTE: Volumes are mounted \&quot;instantly\&quot; if the Snapshot is stored locally on the Cohesity Cluster. If the Snapshot is archival target, it will take longer because it must be retrieved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering VMs or mounting volumes to mount points.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        public ApiResponse< RestoreTask > CreateRecoverTaskWithHttpInfo (RecoverTaskRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RestoreTasksApi->CreateRecoverTask");

            var localVarPath = "/public/restore/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecoverTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// Create a Restore Task for recovering VMs or instantly mounting volumes. Returns the created Restore Task. This operation returns the following types of Restore Tasks: 1) A Restore Task that recovers VMs back to the original location or a new location. 2) A Restore Task that mounts the volumes of a Server (such as a VM or Physical Server) onto the specified target system. The Snapshots of the Server that contains the volumes that are mounted is determined by Array of Objects. The content of the Server is available from the mount point for the Granular Level Recovery (GLR) of application data. For example recovering Microsoft Exchange data using Kroll Ontrack® PowerControls™.  NOTE: Volumes are mounted \&quot;instantly\&quot; if the Snapshot is stored locally on the Cohesity Cluster. If the Snapshot is archival target, it will take longer because it must be retrieved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering VMs or mounting volumes to mount points.</param>
        /// <returns>Task of RestoreTask</returns>
        public async System.Threading.Tasks.Task<RestoreTask> CreateRecoverTaskAsync (RecoverTaskRequest body)
        {
             ApiResponse<RestoreTask> localVarResponse = await CreateRecoverTaskAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Restore Task for recovering VMs or instantly mounting volumes. Returns the created Restore Task. This operation returns the following types of Restore Tasks: 1) A Restore Task that recovers VMs back to the original location or a new location. 2) A Restore Task that mounts the volumes of a Server (such as a VM or Physical Server) onto the specified target system. The Snapshots of the Server that contains the volumes that are mounted is determined by Array of Objects. The content of the Server is available from the mount point for the Granular Level Recovery (GLR) of application data. For example recovering Microsoft Exchange data using Kroll Ontrack® PowerControls™.  NOTE: Volumes are mounted \&quot;instantly\&quot; if the Snapshot is stored locally on the Cohesity Cluster. If the Snapshot is archival target, it will take longer because it must be retrieved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering VMs or mounting volumes to mount points.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestoreTask>> CreateRecoverTaskAsyncWithHttpInfo (RecoverTaskRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RestoreTasksApi->CreateRecoverTask");

            var localVarPath = "/public/restore/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRecoverTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// Create a Restore Task for recovering files and folders. Returns the created Restore Task that recovers files and folders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering files or folders.</param>
        /// <returns>RestoreTask</returns>
        public RestoreTask CreateRestoreFilesTask (RestoreFilesTaskRequest body)
        {
             ApiResponse<RestoreTask> localVarResponse = CreateRestoreFilesTaskWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Restore Task for recovering files and folders. Returns the created Restore Task that recovers files and folders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering files or folders.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        public ApiResponse< RestoreTask > CreateRestoreFilesTaskWithHttpInfo (RestoreFilesTaskRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RestoreTasksApi->CreateRestoreFilesTask");

            var localVarPath = "/public/restore/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRestoreFilesTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// Create a Restore Task for recovering files and folders. Returns the created Restore Task that recovers files and folders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering files or folders.</param>
        /// <returns>Task of RestoreTask</returns>
        public async System.Threading.Tasks.Task<RestoreTask> CreateRestoreFilesTaskAsync (RestoreFilesTaskRequest body)
        {
             ApiResponse<RestoreTask> localVarResponse = await CreateRestoreFilesTaskAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Restore Task for recovering files and folders. Returns the created Restore Task that recovers files and folders.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Restore Task for recovering files or folders.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestoreTask>> CreateRestoreFilesTaskAsyncWithHttpInfo (RestoreFilesTaskRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RestoreTasksApi->CreateRestoreFilesTask");

            var localVarPath = "/public/restore/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRestoreFilesTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// Get the information about snapshots that contain the specified file or folder. In addition, information about the file or folder is provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Specifies the id of the Job that captured the snapshots. These snapshots are searched for the specified files or folders. This field is required.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. This field is required.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. This field is required.</param>
        /// <param name="sourceId">Specifies the id of the Protection Source object (such as a VM) to search. When a Job Run executes, snapshots of the specified Protection Source object are captured. This operation searches the snapshots of the object for the file or folder. This field is required.</param>
        /// <param name="filename">Specifies the name of the file or folder to find in the snapshots. This field is required.</param>
        /// <returns>List&lt;FileSnapshotInformation&gt;</returns>
        public List<FileSnapshotInformation> GetFileSnapshotsInformation (long? jobId, long? clusterId, long? clusterIncarnationId, long? sourceId, string filename)
        {
             ApiResponse<List<FileSnapshotInformation>> localVarResponse = GetFileSnapshotsInformationWithHttpInfo(jobId, clusterId, clusterIncarnationId, sourceId, filename);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the information about snapshots that contain the specified file or folder. In addition, information about the file or folder is provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Specifies the id of the Job that captured the snapshots. These snapshots are searched for the specified files or folders. This field is required.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. This field is required.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. This field is required.</param>
        /// <param name="sourceId">Specifies the id of the Protection Source object (such as a VM) to search. When a Job Run executes, snapshots of the specified Protection Source object are captured. This operation searches the snapshots of the object for the file or folder. This field is required.</param>
        /// <param name="filename">Specifies the name of the file or folder to find in the snapshots. This field is required.</param>
        /// <returns>ApiResponse of List&lt;FileSnapshotInformation&gt;</returns>
        public ApiResponse< List<FileSnapshotInformation> > GetFileSnapshotsInformationWithHttpInfo (long? jobId, long? clusterId, long? clusterIncarnationId, long? sourceId, string filename)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling RestoreTasksApi->GetFileSnapshotsInformation");
            // verify the required parameter 'clusterId' is set
            if (clusterId == null)
                throw new ApiException(400, "Missing required parameter 'clusterId' when calling RestoreTasksApi->GetFileSnapshotsInformation");
            // verify the required parameter 'clusterIncarnationId' is set
            if (clusterIncarnationId == null)
                throw new ApiException(400, "Missing required parameter 'clusterIncarnationId' when calling RestoreTasksApi->GetFileSnapshotsInformation");
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new ApiException(400, "Missing required parameter 'sourceId' when calling RestoreTasksApi->GetFileSnapshotsInformation");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling RestoreTasksApi->GetFileSnapshotsInformation");

            var localVarPath = "/public/restore/files/snapshotsInformation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterId", clusterId)); // query parameter
            if (clusterIncarnationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterIncarnationId", clusterIncarnationId)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter
            if (filename != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filename", filename)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileSnapshotsInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FileSnapshotInformation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FileSnapshotInformation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FileSnapshotInformation>)));
        }

        /// <summary>
        /// Get the information about snapshots that contain the specified file or folder. In addition, information about the file or folder is provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Specifies the id of the Job that captured the snapshots. These snapshots are searched for the specified files or folders. This field is required.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. This field is required.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. This field is required.</param>
        /// <param name="sourceId">Specifies the id of the Protection Source object (such as a VM) to search. When a Job Run executes, snapshots of the specified Protection Source object are captured. This operation searches the snapshots of the object for the file or folder. This field is required.</param>
        /// <param name="filename">Specifies the name of the file or folder to find in the snapshots. This field is required.</param>
        /// <returns>Task of List&lt;FileSnapshotInformation&gt;</returns>
        public async System.Threading.Tasks.Task<List<FileSnapshotInformation>> GetFileSnapshotsInformationAsync (long? jobId, long? clusterId, long? clusterIncarnationId, long? sourceId, string filename)
        {
             ApiResponse<List<FileSnapshotInformation>> localVarResponse = await GetFileSnapshotsInformationAsyncWithHttpInfo(jobId, clusterId, clusterIncarnationId, sourceId, filename);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the information about snapshots that contain the specified file or folder. In addition, information about the file or folder is provided. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Specifies the id of the Job that captured the snapshots. These snapshots are searched for the specified files or folders. This field is required.</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. This field is required.</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. This field is required.</param>
        /// <param name="sourceId">Specifies the id of the Protection Source object (such as a VM) to search. When a Job Run executes, snapshots of the specified Protection Source object are captured. This operation searches the snapshots of the object for the file or folder. This field is required.</param>
        /// <param name="filename">Specifies the name of the file or folder to find in the snapshots. This field is required.</param>
        /// <returns>Task of ApiResponse (List&lt;FileSnapshotInformation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<FileSnapshotInformation>>> GetFileSnapshotsInformationAsyncWithHttpInfo (long? jobId, long? clusterId, long? clusterIncarnationId, long? sourceId, string filename)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new ApiException(400, "Missing required parameter 'jobId' when calling RestoreTasksApi->GetFileSnapshotsInformation");
            // verify the required parameter 'clusterId' is set
            if (clusterId == null)
                throw new ApiException(400, "Missing required parameter 'clusterId' when calling RestoreTasksApi->GetFileSnapshotsInformation");
            // verify the required parameter 'clusterIncarnationId' is set
            if (clusterIncarnationId == null)
                throw new ApiException(400, "Missing required parameter 'clusterIncarnationId' when calling RestoreTasksApi->GetFileSnapshotsInformation");
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
                throw new ApiException(400, "Missing required parameter 'sourceId' when calling RestoreTasksApi->GetFileSnapshotsInformation");
            // verify the required parameter 'filename' is set
            if (filename == null)
                throw new ApiException(400, "Missing required parameter 'filename' when calling RestoreTasksApi->GetFileSnapshotsInformation");

            var localVarPath = "/public/restore/files/snapshotsInformation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterId", clusterId)); // query parameter
            if (clusterIncarnationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterIncarnationId", clusterIncarnationId)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter
            if (filename != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filename", filename)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFileSnapshotsInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<FileSnapshotInformation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<FileSnapshotInformation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<FileSnapshotInformation>)));
        }

        /// <summary>
        /// List details about a single Restore Task. Returns the Restore Task corresponding to the specified Restore Task id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>RestoreTask</returns>
        public RestoreTask GetRestoreTaskById (long? id)
        {
             ApiResponse<RestoreTask> localVarResponse = GetRestoreTaskByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single Restore Task. Returns the Restore Task corresponding to the specified Restore Task id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>ApiResponse of RestoreTask</returns>
        public ApiResponse< RestoreTask > GetRestoreTaskByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RestoreTasksApi->GetRestoreTaskById");

            var localVarPath = "/public/restore/tasks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRestoreTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// List details about a single Restore Task. Returns the Restore Task corresponding to the specified Restore Task id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>Task of RestoreTask</returns>
        public async System.Threading.Tasks.Task<RestoreTask> GetRestoreTaskByIdAsync (long? id)
        {
             ApiResponse<RestoreTask> localVarResponse = await GetRestoreTaskByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single Restore Task. Returns the Restore Task corresponding to the specified Restore Task id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id for the Restore Task.</param>
        /// <returns>Task of ApiResponse (RestoreTask)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RestoreTask>> GetRestoreTaskByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RestoreTasksApi->GetRestoreTaskById");

            var localVarPath = "/public/restore/tasks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRestoreTaskById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RestoreTask>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RestoreTask) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RestoreTask)));
        }

        /// <summary>
        /// List the Restore Tasks filtered by the specified parameters. If no parameters are specified, all Restore Tasks found on the Cohesity Cluster are returned. Both running and completed Restore Tasks are reported. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">Filter by a list of Restore Task ids. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the start time is creation time of the Cohesity Cluster. (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the end time is the current time. (optional)</param>
        /// <param name="pageCount">Specifies the number of completed Restore Tasks to return in the response for pagination purposes. Running Restore Tasks are always returned. The newest completed Restore Tasks are returned. (optional)</param>
        /// <param name="taskTypes">Filter by the types of Restore Tasks such as &#39;kRecoverVMs&#39;, &#39;kCloneVMs&#39;, &#39;kCloneView&#39; or &#39;kMountVolumes&#39;. (optional)</param>
        /// <returns>List&lt;RestoreTask&gt;</returns>
        public List<RestoreTask> GetRestoreTasks (List<long?> taskIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null, List<string> taskTypes = null)
        {
             ApiResponse<List<RestoreTask>> localVarResponse = GetRestoreTasksWithHttpInfo(taskIds, startTimeUsecs, endTimeUsecs, pageCount, taskTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the Restore Tasks filtered by the specified parameters. If no parameters are specified, all Restore Tasks found on the Cohesity Cluster are returned. Both running and completed Restore Tasks are reported. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">Filter by a list of Restore Task ids. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the start time is creation time of the Cohesity Cluster. (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the end time is the current time. (optional)</param>
        /// <param name="pageCount">Specifies the number of completed Restore Tasks to return in the response for pagination purposes. Running Restore Tasks are always returned. The newest completed Restore Tasks are returned. (optional)</param>
        /// <param name="taskTypes">Filter by the types of Restore Tasks such as &#39;kRecoverVMs&#39;, &#39;kCloneVMs&#39;, &#39;kCloneView&#39; or &#39;kMountVolumes&#39;. (optional)</param>
        /// <returns>ApiResponse of List&lt;RestoreTask&gt;</returns>
        public ApiResponse< List<RestoreTask> > GetRestoreTasksWithHttpInfo (List<long?> taskIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null, List<string> taskTypes = null)
        {

            var localVarPath = "/public/restore/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "taskIds", taskIds)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (taskTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "taskTypes", taskTypes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRestoreTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestoreTask>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestoreTask>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestoreTask>)));
        }

        /// <summary>
        /// List the Restore Tasks filtered by the specified parameters. If no parameters are specified, all Restore Tasks found on the Cohesity Cluster are returned. Both running and completed Restore Tasks are reported. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">Filter by a list of Restore Task ids. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the start time is creation time of the Cohesity Cluster. (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the end time is the current time. (optional)</param>
        /// <param name="pageCount">Specifies the number of completed Restore Tasks to return in the response for pagination purposes. Running Restore Tasks are always returned. The newest completed Restore Tasks are returned. (optional)</param>
        /// <param name="taskTypes">Filter by the types of Restore Tasks such as &#39;kRecoverVMs&#39;, &#39;kCloneVMs&#39;, &#39;kCloneView&#39; or &#39;kMountVolumes&#39;. (optional)</param>
        /// <returns>Task of List&lt;RestoreTask&gt;</returns>
        public async System.Threading.Tasks.Task<List<RestoreTask>> GetRestoreTasksAsync (List<long?> taskIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null, List<string> taskTypes = null)
        {
             ApiResponse<List<RestoreTask>> localVarResponse = await GetRestoreTasksAsyncWithHttpInfo(taskIds, startTimeUsecs, endTimeUsecs, pageCount, taskTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the Restore Tasks filtered by the specified parameters. If no parameters are specified, all Restore Tasks found on the Cohesity Cluster are returned. Both running and completed Restore Tasks are reported. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskIds">Filter by a list of Restore Task ids. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the start time is creation time of the Cohesity Cluster. (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the end time is the current time. (optional)</param>
        /// <param name="pageCount">Specifies the number of completed Restore Tasks to return in the response for pagination purposes. Running Restore Tasks are always returned. The newest completed Restore Tasks are returned. (optional)</param>
        /// <param name="taskTypes">Filter by the types of Restore Tasks such as &#39;kRecoverVMs&#39;, &#39;kCloneVMs&#39;, &#39;kCloneView&#39; or &#39;kMountVolumes&#39;. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RestoreTask&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RestoreTask>>> GetRestoreTasksAsyncWithHttpInfo (List<long?> taskIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null, List<string> taskTypes = null)
        {

            var localVarPath = "/public/restore/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (taskIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "taskIds", taskIds)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (taskTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "taskTypes", taskTypes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRestoreTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestoreTask>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestoreTask>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestoreTask>)));
        }

        /// <summary>
        /// Get information about the logical volumes found in a VM. All fields must be specified for this operation. To get values for these fields, invoke the GET /public/restore/objects operation. A specific Job Run is defined by the jobRunId, startedTimeUsecs, and attemptNumber fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attemptNumber">Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3. (optional)</param>
        /// <param name="sourceId">Specifies the id of the VM object to search for volumes. (optional)</param>
        /// <param name="supportedVolumesOnly">Specifies to return only supported volumes information. Unsupported volumes are not returned if this flag is set to true. Default is false. (optional)</param>
        /// <param name="jobId">Specifies the Job id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job. (optional)</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. (optional)</param>
        /// <param name="startedTimeUsecs">Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="originalJobId">Specifies the id for the Protection Job that originally captured the snapshots of the original object. If the object was backed up on a Primary Cluster replicated to this Cohesity Cluster, and a new Inactive Job is created, this field still contains the id of the original Job and NOT the id of the new Inactive Job. This field is used in combination with the clusterId and clusterIncarnationId to uniquely identify a Job. (optional)</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. (optional)</param>
        /// <param name="jobRunId">Specifies the id of the Job Run that captured the snapshot. (optional)</param>
        /// <returns>List&lt;VmVolumesInformation&gt;</returns>
        public List<VmVolumesInformation> GetVmVolumesInformation (long? attemptNumber = null, long? sourceId = null, bool? supportedVolumesOnly = null, long? jobId = null, long? clusterIncarnationId = null, long? startedTimeUsecs = null, long? originalJobId = null, long? clusterId = null, long? jobRunId = null)
        {
             ApiResponse<List<VmVolumesInformation>> localVarResponse = GetVmVolumesInformationWithHttpInfo(attemptNumber, sourceId, supportedVolumesOnly, jobId, clusterIncarnationId, startedTimeUsecs, originalJobId, clusterId, jobRunId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about the logical volumes found in a VM. All fields must be specified for this operation. To get values for these fields, invoke the GET /public/restore/objects operation. A specific Job Run is defined by the jobRunId, startedTimeUsecs, and attemptNumber fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attemptNumber">Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3. (optional)</param>
        /// <param name="sourceId">Specifies the id of the VM object to search for volumes. (optional)</param>
        /// <param name="supportedVolumesOnly">Specifies to return only supported volumes information. Unsupported volumes are not returned if this flag is set to true. Default is false. (optional)</param>
        /// <param name="jobId">Specifies the Job id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job. (optional)</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. (optional)</param>
        /// <param name="startedTimeUsecs">Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="originalJobId">Specifies the id for the Protection Job that originally captured the snapshots of the original object. If the object was backed up on a Primary Cluster replicated to this Cohesity Cluster, and a new Inactive Job is created, this field still contains the id of the original Job and NOT the id of the new Inactive Job. This field is used in combination with the clusterId and clusterIncarnationId to uniquely identify a Job. (optional)</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. (optional)</param>
        /// <param name="jobRunId">Specifies the id of the Job Run that captured the snapshot. (optional)</param>
        /// <returns>ApiResponse of List&lt;VmVolumesInformation&gt;</returns>
        public ApiResponse< List<VmVolumesInformation> > GetVmVolumesInformationWithHttpInfo (long? attemptNumber = null, long? sourceId = null, bool? supportedVolumesOnly = null, long? jobId = null, long? clusterIncarnationId = null, long? startedTimeUsecs = null, long? originalJobId = null, long? clusterId = null, long? jobRunId = null)
        {

            var localVarPath = "/public/restore/vms/volumesInformation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attemptNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attemptNumber", attemptNumber)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter
            if (supportedVolumesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportedVolumesOnly", supportedVolumesOnly)); // query parameter
            if (jobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter
            if (clusterIncarnationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterIncarnationId", clusterIncarnationId)); // query parameter
            if (startedTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startedTimeUsecs", startedTimeUsecs)); // query parameter
            if (originalJobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalJobId", originalJobId)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterId", clusterId)); // query parameter
            if (jobRunId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jobRunId", jobRunId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVmVolumesInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VmVolumesInformation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VmVolumesInformation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VmVolumesInformation>)));
        }

        /// <summary>
        /// Get information about the logical volumes found in a VM. All fields must be specified for this operation. To get values for these fields, invoke the GET /public/restore/objects operation. A specific Job Run is defined by the jobRunId, startedTimeUsecs, and attemptNumber fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attemptNumber">Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3. (optional)</param>
        /// <param name="sourceId">Specifies the id of the VM object to search for volumes. (optional)</param>
        /// <param name="supportedVolumesOnly">Specifies to return only supported volumes information. Unsupported volumes are not returned if this flag is set to true. Default is false. (optional)</param>
        /// <param name="jobId">Specifies the Job id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job. (optional)</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. (optional)</param>
        /// <param name="startedTimeUsecs">Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="originalJobId">Specifies the id for the Protection Job that originally captured the snapshots of the original object. If the object was backed up on a Primary Cluster replicated to this Cohesity Cluster, and a new Inactive Job is created, this field still contains the id of the original Job and NOT the id of the new Inactive Job. This field is used in combination with the clusterId and clusterIncarnationId to uniquely identify a Job. (optional)</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. (optional)</param>
        /// <param name="jobRunId">Specifies the id of the Job Run that captured the snapshot. (optional)</param>
        /// <returns>Task of List&lt;VmVolumesInformation&gt;</returns>
        public async System.Threading.Tasks.Task<List<VmVolumesInformation>> GetVmVolumesInformationAsync (long? attemptNumber = null, long? sourceId = null, bool? supportedVolumesOnly = null, long? jobId = null, long? clusterIncarnationId = null, long? startedTimeUsecs = null, long? originalJobId = null, long? clusterId = null, long? jobRunId = null)
        {
             ApiResponse<List<VmVolumesInformation>> localVarResponse = await GetVmVolumesInformationAsyncWithHttpInfo(attemptNumber, sourceId, supportedVolumesOnly, jobId, clusterIncarnationId, startedTimeUsecs, originalJobId, clusterId, jobRunId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get information about the logical volumes found in a VM. All fields must be specified for this operation. To get values for these fields, invoke the GET /public/restore/objects operation. A specific Job Run is defined by the jobRunId, startedTimeUsecs, and attemptNumber fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="attemptNumber">Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3. (optional)</param>
        /// <param name="sourceId">Specifies the id of the VM object to search for volumes. (optional)</param>
        /// <param name="supportedVolumesOnly">Specifies to return only supported volumes information. Unsupported volumes are not returned if this flag is set to true. Default is false. (optional)</param>
        /// <param name="jobId">Specifies the Job id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job. (optional)</param>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. (optional)</param>
        /// <param name="startedTimeUsecs">Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="originalJobId">Specifies the id for the Protection Job that originally captured the snapshots of the original object. If the object was backed up on a Primary Cluster replicated to this Cohesity Cluster, and a new Inactive Job is created, this field still contains the id of the original Job and NOT the id of the new Inactive Job. This field is used in combination with the clusterId and clusterIncarnationId to uniquely identify a Job. (optional)</param>
        /// <param name="clusterId">Specifies the Cohesity Cluster id where the Job was created. (optional)</param>
        /// <param name="jobRunId">Specifies the id of the Job Run that captured the snapshot. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VmVolumesInformation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VmVolumesInformation>>> GetVmVolumesInformationAsyncWithHttpInfo (long? attemptNumber = null, long? sourceId = null, bool? supportedVolumesOnly = null, long? jobId = null, long? clusterIncarnationId = null, long? startedTimeUsecs = null, long? originalJobId = null, long? clusterId = null, long? jobRunId = null)
        {

            var localVarPath = "/public/restore/vms/volumesInformation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (attemptNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "attemptNumber", attemptNumber)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter
            if (supportedVolumesOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "supportedVolumesOnly", supportedVolumesOnly)); // query parameter
            if (jobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter
            if (clusterIncarnationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterIncarnationId", clusterIncarnationId)); // query parameter
            if (startedTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startedTimeUsecs", startedTimeUsecs)); // query parameter
            if (originalJobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "originalJobId", originalJobId)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterId", clusterId)); // query parameter
            if (jobRunId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jobRunId", jobRunId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVmVolumesInformation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VmVolumesInformation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<VmVolumesInformation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VmVolumesInformation>)));
        }

        /// <summary>
        /// Find backup objects that match the specified search and filter criteria on the Cohesity Cluster. If no search pattern or filter parameters are specified, all backup objects currently found on the Cohesity Cluster are returned. Only leaf objects that have been protected by a Job are returned such as VMs, Views and databases. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to leaf backup objects such as VMs, Views and databases.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="operatingSystems">Filter by the Operating Systems running on VMs and Physical Servers. This filter is applicable only to VMs and physical servers. (optional)</param>
        /// <param name="application">Filter by application when the environment type is kSQL. For example, if SQL is specified the SQL databases are returned. (optional)</param>
        /// <param name="ownerEntityId">Filter objects by the Entity id of the owner VM. For example, if a ownerEntityId is provided while searching for SQL databases, only SQL databases belonging to the VM with the specified id are returned. ownerEntityId is only significant if application is set to SQL. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <returns>ObjectSearchResults</returns>
        public ObjectSearchResults SearchObjects (List<long?> jobIds = null, List<long?> viewBoxIds = null, List<string> environments = null, long? startIndex = null, List<string> operatingSystems = null, string application = null, long? ownerEntityId = null, string search = null, List<long?> registeredSourceIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null)
        {
             ApiResponse<ObjectSearchResults> localVarResponse = SearchObjectsWithHttpInfo(jobIds, viewBoxIds, environments, startIndex, operatingSystems, application, ownerEntityId, search, registeredSourceIds, startTimeUsecs, endTimeUsecs, pageCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find backup objects that match the specified search and filter criteria on the Cohesity Cluster. If no search pattern or filter parameters are specified, all backup objects currently found on the Cohesity Cluster are returned. Only leaf objects that have been protected by a Job are returned such as VMs, Views and databases. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to leaf backup objects such as VMs, Views and databases.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="operatingSystems">Filter by the Operating Systems running on VMs and Physical Servers. This filter is applicable only to VMs and physical servers. (optional)</param>
        /// <param name="application">Filter by application when the environment type is kSQL. For example, if SQL is specified the SQL databases are returned. (optional)</param>
        /// <param name="ownerEntityId">Filter objects by the Entity id of the owner VM. For example, if a ownerEntityId is provided while searching for SQL databases, only SQL databases belonging to the VM with the specified id are returned. ownerEntityId is only significant if application is set to SQL. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <returns>ApiResponse of ObjectSearchResults</returns>
        public ApiResponse< ObjectSearchResults > SearchObjectsWithHttpInfo (List<long?> jobIds = null, List<long?> viewBoxIds = null, List<string> environments = null, long? startIndex = null, List<string> operatingSystems = null, string application = null, long? ownerEntityId = null, string search = null, List<long?> registeredSourceIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null)
        {

            var localVarPath = "/public/restore/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "jobIds", jobIds)); // query parameter
            if (viewBoxIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewBoxIds", viewBoxIds)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (operatingSystems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "operatingSystems", operatingSystems)); // query parameter
            if (application != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application", application)); // query parameter
            if (ownerEntityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerEntityId", ownerEntityId)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (registeredSourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "registeredSourceIds", registeredSourceIds)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObjectSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ObjectSearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectSearchResults)));
        }

        /// <summary>
        /// Find backup objects that match the specified search and filter criteria on the Cohesity Cluster. If no search pattern or filter parameters are specified, all backup objects currently found on the Cohesity Cluster are returned. Only leaf objects that have been protected by a Job are returned such as VMs, Views and databases. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to leaf backup objects such as VMs, Views and databases.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="operatingSystems">Filter by the Operating Systems running on VMs and Physical Servers. This filter is applicable only to VMs and physical servers. (optional)</param>
        /// <param name="application">Filter by application when the environment type is kSQL. For example, if SQL is specified the SQL databases are returned. (optional)</param>
        /// <param name="ownerEntityId">Filter objects by the Entity id of the owner VM. For example, if a ownerEntityId is provided while searching for SQL databases, only SQL databases belonging to the VM with the specified id are returned. ownerEntityId is only significant if application is set to SQL. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <returns>Task of ObjectSearchResults</returns>
        public async System.Threading.Tasks.Task<ObjectSearchResults> SearchObjectsAsync (List<long?> jobIds = null, List<long?> viewBoxIds = null, List<string> environments = null, long? startIndex = null, List<string> operatingSystems = null, string application = null, long? ownerEntityId = null, string search = null, List<long?> registeredSourceIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null)
        {
             ApiResponse<ObjectSearchResults> localVarResponse = await SearchObjectsAsyncWithHttpInfo(jobIds, viewBoxIds, environments, startIndex, operatingSystems, application, ownerEntityId, search, registeredSourceIds, startTimeUsecs, endTimeUsecs, pageCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find backup objects that match the specified search and filter criteria on the Cohesity Cluster. If no search pattern or filter parameters are specified, all backup objects currently found on the Cohesity Cluster are returned. Only leaf objects that have been protected by a Job are returned such as VMs, Views and databases. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to leaf backup objects such as VMs, Views and databases.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="operatingSystems">Filter by the Operating Systems running on VMs and Physical Servers. This filter is applicable only to VMs and physical servers. (optional)</param>
        /// <param name="application">Filter by application when the environment type is kSQL. For example, if SQL is specified the SQL databases are returned. (optional)</param>
        /// <param name="ownerEntityId">Filter objects by the Entity id of the owner VM. For example, if a ownerEntityId is provided while searching for SQL databases, only SQL databases belonging to the VM with the specified id are returned. ownerEntityId is only significant if application is set to SQL. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <returns>Task of ApiResponse (ObjectSearchResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ObjectSearchResults>> SearchObjectsAsyncWithHttpInfo (List<long?> jobIds = null, List<long?> viewBoxIds = null, List<string> environments = null, long? startIndex = null, List<string> operatingSystems = null, string application = null, long? ownerEntityId = null, string search = null, List<long?> registeredSourceIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, long? pageCount = null)
        {

            var localVarPath = "/public/restore/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "jobIds", jobIds)); // query parameter
            if (viewBoxIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewBoxIds", viewBoxIds)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (operatingSystems != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "operatingSystems", operatingSystems)); // query parameter
            if (application != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application", application)); // query parameter
            if (ownerEntityId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ownerEntityId", ownerEntityId)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (registeredSourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "registeredSourceIds", registeredSourceIds)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ObjectSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ObjectSearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ObjectSearchResults)));
        }

        /// <summary>
        /// Search for files and folders to recover that match the specified search and filter criteria on the Cohesity Cluster. Use the files and folders returned by this operation to populate the list of files and folders to recover in the POST /public/restore/files operation. If no search pattern or filter parameters are specified, all files and folders currently found on the Cohesity Cluster are returned. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to files and folders that are found in the source objects (such as VMs).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="sourceIds">Filter by source ids. Only files and folders found in the listed sources (such as VMs) are returned. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <param name="folderOnly">Filter by folders or files. If true, only folders are returned. If false, only files are returned. If not specified, both files and folders are returned. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; or &#39;kGenericNas&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>FileSearchResults</returns>
        public FileSearchResults SearchRestoredFiles (long? startTimeUsecs = null, long? endTimeUsecs = null, List<long?> sourceIds = null, long? startIndex = null, long? pageCount = null, bool? folderOnly = null, string search = null, List<long?> jobIds = null, List<long?> registeredSourceIds = null, List<long?> viewBoxIds = null, List<string> environments = null)
        {
             ApiResponse<FileSearchResults> localVarResponse = SearchRestoredFilesWithHttpInfo(startTimeUsecs, endTimeUsecs, sourceIds, startIndex, pageCount, folderOnly, search, jobIds, registeredSourceIds, viewBoxIds, environments);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for files and folders to recover that match the specified search and filter criteria on the Cohesity Cluster. Use the files and folders returned by this operation to populate the list of files and folders to recover in the POST /public/restore/files operation. If no search pattern or filter parameters are specified, all files and folders currently found on the Cohesity Cluster are returned. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to files and folders that are found in the source objects (such as VMs).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="sourceIds">Filter by source ids. Only files and folders found in the listed sources (such as VMs) are returned. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <param name="folderOnly">Filter by folders or files. If true, only folders are returned. If false, only files are returned. If not specified, both files and folders are returned. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; or &#39;kGenericNas&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>ApiResponse of FileSearchResults</returns>
        public ApiResponse< FileSearchResults > SearchRestoredFilesWithHttpInfo (long? startTimeUsecs = null, long? endTimeUsecs = null, List<long?> sourceIds = null, long? startIndex = null, long? pageCount = null, bool? folderOnly = null, string search = null, List<long?> jobIds = null, List<long?> registeredSourceIds = null, List<long?> viewBoxIds = null, List<string> environments = null)
        {

            var localVarPath = "/public/restore/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sourceIds", sourceIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (folderOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderOnly", folderOnly)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (jobIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "jobIds", jobIds)); // query parameter
            if (registeredSourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "registeredSourceIds", registeredSourceIds)); // query parameter
            if (viewBoxIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewBoxIds", viewBoxIds)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchRestoredFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileSearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileSearchResults)));
        }

        /// <summary>
        /// Search for files and folders to recover that match the specified search and filter criteria on the Cohesity Cluster. Use the files and folders returned by this operation to populate the list of files and folders to recover in the POST /public/restore/files operation. If no search pattern or filter parameters are specified, all files and folders currently found on the Cohesity Cluster are returned. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to files and folders that are found in the source objects (such as VMs).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="sourceIds">Filter by source ids. Only files and folders found in the listed sources (such as VMs) are returned. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <param name="folderOnly">Filter by folders or files. If true, only folders are returned. If false, only files are returned. If not specified, both files and folders are returned. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; or &#39;kGenericNas&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of FileSearchResults</returns>
        public async System.Threading.Tasks.Task<FileSearchResults> SearchRestoredFilesAsync (long? startTimeUsecs = null, long? endTimeUsecs = null, List<long?> sourceIds = null, long? startIndex = null, long? pageCount = null, bool? folderOnly = null, string search = null, List<long?> jobIds = null, List<long?> registeredSourceIds = null, List<long?> viewBoxIds = null, List<string> environments = null)
        {
             ApiResponse<FileSearchResults> localVarResponse = await SearchRestoredFilesAsyncWithHttpInfo(startTimeUsecs, endTimeUsecs, sourceIds, startIndex, pageCount, folderOnly, search, jobIds, registeredSourceIds, viewBoxIds, environments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for files and folders to recover that match the specified search and filter criteria on the Cohesity Cluster. Use the files and folders returned by this operation to populate the list of files and folders to recover in the POST /public/restore/files operation. If no search pattern or filter parameters are specified, all files and folders currently found on the Cohesity Cluster are returned. Specify a search pattern or parameters to filter the results that are returned.  The term \&quot;items\&quot; below refers to files and folders that are found in the source objects (such as VMs).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeUsecs">Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="endTimeUsecs">Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned. (optional)</param>
        /// <param name="sourceIds">Filter by source ids. Only files and folders found in the listed sources (such as VMs) are returned. (optional)</param>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. (optional)</param>
        /// <param name="folderOnly">Filter by folders or files. If true, only folders are returned. If false, only files are returned. If not specified, both files and folders are returned. (optional)</param>
        /// <param name="search">Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \&quot;vm\&quot; or \&quot;123\&quot; both match the item name of \&quot;vm-123\&quot;. (optional)</param>
        /// <param name="jobIds">Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed. (optional)</param>
        /// <param name="registeredSourceIds">Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39; &#39;kNetapp&#39; or &#39;kGenericNas&#39;. Only items from the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of ApiResponse (FileSearchResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FileSearchResults>> SearchRestoredFilesAsyncWithHttpInfo (long? startTimeUsecs = null, long? endTimeUsecs = null, List<long?> sourceIds = null, long? startIndex = null, long? pageCount = null, bool? folderOnly = null, string search = null, List<long?> jobIds = null, List<long?> registeredSourceIds = null, List<long?> viewBoxIds = null, List<string> environments = null)
        {

            var localVarPath = "/public/restore/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (sourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sourceIds", sourceIds)); // query parameter
            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (folderOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "folderOnly", folderOnly)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (jobIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "jobIds", jobIds)); // query parameter
            if (registeredSourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "registeredSourceIds", registeredSourceIds)); // query parameter
            if (viewBoxIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewBoxIds", viewBoxIds)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchRestoredFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileSearchResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileSearchResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileSearchResults)));
        }

    }
}
