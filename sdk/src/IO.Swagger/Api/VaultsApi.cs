/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVaultsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns the created Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a new Vault.</param>
        /// <returns>Vault</returns>
        Vault CreateVault (Vault body);

        /// <summary>
        /// Create a new Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns the created Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a new Vault.</param>
        /// <returns>ApiResponse of Vault</returns>
        ApiResponse<Vault> CreateVaultWithHttpInfo (Vault body);
        /// <summary>
        /// Delete a Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns></returns>
        void DeleteVault (long? id);

        /// <summary>
        /// Delete a Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVaultWithHttpInfo (long? id);
        /// <summary>
        /// List the media information for the specified archive service.
        /// </summary>
        /// <remarks>
        /// Returns the media information about the specified archive service uid (such as a QStar tape archive service).  An archive service uid is uniquely identified using a combination of the following fields: clusterIncarnationId, entityIds and clusterId. These are all required fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarArchiveJobId">Specifies the id of the Job that archived to a QStar media Vault.</param>
        /// <param name="clusterId">Specifies the id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarRestoreTaskId">Specifies the id of the restore task to optionally filter by. The restore task that is restoring data from the specified media Vault. (optional)</param>
        /// <param name="entityIds">Specifies an array of entityIds to optionally filter by. An entityId is a unique id for a VM assigned by the Cohesity Cluster. (optional)</param>
        /// <returns>List&lt;TapeMediaInformation&gt;</returns>
        List<TapeMediaInformation> GetArchiveMediaInfo (long? clusterIncarnationId, long? qstarArchiveJobId, long? clusterId, long? qstarRestoreTaskId = null, List<long?> entityIds = null);

        /// <summary>
        /// List the media information for the specified archive service.
        /// </summary>
        /// <remarks>
        /// Returns the media information about the specified archive service uid (such as a QStar tape archive service).  An archive service uid is uniquely identified using a combination of the following fields: clusterIncarnationId, entityIds and clusterId. These are all required fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarArchiveJobId">Specifies the id of the Job that archived to a QStar media Vault.</param>
        /// <param name="clusterId">Specifies the id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarRestoreTaskId">Specifies the id of the restore task to optionally filter by. The restore task that is restoring data from the specified media Vault. (optional)</param>
        /// <param name="entityIds">Specifies an array of entityIds to optionally filter by. An entityId is a unique id for a VM assigned by the Cohesity Cluster. (optional)</param>
        /// <returns>ApiResponse of List&lt;TapeMediaInformation&gt;</returns>
        ApiResponse<List<TapeMediaInformation>> GetArchiveMediaInfoWithHttpInfo (long? clusterIncarnationId, long? qstarArchiveJobId, long? clusterId, long? qstarRestoreTaskId = null, List<long?> entityIds = null);
        /// <summary>
        /// List details about a single Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns the Vault corresponding to the specified Vault Id. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Vault</returns>
        Vault GetVaultById (long? id);

        /// <summary>
        /// List details about a single Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns the Vault corresponding to the specified Vault Id. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>ApiResponse of Vault</returns>
        ApiResponse<Vault> GetVaultByIdWithHttpInfo (long? id);
        /// <summary>
        /// Get encryption information for a Vault (External Target). A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <remarks>
        /// Get encryption information (such as the encryption key) for the specified Vault (External Target). To restore data to a remote Cluster (for example to support a disaster recovery scenario), you must get the encryption key of the Vault and store it outside the local source Cluster, before disaster strikes. If you have the encryption key and the local source Cluster goes down, you can restore the data to a remote Cluster from the Vault. The local source Cluster is the Cluster that archived the data on the Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>VaultEncryptionKey</returns>
        VaultEncryptionKey GetVaultEncryptionKeyInfo (long? id);

        /// <summary>
        /// Get encryption information for a Vault (External Target). A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <remarks>
        /// Get encryption information (such as the encryption key) for the specified Vault (External Target). To restore data to a remote Cluster (for example to support a disaster recovery scenario), you must get the encryption key of the Vault and store it outside the local source Cluster, before disaster strikes. If you have the encryption key and the local source Cluster goes down, you can restore the data to a remote Cluster from the Vault. The local source Cluster is the Cluster that archived the data on the Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>ApiResponse of VaultEncryptionKey</returns>
        ApiResponse<VaultEncryptionKey> GetVaultEncryptionKeyInfoWithHttpInfo (long? id);
        /// <summary>
        /// List the Vaults (External Targets) registered on the Cohesity Cluster filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Vaults (External Targets) currently registered on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the name of the Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <param name="includeMarkedForRemoval">Specifies if Vaults that are marked for removal should be returned. (optional)</param>
        /// <param name="id">Specifies the id of Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <returns>List&lt;Vault&gt;</returns>
        List<Vault> GetVaults (string name = null, bool? includeMarkedForRemoval = null, long? id = null);

        /// <summary>
        /// List the Vaults (External Targets) registered on the Cohesity Cluster filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Vaults (External Targets) currently registered on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the name of the Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <param name="includeMarkedForRemoval">Specifies if Vaults that are marked for removal should be returned. (optional)</param>
        /// <param name="id">Specifies the id of Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;Vault&gt;</returns>
        ApiResponse<List<Vault>> GetVaultsWithHttpInfo (string name = null, bool? includeMarkedForRemoval = null, long? id = null);
        /// <summary>
        /// Update a Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Update the settings of a Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard. Returns the updated Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to update a Vault&#39;s settings.</param>
        /// <returns>Vault</returns>
        Vault UpdateVault (long? id, Vault body);

        /// <summary>
        /// Update a Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Update the settings of a Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard. Returns the updated Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to update a Vault&#39;s settings.</param>
        /// <returns>ApiResponse of Vault</returns>
        ApiResponse<Vault> UpdateVaultWithHttpInfo (long? id, Vault body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns the created Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a new Vault.</param>
        /// <returns>Task of Vault</returns>
        System.Threading.Tasks.Task<Vault> CreateVaultAsync (Vault body);

        /// <summary>
        /// Create a new Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns the created Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a new Vault.</param>
        /// <returns>Task of ApiResponse (Vault)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vault>> CreateVaultAsyncWithHttpInfo (Vault body);
        /// <summary>
        /// Delete a Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVaultAsync (long? id);

        /// <summary>
        /// Delete a Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVaultAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List the media information for the specified archive service.
        /// </summary>
        /// <remarks>
        /// Returns the media information about the specified archive service uid (such as a QStar tape archive service).  An archive service uid is uniquely identified using a combination of the following fields: clusterIncarnationId, entityIds and clusterId. These are all required fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarArchiveJobId">Specifies the id of the Job that archived to a QStar media Vault.</param>
        /// <param name="clusterId">Specifies the id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarRestoreTaskId">Specifies the id of the restore task to optionally filter by. The restore task that is restoring data from the specified media Vault. (optional)</param>
        /// <param name="entityIds">Specifies an array of entityIds to optionally filter by. An entityId is a unique id for a VM assigned by the Cohesity Cluster. (optional)</param>
        /// <returns>Task of List&lt;TapeMediaInformation&gt;</returns>
        System.Threading.Tasks.Task<List<TapeMediaInformation>> GetArchiveMediaInfoAsync (long? clusterIncarnationId, long? qstarArchiveJobId, long? clusterId, long? qstarRestoreTaskId = null, List<long?> entityIds = null);

        /// <summary>
        /// List the media information for the specified archive service.
        /// </summary>
        /// <remarks>
        /// Returns the media information about the specified archive service uid (such as a QStar tape archive service).  An archive service uid is uniquely identified using a combination of the following fields: clusterIncarnationId, entityIds and clusterId. These are all required fields.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarArchiveJobId">Specifies the id of the Job that archived to a QStar media Vault.</param>
        /// <param name="clusterId">Specifies the id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarRestoreTaskId">Specifies the id of the restore task to optionally filter by. The restore task that is restoring data from the specified media Vault. (optional)</param>
        /// <param name="entityIds">Specifies an array of entityIds to optionally filter by. An entityId is a unique id for a VM assigned by the Cohesity Cluster. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TapeMediaInformation&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TapeMediaInformation>>> GetArchiveMediaInfoAsyncWithHttpInfo (long? clusterIncarnationId, long? qstarArchiveJobId, long? clusterId, long? qstarRestoreTaskId = null, List<long?> entityIds = null);
        /// <summary>
        /// List details about a single Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns the Vault corresponding to the specified Vault Id. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of Vault</returns>
        System.Threading.Tasks.Task<Vault> GetVaultByIdAsync (long? id);

        /// <summary>
        /// List details about a single Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Returns the Vault corresponding to the specified Vault Id. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of ApiResponse (Vault)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vault>> GetVaultByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Get encryption information for a Vault (External Target). A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <remarks>
        /// Get encryption information (such as the encryption key) for the specified Vault (External Target). To restore data to a remote Cluster (for example to support a disaster recovery scenario), you must get the encryption key of the Vault and store it outside the local source Cluster, before disaster strikes. If you have the encryption key and the local source Cluster goes down, you can restore the data to a remote Cluster from the Vault. The local source Cluster is the Cluster that archived the data on the Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of VaultEncryptionKey</returns>
        System.Threading.Tasks.Task<VaultEncryptionKey> GetVaultEncryptionKeyInfoAsync (long? id);

        /// <summary>
        /// Get encryption information for a Vault (External Target). A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <remarks>
        /// Get encryption information (such as the encryption key) for the specified Vault (External Target). To restore data to a remote Cluster (for example to support a disaster recovery scenario), you must get the encryption key of the Vault and store it outside the local source Cluster, before disaster strikes. If you have the encryption key and the local source Cluster goes down, you can restore the data to a remote Cluster from the Vault. The local source Cluster is the Cluster that archived the data on the Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of ApiResponse (VaultEncryptionKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<VaultEncryptionKey>> GetVaultEncryptionKeyInfoAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List the Vaults (External Targets) registered on the Cohesity Cluster filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Vaults (External Targets) currently registered on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the name of the Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <param name="includeMarkedForRemoval">Specifies if Vaults that are marked for removal should be returned. (optional)</param>
        /// <param name="id">Specifies the id of Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <returns>Task of List&lt;Vault&gt;</returns>
        System.Threading.Tasks.Task<List<Vault>> GetVaultsAsync (string name = null, bool? includeMarkedForRemoval = null, long? id = null);

        /// <summary>
        /// List the Vaults (External Targets) registered on the Cohesity Cluster filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Vaults (External Targets) currently registered on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the name of the Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <param name="includeMarkedForRemoval">Specifies if Vaults that are marked for removal should be returned. (optional)</param>
        /// <param name="id">Specifies the id of Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Vault&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Vault>>> GetVaultsAsyncWithHttpInfo (string name = null, bool? includeMarkedForRemoval = null, long? id = null);
        /// <summary>
        /// Update a Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Update the settings of a Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard. Returns the updated Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to update a Vault&#39;s settings.</param>
        /// <returns>Task of Vault</returns>
        System.Threading.Tasks.Task<Vault> UpdateVaultAsync (long? id, Vault body);

        /// <summary>
        /// Update a Vault (External Target).
        /// </summary>
        /// <remarks>
        /// Update the settings of a Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard. Returns the updated Vault.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to update a Vault&#39;s settings.</param>
        /// <returns>Task of ApiResponse (Vault)</returns>
        System.Threading.Tasks.Task<ApiResponse<Vault>> UpdateVaultAsyncWithHttpInfo (long? id, Vault body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VaultsApi : IVaultsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VaultsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VaultsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VaultsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new Vault (External Target). Returns the created Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a new Vault.</param>
        /// <returns>Vault</returns>
        public Vault CreateVault (Vault body)
        {
             ApiResponse<Vault> localVarResponse = CreateVaultWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Vault (External Target). Returns the created Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a new Vault.</param>
        /// <returns>ApiResponse of Vault</returns>
        public ApiResponse< Vault > CreateVaultWithHttpInfo (Vault body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VaultsApi->CreateVault");

            var localVarPath = "/public/vaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vault)));
        }

        /// <summary>
        /// Create a new Vault (External Target). Returns the created Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a new Vault.</param>
        /// <returns>Task of Vault</returns>
        public async System.Threading.Tasks.Task<Vault> CreateVaultAsync (Vault body)
        {
             ApiResponse<Vault> localVarResponse = await CreateVaultAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Vault (External Target). Returns the created Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a new Vault.</param>
        /// <returns>Task of ApiResponse (Vault)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Vault>> CreateVaultAsyncWithHttpInfo (Vault body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VaultsApi->CreateVault");

            var localVarPath = "/public/vaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vault)));
        }

        /// <summary>
        /// Delete a Vault (External Target). Returns delete status upon completion. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns></returns>
        public void DeleteVault (long? id)
        {
             DeleteVaultWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Vault (External Target). Returns delete status upon completion. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteVaultWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VaultsApi->DeleteVault");

            var localVarPath = "/public/vaults/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Vault (External Target). Returns delete status upon completion. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVaultAsync (long? id)
        {
             await DeleteVaultAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a Vault (External Target). Returns delete status upon completion. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVaultAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VaultsApi->DeleteVault");

            var localVarPath = "/public/vaults/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List the media information for the specified archive service. Returns the media information about the specified archive service uid (such as a QStar tape archive service).  An archive service uid is uniquely identified using a combination of the following fields: clusterIncarnationId, entityIds and clusterId. These are all required fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarArchiveJobId">Specifies the id of the Job that archived to a QStar media Vault.</param>
        /// <param name="clusterId">Specifies the id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarRestoreTaskId">Specifies the id of the restore task to optionally filter by. The restore task that is restoring data from the specified media Vault. (optional)</param>
        /// <param name="entityIds">Specifies an array of entityIds to optionally filter by. An entityId is a unique id for a VM assigned by the Cohesity Cluster. (optional)</param>
        /// <returns>List&lt;TapeMediaInformation&gt;</returns>
        public List<TapeMediaInformation> GetArchiveMediaInfo (long? clusterIncarnationId, long? qstarArchiveJobId, long? clusterId, long? qstarRestoreTaskId = null, List<long?> entityIds = null)
        {
             ApiResponse<List<TapeMediaInformation>> localVarResponse = GetArchiveMediaInfoWithHttpInfo(clusterIncarnationId, qstarArchiveJobId, clusterId, qstarRestoreTaskId, entityIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the media information for the specified archive service. Returns the media information about the specified archive service uid (such as a QStar tape archive service).  An archive service uid is uniquely identified using a combination of the following fields: clusterIncarnationId, entityIds and clusterId. These are all required fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarArchiveJobId">Specifies the id of the Job that archived to a QStar media Vault.</param>
        /// <param name="clusterId">Specifies the id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarRestoreTaskId">Specifies the id of the restore task to optionally filter by. The restore task that is restoring data from the specified media Vault. (optional)</param>
        /// <param name="entityIds">Specifies an array of entityIds to optionally filter by. An entityId is a unique id for a VM assigned by the Cohesity Cluster. (optional)</param>
        /// <returns>ApiResponse of List&lt;TapeMediaInformation&gt;</returns>
        public ApiResponse< List<TapeMediaInformation> > GetArchiveMediaInfoWithHttpInfo (long? clusterIncarnationId, long? qstarArchiveJobId, long? clusterId, long? qstarRestoreTaskId = null, List<long?> entityIds = null)
        {
            // verify the required parameter 'clusterIncarnationId' is set
            if (clusterIncarnationId == null)
                throw new ApiException(400, "Missing required parameter 'clusterIncarnationId' when calling VaultsApi->GetArchiveMediaInfo");
            // verify the required parameter 'qstarArchiveJobId' is set
            if (qstarArchiveJobId == null)
                throw new ApiException(400, "Missing required parameter 'qstarArchiveJobId' when calling VaultsApi->GetArchiveMediaInfo");
            // verify the required parameter 'clusterId' is set
            if (clusterId == null)
                throw new ApiException(400, "Missing required parameter 'clusterId' when calling VaultsApi->GetArchiveMediaInfo");

            var localVarPath = "/public/vaults/archiveMediaInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clusterIncarnationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterIncarnationId", clusterIncarnationId)); // query parameter
            if (qstarArchiveJobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "qstarArchiveJobId", qstarArchiveJobId)); // query parameter
            if (qstarRestoreTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "qstarRestoreTaskId", qstarRestoreTaskId)); // query parameter
            if (entityIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "entityIds", entityIds)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterId", clusterId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArchiveMediaInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TapeMediaInformation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TapeMediaInformation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TapeMediaInformation>)));
        }

        /// <summary>
        /// List the media information for the specified archive service. Returns the media information about the specified archive service uid (such as a QStar tape archive service).  An archive service uid is uniquely identified using a combination of the following fields: clusterIncarnationId, entityIds and clusterId. These are all required fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarArchiveJobId">Specifies the id of the Job that archived to a QStar media Vault.</param>
        /// <param name="clusterId">Specifies the id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarRestoreTaskId">Specifies the id of the restore task to optionally filter by. The restore task that is restoring data from the specified media Vault. (optional)</param>
        /// <param name="entityIds">Specifies an array of entityIds to optionally filter by. An entityId is a unique id for a VM assigned by the Cohesity Cluster. (optional)</param>
        /// <returns>Task of List&lt;TapeMediaInformation&gt;</returns>
        public async System.Threading.Tasks.Task<List<TapeMediaInformation>> GetArchiveMediaInfoAsync (long? clusterIncarnationId, long? qstarArchiveJobId, long? clusterId, long? qstarRestoreTaskId = null, List<long?> entityIds = null)
        {
             ApiResponse<List<TapeMediaInformation>> localVarResponse = await GetArchiveMediaInfoAsyncWithHttpInfo(clusterIncarnationId, qstarArchiveJobId, clusterId, qstarRestoreTaskId, entityIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the media information for the specified archive service. Returns the media information about the specified archive service uid (such as a QStar tape archive service).  An archive service uid is uniquely identified using a combination of the following fields: clusterIncarnationId, entityIds and clusterId. These are all required fields.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterIncarnationId">Specifies the incarnation id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarArchiveJobId">Specifies the id of the Job that archived to a QStar media Vault.</param>
        /// <param name="clusterId">Specifies the id of the Cohesity Cluster that archived to a QStar media Vault.</param>
        /// <param name="qstarRestoreTaskId">Specifies the id of the restore task to optionally filter by. The restore task that is restoring data from the specified media Vault. (optional)</param>
        /// <param name="entityIds">Specifies an array of entityIds to optionally filter by. An entityId is a unique id for a VM assigned by the Cohesity Cluster. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;TapeMediaInformation&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<TapeMediaInformation>>> GetArchiveMediaInfoAsyncWithHttpInfo (long? clusterIncarnationId, long? qstarArchiveJobId, long? clusterId, long? qstarRestoreTaskId = null, List<long?> entityIds = null)
        {
            // verify the required parameter 'clusterIncarnationId' is set
            if (clusterIncarnationId == null)
                throw new ApiException(400, "Missing required parameter 'clusterIncarnationId' when calling VaultsApi->GetArchiveMediaInfo");
            // verify the required parameter 'qstarArchiveJobId' is set
            if (qstarArchiveJobId == null)
                throw new ApiException(400, "Missing required parameter 'qstarArchiveJobId' when calling VaultsApi->GetArchiveMediaInfo");
            // verify the required parameter 'clusterId' is set
            if (clusterId == null)
                throw new ApiException(400, "Missing required parameter 'clusterId' when calling VaultsApi->GetArchiveMediaInfo");

            var localVarPath = "/public/vaults/archiveMediaInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clusterIncarnationId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterIncarnationId", clusterIncarnationId)); // query parameter
            if (qstarArchiveJobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "qstarArchiveJobId", qstarArchiveJobId)); // query parameter
            if (qstarRestoreTaskId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "qstarRestoreTaskId", qstarRestoreTaskId)); // query parameter
            if (entityIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "entityIds", entityIds)); // query parameter
            if (clusterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "clusterId", clusterId)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetArchiveMediaInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<TapeMediaInformation>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<TapeMediaInformation>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<TapeMediaInformation>)));
        }

        /// <summary>
        /// List details about a single Vault (External Target). Returns the Vault corresponding to the specified Vault Id. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Vault</returns>
        public Vault GetVaultById (long? id)
        {
             ApiResponse<Vault> localVarResponse = GetVaultByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single Vault (External Target). Returns the Vault corresponding to the specified Vault Id. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>ApiResponse of Vault</returns>
        public ApiResponse< Vault > GetVaultByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VaultsApi->GetVaultById");

            var localVarPath = "/public/vaults/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVaultById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vault)));
        }

        /// <summary>
        /// List details about a single Vault (External Target). Returns the Vault corresponding to the specified Vault Id. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of Vault</returns>
        public async System.Threading.Tasks.Task<Vault> GetVaultByIdAsync (long? id)
        {
             ApiResponse<Vault> localVarResponse = await GetVaultByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single Vault (External Target). Returns the Vault corresponding to the specified Vault Id. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of ApiResponse (Vault)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Vault>> GetVaultByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VaultsApi->GetVaultById");

            var localVarPath = "/public/vaults/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVaultById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vault)));
        }

        /// <summary>
        /// Get encryption information for a Vault (External Target). A Vault is equivalent to an External Target in the Cohesity Dashboard. Get encryption information (such as the encryption key) for the specified Vault (External Target). To restore data to a remote Cluster (for example to support a disaster recovery scenario), you must get the encryption key of the Vault and store it outside the local source Cluster, before disaster strikes. If you have the encryption key and the local source Cluster goes down, you can restore the data to a remote Cluster from the Vault. The local source Cluster is the Cluster that archived the data on the Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>VaultEncryptionKey</returns>
        public VaultEncryptionKey GetVaultEncryptionKeyInfo (long? id)
        {
             ApiResponse<VaultEncryptionKey> localVarResponse = GetVaultEncryptionKeyInfoWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get encryption information for a Vault (External Target). A Vault is equivalent to an External Target in the Cohesity Dashboard. Get encryption information (such as the encryption key) for the specified Vault (External Target). To restore data to a remote Cluster (for example to support a disaster recovery scenario), you must get the encryption key of the Vault and store it outside the local source Cluster, before disaster strikes. If you have the encryption key and the local source Cluster goes down, you can restore the data to a remote Cluster from the Vault. The local source Cluster is the Cluster that archived the data on the Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>ApiResponse of VaultEncryptionKey</returns>
        public ApiResponse< VaultEncryptionKey > GetVaultEncryptionKeyInfoWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VaultsApi->GetVaultEncryptionKeyInfo");

            var localVarPath = "/public/vaults/encryptionKey/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVaultEncryptionKeyInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VaultEncryptionKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VaultEncryptionKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VaultEncryptionKey)));
        }

        /// <summary>
        /// Get encryption information for a Vault (External Target). A Vault is equivalent to an External Target in the Cohesity Dashboard. Get encryption information (such as the encryption key) for the specified Vault (External Target). To restore data to a remote Cluster (for example to support a disaster recovery scenario), you must get the encryption key of the Vault and store it outside the local source Cluster, before disaster strikes. If you have the encryption key and the local source Cluster goes down, you can restore the data to a remote Cluster from the Vault. The local source Cluster is the Cluster that archived the data on the Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of VaultEncryptionKey</returns>
        public async System.Threading.Tasks.Task<VaultEncryptionKey> GetVaultEncryptionKeyInfoAsync (long? id)
        {
             ApiResponse<VaultEncryptionKey> localVarResponse = await GetVaultEncryptionKeyInfoAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get encryption information for a Vault (External Target). A Vault is equivalent to an External Target in the Cohesity Dashboard. Get encryption information (such as the encryption key) for the specified Vault (External Target). To restore data to a remote Cluster (for example to support a disaster recovery scenario), you must get the encryption key of the Vault and store it outside the local source Cluster, before disaster strikes. If you have the encryption key and the local source Cluster goes down, you can restore the data to a remote Cluster from the Vault. The local source Cluster is the Cluster that archived the data on the Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <returns>Task of ApiResponse (VaultEncryptionKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VaultEncryptionKey>> GetVaultEncryptionKeyInfoAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VaultsApi->GetVaultEncryptionKeyInfo");

            var localVarPath = "/public/vaults/encryptionKey/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVaultEncryptionKeyInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VaultEncryptionKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (VaultEncryptionKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VaultEncryptionKey)));
        }

        /// <summary>
        /// List the Vaults (External Targets) registered on the Cohesity Cluster filtered by the specified parameters. If no parameters are specified, all Vaults (External Targets) currently registered on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the name of the Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <param name="includeMarkedForRemoval">Specifies if Vaults that are marked for removal should be returned. (optional)</param>
        /// <param name="id">Specifies the id of Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <returns>List&lt;Vault&gt;</returns>
        public List<Vault> GetVaults (string name = null, bool? includeMarkedForRemoval = null, long? id = null)
        {
             ApiResponse<List<Vault>> localVarResponse = GetVaultsWithHttpInfo(name, includeMarkedForRemoval, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the Vaults (External Targets) registered on the Cohesity Cluster filtered by the specified parameters. If no parameters are specified, all Vaults (External Targets) currently registered on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the name of the Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <param name="includeMarkedForRemoval">Specifies if Vaults that are marked for removal should be returned. (optional)</param>
        /// <param name="id">Specifies the id of Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;Vault&gt;</returns>
        public ApiResponse< List<Vault> > GetVaultsWithHttpInfo (string name = null, bool? includeMarkedForRemoval = null, long? id = null)
        {

            var localVarPath = "/public/vaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (includeMarkedForRemoval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMarkedForRemoval", includeMarkedForRemoval)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVaults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vault>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Vault>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vault>)));
        }

        /// <summary>
        /// List the Vaults (External Targets) registered on the Cohesity Cluster filtered by the specified parameters. If no parameters are specified, all Vaults (External Targets) currently registered on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the name of the Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <param name="includeMarkedForRemoval">Specifies if Vaults that are marked for removal should be returned. (optional)</param>
        /// <param name="id">Specifies the id of Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <returns>Task of List&lt;Vault&gt;</returns>
        public async System.Threading.Tasks.Task<List<Vault>> GetVaultsAsync (string name = null, bool? includeMarkedForRemoval = null, long? id = null)
        {
             ApiResponse<List<Vault>> localVarResponse = await GetVaultsAsyncWithHttpInfo(name, includeMarkedForRemoval, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the Vaults (External Targets) registered on the Cohesity Cluster filtered by the specified parameters. If no parameters are specified, all Vaults (External Targets) currently registered on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. A Vault is equivalent to an External Target in the Cohesity Dashboard.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the name of the Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <param name="includeMarkedForRemoval">Specifies if Vaults that are marked for removal should be returned. (optional)</param>
        /// <param name="id">Specifies the id of Vault to return. If empty, all Vaults are returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Vault&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Vault>>> GetVaultsAsyncWithHttpInfo (string name = null, bool? includeMarkedForRemoval = null, long? id = null)
        {

            var localVarPath = "/public/vaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (includeMarkedForRemoval != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeMarkedForRemoval", includeMarkedForRemoval)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVaults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Vault>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Vault>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Vault>)));
        }

        /// <summary>
        /// Update a Vault (External Target). Update the settings of a Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard. Returns the updated Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to update a Vault&#39;s settings.</param>
        /// <returns>Vault</returns>
        public Vault UpdateVault (long? id, Vault body)
        {
             ApiResponse<Vault> localVarResponse = UpdateVaultWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Vault (External Target). Update the settings of a Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard. Returns the updated Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to update a Vault&#39;s settings.</param>
        /// <returns>ApiResponse of Vault</returns>
        public ApiResponse< Vault > UpdateVaultWithHttpInfo (long? id, Vault body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VaultsApi->UpdateVault");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VaultsApi->UpdateVault");

            var localVarPath = "/public/vaults/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vault)));
        }

        /// <summary>
        /// Update a Vault (External Target). Update the settings of a Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard. Returns the updated Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to update a Vault&#39;s settings.</param>
        /// <returns>Task of Vault</returns>
        public async System.Threading.Tasks.Task<Vault> UpdateVaultAsync (long? id, Vault body)
        {
             ApiResponse<Vault> localVarResponse = await UpdateVaultAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Vault (External Target). Update the settings of a Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard. Returns the updated Vault.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Vault.</param>
        /// <param name="body">Request to update a Vault&#39;s settings.</param>
        /// <returns>Task of ApiResponse (Vault)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Vault>> UpdateVaultAsyncWithHttpInfo (long? id, Vault body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VaultsApi->UpdateVault");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling VaultsApi->UpdateVault");

            var localVarPath = "/public/vaults/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateVault", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Vault>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Vault) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Vault)));
        }

    }
}
