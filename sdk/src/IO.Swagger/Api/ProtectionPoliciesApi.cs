/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProtectionPoliciesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the created Protection Policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Policy.</param>
        /// <returns>ProtectionPolicy</returns>
        ProtectionPolicy CreateProtectionPolicy (ProtectionPolicyRequest body);

        /// <summary>
        /// Create a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the created Protection Policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Policy.</param>
        /// <returns>ApiResponse of ProtectionPolicy</returns>
        ApiResponse<ProtectionPolicy> CreateProtectionPolicyWithHttpInfo (ProtectionPolicyRequest body);
        /// <summary>
        /// Delete a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns Success if the Protection Policy is deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns></returns>
        void DeleteProtectionPolicy (string id);

        /// <summary>
        /// Delete a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns Success if the Protection Policy is deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProtectionPolicyWithHttpInfo (string id);
        /// <summary>
        /// List Protection Policies filtered by some parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Policies currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environments">Filter by Environment type such as &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39; &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39; Only Policies protecting the specified environment type are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Policy ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Policy names. (optional)</param>
        /// <returns>List&lt;ProtectionPolicy&gt;</returns>
        List<ProtectionPolicy> GetProtectionPolicies (List<string> environments = null, List<string> ids = null, List<string> names = null);

        /// <summary>
        /// List Protection Policies filtered by some parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Policies currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environments">Filter by Environment type such as &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39; &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39; Only Policies protecting the specified environment type are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Policy ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Policy names. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionPolicy&gt;</returns>
        ApiResponse<List<ProtectionPolicy>> GetProtectionPoliciesWithHttpInfo (List<string> environments = null, List<string> ids = null, List<string> names = null);
        /// <summary>
        /// List details about a single Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Policy corresponding to the specified Policy Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>ProtectionPolicy</returns>
        ProtectionPolicy GetProtectionPolicyById (string id);

        /// <summary>
        /// List details about a single Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Policy corresponding to the specified Policy Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>ApiResponse of ProtectionPolicy</returns>
        ApiResponse<ProtectionPolicy> GetProtectionPolicyByIdWithHttpInfo (string id);
        /// <summary>
        /// Update a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the updated Protection Policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a Protection Policy.</param>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>ProtectionPolicy</returns>
        ProtectionPolicy UpdateProtectionPolicy (ProtectionPolicyRequest body, string id);

        /// <summary>
        /// Update a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the updated Protection Policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a Protection Policy.</param>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>ApiResponse of ProtectionPolicy</returns>
        ApiResponse<ProtectionPolicy> UpdateProtectionPolicyWithHttpInfo (ProtectionPolicyRequest body, string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the created Protection Policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Policy.</param>
        /// <returns>Task of ProtectionPolicy</returns>
        System.Threading.Tasks.Task<ProtectionPolicy> CreateProtectionPolicyAsync (ProtectionPolicyRequest body);

        /// <summary>
        /// Create a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the created Protection Policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Policy.</param>
        /// <returns>Task of ApiResponse (ProtectionPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionPolicy>> CreateProtectionPolicyAsyncWithHttpInfo (ProtectionPolicyRequest body);
        /// <summary>
        /// Delete a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns Success if the Protection Policy is deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProtectionPolicyAsync (string id);

        /// <summary>
        /// Delete a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns Success if the Protection Policy is deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProtectionPolicyAsyncWithHttpInfo (string id);
        /// <summary>
        /// List Protection Policies filtered by some parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Policies currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environments">Filter by Environment type such as &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39; &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39; Only Policies protecting the specified environment type are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Policy ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Policy names. (optional)</param>
        /// <returns>Task of List&lt;ProtectionPolicy&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectionPolicy>> GetProtectionPoliciesAsync (List<string> environments = null, List<string> ids = null, List<string> names = null);

        /// <summary>
        /// List Protection Policies filtered by some parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Policies currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environments">Filter by Environment type such as &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39; &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39; Only Policies protecting the specified environment type are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Policy ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Policy names. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionPolicy&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectionPolicy>>> GetProtectionPoliciesAsyncWithHttpInfo (List<string> environments = null, List<string> ids = null, List<string> names = null);
        /// <summary>
        /// List details about a single Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Policy corresponding to the specified Policy Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of ProtectionPolicy</returns>
        System.Threading.Tasks.Task<ProtectionPolicy> GetProtectionPolicyByIdAsync (string id);

        /// <summary>
        /// List details about a single Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Policy corresponding to the specified Policy Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of ApiResponse (ProtectionPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionPolicy>> GetProtectionPolicyByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// Update a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the updated Protection Policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a Protection Policy.</param>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of ProtectionPolicy</returns>
        System.Threading.Tasks.Task<ProtectionPolicy> UpdateProtectionPolicyAsync (ProtectionPolicyRequest body, string id);

        /// <summary>
        /// Update a Protection Policy.
        /// </summary>
        /// <remarks>
        /// Returns the updated Protection Policy.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a Protection Policy.</param>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of ApiResponse (ProtectionPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionPolicy>> UpdateProtectionPolicyAsyncWithHttpInfo (ProtectionPolicyRequest body, string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProtectionPoliciesApi : IProtectionPoliciesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectionPoliciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProtectionPoliciesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectionPoliciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProtectionPoliciesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a Protection Policy. Returns the created Protection Policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Policy.</param>
        /// <returns>ProtectionPolicy</returns>
        public ProtectionPolicy CreateProtectionPolicy (ProtectionPolicyRequest body)
        {
             ApiResponse<ProtectionPolicy> localVarResponse = CreateProtectionPolicyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Protection Policy. Returns the created Protection Policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Policy.</param>
        /// <returns>ApiResponse of ProtectionPolicy</returns>
        public ApiResponse< ProtectionPolicy > CreateProtectionPolicyWithHttpInfo (ProtectionPolicyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionPoliciesApi->CreateProtectionPolicy");

            var localVarPath = "/public/protectionPolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProtectionPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionPolicy)));
        }

        /// <summary>
        /// Create a Protection Policy. Returns the created Protection Policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Policy.</param>
        /// <returns>Task of ProtectionPolicy</returns>
        public async System.Threading.Tasks.Task<ProtectionPolicy> CreateProtectionPolicyAsync (ProtectionPolicyRequest body)
        {
             ApiResponse<ProtectionPolicy> localVarResponse = await CreateProtectionPolicyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Protection Policy. Returns the created Protection Policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Policy.</param>
        /// <returns>Task of ApiResponse (ProtectionPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionPolicy>> CreateProtectionPolicyAsyncWithHttpInfo (ProtectionPolicyRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionPoliciesApi->CreateProtectionPolicy");

            var localVarPath = "/public/protectionPolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProtectionPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionPolicy)));
        }

        /// <summary>
        /// Delete a Protection Policy. Returns Success if the Protection Policy is deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns></returns>
        public void DeleteProtectionPolicy (string id)
        {
             DeleteProtectionPolicyWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a Protection Policy. Returns Success if the Protection Policy is deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProtectionPolicyWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionPoliciesApi->DeleteProtectionPolicy");

            var localVarPath = "/public/protectionPolicies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProtectionPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Protection Policy. Returns Success if the Protection Policy is deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProtectionPolicyAsync (string id)
        {
             await DeleteProtectionPolicyAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a Protection Policy. Returns Success if the Protection Policy is deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProtectionPolicyAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionPoliciesApi->DeleteProtectionPolicy");

            var localVarPath = "/public/protectionPolicies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProtectionPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List Protection Policies filtered by some parameters. If no parameters are specified, all Protection Policies currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environments">Filter by Environment type such as &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39; &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39; Only Policies protecting the specified environment type are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Policy ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Policy names. (optional)</param>
        /// <returns>List&lt;ProtectionPolicy&gt;</returns>
        public List<ProtectionPolicy> GetProtectionPolicies (List<string> environments = null, List<string> ids = null, List<string> names = null)
        {
             ApiResponse<List<ProtectionPolicy>> localVarResponse = GetProtectionPoliciesWithHttpInfo(environments, ids, names);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Protection Policies filtered by some parameters. If no parameters are specified, all Protection Policies currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environments">Filter by Environment type such as &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39; &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39; Only Policies protecting the specified environment type are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Policy ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Policy names. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionPolicy&gt;</returns>
        public ApiResponse< List<ProtectionPolicy> > GetProtectionPoliciesWithHttpInfo (List<string> environments = null, List<string> ids = null, List<string> names = null)
        {

            var localVarPath = "/public/protectionPolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "names", names)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionPolicy>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionPolicy>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionPolicy>)));
        }

        /// <summary>
        /// List Protection Policies filtered by some parameters. If no parameters are specified, all Protection Policies currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environments">Filter by Environment type such as &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39; &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39; Only Policies protecting the specified environment type are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Policy ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Policy names. (optional)</param>
        /// <returns>Task of List&lt;ProtectionPolicy&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectionPolicy>> GetProtectionPoliciesAsync (List<string> environments = null, List<string> ids = null, List<string> names = null)
        {
             ApiResponse<List<ProtectionPolicy>> localVarResponse = await GetProtectionPoliciesAsyncWithHttpInfo(environments, ids, names);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Protection Policies filtered by some parameters. If no parameters are specified, all Protection Policies currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environments">Filter by Environment type such as &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39; &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39; Only Policies protecting the specified environment type are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Policy ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Policy names. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionPolicy&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectionPolicy>>> GetProtectionPoliciesAsyncWithHttpInfo (List<string> environments = null, List<string> ids = null, List<string> names = null)
        {

            var localVarPath = "/public/protectionPolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "names", names)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionPolicies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionPolicy>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionPolicy>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionPolicy>)));
        }

        /// <summary>
        /// List details about a single Protection Policy. Returns the Protection Policy corresponding to the specified Policy Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>ProtectionPolicy</returns>
        public ProtectionPolicy GetProtectionPolicyById (string id)
        {
             ApiResponse<ProtectionPolicy> localVarResponse = GetProtectionPolicyByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single Protection Policy. Returns the Protection Policy corresponding to the specified Policy Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>ApiResponse of ProtectionPolicy</returns>
        public ApiResponse< ProtectionPolicy > GetProtectionPolicyByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionPoliciesApi->GetProtectionPolicyById");

            var localVarPath = "/public/protectionPolicies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionPolicyById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionPolicy)));
        }

        /// <summary>
        /// List details about a single Protection Policy. Returns the Protection Policy corresponding to the specified Policy Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of ProtectionPolicy</returns>
        public async System.Threading.Tasks.Task<ProtectionPolicy> GetProtectionPolicyByIdAsync (string id)
        {
             ApiResponse<ProtectionPolicy> localVarResponse = await GetProtectionPolicyByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single Protection Policy. Returns the Protection Policy corresponding to the specified Policy Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of ApiResponse (ProtectionPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionPolicy>> GetProtectionPolicyByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionPoliciesApi->GetProtectionPolicyById");

            var localVarPath = "/public/protectionPolicies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionPolicyById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionPolicy)));
        }

        /// <summary>
        /// Update a Protection Policy. Returns the updated Protection Policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a Protection Policy.</param>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>ProtectionPolicy</returns>
        public ProtectionPolicy UpdateProtectionPolicy (ProtectionPolicyRequest body, string id)
        {
             ApiResponse<ProtectionPolicy> localVarResponse = UpdateProtectionPolicyWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Protection Policy. Returns the updated Protection Policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a Protection Policy.</param>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>ApiResponse of ProtectionPolicy</returns>
        public ApiResponse< ProtectionPolicy > UpdateProtectionPolicyWithHttpInfo (ProtectionPolicyRequest body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionPoliciesApi->UpdateProtectionPolicy");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionPoliciesApi->UpdateProtectionPolicy");

            var localVarPath = "/public/protectionPolicies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProtectionPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionPolicy)));
        }

        /// <summary>
        /// Update a Protection Policy. Returns the updated Protection Policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a Protection Policy.</param>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of ProtectionPolicy</returns>
        public async System.Threading.Tasks.Task<ProtectionPolicy> UpdateProtectionPolicyAsync (ProtectionPolicyRequest body, string id)
        {
             ApiResponse<ProtectionPolicy> localVarResponse = await UpdateProtectionPolicyAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Protection Policy. Returns the updated Protection Policy.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a Protection Policy.</param>
        /// <param name="id">Specifies a unique id of the Protection Policy to return.</param>
        /// <returns>Task of ApiResponse (ProtectionPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionPolicy>> UpdateProtectionPolicyAsyncWithHttpInfo (ProtectionPolicyRequest body, string id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionPoliciesApi->UpdateProtectionPolicy");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionPoliciesApi->UpdateProtectionPolicy");

            var localVarPath = "/public/protectionPolicies/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProtectionPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionPolicy) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionPolicy)));
        }

    }
}
