/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuditApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List the cluster audit logs on the Cohesity Cluster that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// When actions (such as a login or a Job being paused) occur on the Cohesity Cluster, the Cluster generates Audit Logs. If no parameters are specified, all logs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and startIndex to return a subsets of items in the search result. For example, set startIndex to 0 to get the first set of pageCount items for the first request. Increment startIndex by pageCount to get the next set of pageCount items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. Default value is 0. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. Default value is 1000. (optional)</param>
        /// <param name="domains">Filter by domains of users who cause the actions that trigger Cluster audit logs. (optional)</param>
        /// <param name="entityTypes">Filter by entity types involved in the actions that generate the Cluster audit logs, such as User, Protection Job, View, etc. For a complete list, see the Category drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="actions">Filter by the actions that generate Cluster audit logs such as Activate, Cancel, Clone, Create, etc. For a complete list, see the Actions drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="search">Filter by matching a substring in entity name or details of the Cluster audit log. (optional)</param>
        /// <param name="userNames">Filter by user names who cause the actions that generate Cluster Audit Logs. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Cluster audit logs that were generated after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Cluster audit logs that were generated before the specified end time are returned. (optional)</param>
        /// <param name="outputFormat">Specifies the format of the output such as csv and json. If not specified, the json format is returned. If csv is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>ClusterAuditLogsSearchResult</returns>
        ClusterAuditLogsSearchResult SearchClusterAuditLogs (long? startIndex = null, long? pageCount = null, List<string> domains = null, List<string> entityTypes = null, List<string> actions = null, string search = null, List<string> userNames = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string outputFormat = null);

        /// <summary>
        /// List the cluster audit logs on the Cohesity Cluster that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// When actions (such as a login or a Job being paused) occur on the Cohesity Cluster, the Cluster generates Audit Logs. If no parameters are specified, all logs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and startIndex to return a subsets of items in the search result. For example, set startIndex to 0 to get the first set of pageCount items for the first request. Increment startIndex by pageCount to get the next set of pageCount items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. Default value is 0. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. Default value is 1000. (optional)</param>
        /// <param name="domains">Filter by domains of users who cause the actions that trigger Cluster audit logs. (optional)</param>
        /// <param name="entityTypes">Filter by entity types involved in the actions that generate the Cluster audit logs, such as User, Protection Job, View, etc. For a complete list, see the Category drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="actions">Filter by the actions that generate Cluster audit logs such as Activate, Cancel, Clone, Create, etc. For a complete list, see the Actions drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="search">Filter by matching a substring in entity name or details of the Cluster audit log. (optional)</param>
        /// <param name="userNames">Filter by user names who cause the actions that generate Cluster Audit Logs. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Cluster audit logs that were generated after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Cluster audit logs that were generated before the specified end time are returned. (optional)</param>
        /// <param name="outputFormat">Specifies the format of the output such as csv and json. If not specified, the json format is returned. If csv is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>ApiResponse of ClusterAuditLogsSearchResult</returns>
        ApiResponse<ClusterAuditLogsSearchResult> SearchClusterAuditLogsWithHttpInfo (long? startIndex = null, long? pageCount = null, List<string> domains = null, List<string> entityTypes = null, List<string> actions = null, string search = null, List<string> userNames = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string outputFormat = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List the cluster audit logs on the Cohesity Cluster that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// When actions (such as a login or a Job being paused) occur on the Cohesity Cluster, the Cluster generates Audit Logs. If no parameters are specified, all logs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and startIndex to return a subsets of items in the search result. For example, set startIndex to 0 to get the first set of pageCount items for the first request. Increment startIndex by pageCount to get the next set of pageCount items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. Default value is 0. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. Default value is 1000. (optional)</param>
        /// <param name="domains">Filter by domains of users who cause the actions that trigger Cluster audit logs. (optional)</param>
        /// <param name="entityTypes">Filter by entity types involved in the actions that generate the Cluster audit logs, such as User, Protection Job, View, etc. For a complete list, see the Category drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="actions">Filter by the actions that generate Cluster audit logs such as Activate, Cancel, Clone, Create, etc. For a complete list, see the Actions drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="search">Filter by matching a substring in entity name or details of the Cluster audit log. (optional)</param>
        /// <param name="userNames">Filter by user names who cause the actions that generate Cluster Audit Logs. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Cluster audit logs that were generated after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Cluster audit logs that were generated before the specified end time are returned. (optional)</param>
        /// <param name="outputFormat">Specifies the format of the output such as csv and json. If not specified, the json format is returned. If csv is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>Task of ClusterAuditLogsSearchResult</returns>
        System.Threading.Tasks.Task<ClusterAuditLogsSearchResult> SearchClusterAuditLogsAsync (long? startIndex = null, long? pageCount = null, List<string> domains = null, List<string> entityTypes = null, List<string> actions = null, string search = null, List<string> userNames = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string outputFormat = null);

        /// <summary>
        /// List the cluster audit logs on the Cohesity Cluster that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// When actions (such as a login or a Job being paused) occur on the Cohesity Cluster, the Cluster generates Audit Logs. If no parameters are specified, all logs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and startIndex to return a subsets of items in the search result. For example, set startIndex to 0 to get the first set of pageCount items for the first request. Increment startIndex by pageCount to get the next set of pageCount items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. Default value is 0. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. Default value is 1000. (optional)</param>
        /// <param name="domains">Filter by domains of users who cause the actions that trigger Cluster audit logs. (optional)</param>
        /// <param name="entityTypes">Filter by entity types involved in the actions that generate the Cluster audit logs, such as User, Protection Job, View, etc. For a complete list, see the Category drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="actions">Filter by the actions that generate Cluster audit logs such as Activate, Cancel, Clone, Create, etc. For a complete list, see the Actions drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="search">Filter by matching a substring in entity name or details of the Cluster audit log. (optional)</param>
        /// <param name="userNames">Filter by user names who cause the actions that generate Cluster Audit Logs. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Cluster audit logs that were generated after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Cluster audit logs that were generated before the specified end time are returned. (optional)</param>
        /// <param name="outputFormat">Specifies the format of the output such as csv and json. If not specified, the json format is returned. If csv is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>Task of ApiResponse (ClusterAuditLogsSearchResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClusterAuditLogsSearchResult>> SearchClusterAuditLogsAsyncWithHttpInfo (long? startIndex = null, long? pageCount = null, List<string> domains = null, List<string> entityTypes = null, List<string> actions = null, string search = null, List<string> userNames = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string outputFormat = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuditApi : IAuditApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuditApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuditApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuditApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List the cluster audit logs on the Cohesity Cluster that match the filter criteria specified using parameters. When actions (such as a login or a Job being paused) occur on the Cohesity Cluster, the Cluster generates Audit Logs. If no parameters are specified, all logs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and startIndex to return a subsets of items in the search result. For example, set startIndex to 0 to get the first set of pageCount items for the first request. Increment startIndex by pageCount to get the next set of pageCount items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. Default value is 0. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. Default value is 1000. (optional)</param>
        /// <param name="domains">Filter by domains of users who cause the actions that trigger Cluster audit logs. (optional)</param>
        /// <param name="entityTypes">Filter by entity types involved in the actions that generate the Cluster audit logs, such as User, Protection Job, View, etc. For a complete list, see the Category drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="actions">Filter by the actions that generate Cluster audit logs such as Activate, Cancel, Clone, Create, etc. For a complete list, see the Actions drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="search">Filter by matching a substring in entity name or details of the Cluster audit log. (optional)</param>
        /// <param name="userNames">Filter by user names who cause the actions that generate Cluster Audit Logs. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Cluster audit logs that were generated after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Cluster audit logs that were generated before the specified end time are returned. (optional)</param>
        /// <param name="outputFormat">Specifies the format of the output such as csv and json. If not specified, the json format is returned. If csv is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>ClusterAuditLogsSearchResult</returns>
        public ClusterAuditLogsSearchResult SearchClusterAuditLogs (long? startIndex = null, long? pageCount = null, List<string> domains = null, List<string> entityTypes = null, List<string> actions = null, string search = null, List<string> userNames = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string outputFormat = null)
        {
             ApiResponse<ClusterAuditLogsSearchResult> localVarResponse = SearchClusterAuditLogsWithHttpInfo(startIndex, pageCount, domains, entityTypes, actions, search, userNames, startTimeUsecs, endTimeUsecs, outputFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the cluster audit logs on the Cohesity Cluster that match the filter criteria specified using parameters. When actions (such as a login or a Job being paused) occur on the Cohesity Cluster, the Cluster generates Audit Logs. If no parameters are specified, all logs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and startIndex to return a subsets of items in the search result. For example, set startIndex to 0 to get the first set of pageCount items for the first request. Increment startIndex by pageCount to get the next set of pageCount items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. Default value is 0. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. Default value is 1000. (optional)</param>
        /// <param name="domains">Filter by domains of users who cause the actions that trigger Cluster audit logs. (optional)</param>
        /// <param name="entityTypes">Filter by entity types involved in the actions that generate the Cluster audit logs, such as User, Protection Job, View, etc. For a complete list, see the Category drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="actions">Filter by the actions that generate Cluster audit logs such as Activate, Cancel, Clone, Create, etc. For a complete list, see the Actions drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="search">Filter by matching a substring in entity name or details of the Cluster audit log. (optional)</param>
        /// <param name="userNames">Filter by user names who cause the actions that generate Cluster Audit Logs. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Cluster audit logs that were generated after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Cluster audit logs that were generated before the specified end time are returned. (optional)</param>
        /// <param name="outputFormat">Specifies the format of the output such as csv and json. If not specified, the json format is returned. If csv is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>ApiResponse of ClusterAuditLogsSearchResult</returns>
        public ApiResponse< ClusterAuditLogsSearchResult > SearchClusterAuditLogsWithHttpInfo (long? startIndex = null, long? pageCount = null, List<string> domains = null, List<string> entityTypes = null, List<string> actions = null, string search = null, List<string> userNames = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string outputFormat = null)
        {

            var localVarPath = "/public/auditLogs/cluster";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (domains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "domains", domains)); // query parameter
            if (entityTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "entityTypes", entityTypes)); // query parameter
            if (actions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "actions", actions)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (userNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "userNames", userNames)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchClusterAuditLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusterAuditLogsSearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClusterAuditLogsSearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusterAuditLogsSearchResult)));
        }

        /// <summary>
        /// List the cluster audit logs on the Cohesity Cluster that match the filter criteria specified using parameters. When actions (such as a login or a Job being paused) occur on the Cohesity Cluster, the Cluster generates Audit Logs. If no parameters are specified, all logs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and startIndex to return a subsets of items in the search result. For example, set startIndex to 0 to get the first set of pageCount items for the first request. Increment startIndex by pageCount to get the next set of pageCount items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. Default value is 0. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. Default value is 1000. (optional)</param>
        /// <param name="domains">Filter by domains of users who cause the actions that trigger Cluster audit logs. (optional)</param>
        /// <param name="entityTypes">Filter by entity types involved in the actions that generate the Cluster audit logs, such as User, Protection Job, View, etc. For a complete list, see the Category drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="actions">Filter by the actions that generate Cluster audit logs such as Activate, Cancel, Clone, Create, etc. For a complete list, see the Actions drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="search">Filter by matching a substring in entity name or details of the Cluster audit log. (optional)</param>
        /// <param name="userNames">Filter by user names who cause the actions that generate Cluster Audit Logs. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Cluster audit logs that were generated after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Cluster audit logs that were generated before the specified end time are returned. (optional)</param>
        /// <param name="outputFormat">Specifies the format of the output such as csv and json. If not specified, the json format is returned. If csv is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>Task of ClusterAuditLogsSearchResult</returns>
        public async System.Threading.Tasks.Task<ClusterAuditLogsSearchResult> SearchClusterAuditLogsAsync (long? startIndex = null, long? pageCount = null, List<string> domains = null, List<string> entityTypes = null, List<string> actions = null, string search = null, List<string> userNames = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string outputFormat = null)
        {
             ApiResponse<ClusterAuditLogsSearchResult> localVarResponse = await SearchClusterAuditLogsAsyncWithHttpInfo(startIndex, pageCount, domains, entityTypes, actions, search, userNames, startTimeUsecs, endTimeUsecs, outputFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the cluster audit logs on the Cohesity Cluster that match the filter criteria specified using parameters. When actions (such as a login or a Job being paused) occur on the Cohesity Cluster, the Cluster generates Audit Logs. If no parameters are specified, all logs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startIndex">Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and startIndex to return a subsets of items in the search result. For example, set startIndex to 0 to get the first set of pageCount items for the first request. Increment startIndex by pageCount to get the next set of pageCount items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount. Default value is 0. (optional)</param>
        /// <param name="pageCount">Limit the number of items to return in the response for pagination purposes. Default value is 1000. (optional)</param>
        /// <param name="domains">Filter by domains of users who cause the actions that trigger Cluster audit logs. (optional)</param>
        /// <param name="entityTypes">Filter by entity types involved in the actions that generate the Cluster audit logs, such as User, Protection Job, View, etc. For a complete list, see the Category drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="actions">Filter by the actions that generate Cluster audit logs such as Activate, Cancel, Clone, Create, etc. For a complete list, see the Actions drop-down in the Admin &gt; Audit Logs page of the Cohesity Dashboard. (optional)</param>
        /// <param name="search">Filter by matching a substring in entity name or details of the Cluster audit log. (optional)</param>
        /// <param name="userNames">Filter by user names who cause the actions that generate Cluster Audit Logs. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Cluster audit logs that were generated after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Cluster audit logs that were generated before the specified end time are returned. (optional)</param>
        /// <param name="outputFormat">Specifies the format of the output such as csv and json. If not specified, the json format is returned. If csv is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>Task of ApiResponse (ClusterAuditLogsSearchResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ClusterAuditLogsSearchResult>> SearchClusterAuditLogsAsyncWithHttpInfo (long? startIndex = null, long? pageCount = null, List<string> domains = null, List<string> entityTypes = null, List<string> actions = null, string search = null, List<string> userNames = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string outputFormat = null)
        {

            var localVarPath = "/public/auditLogs/cluster";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startIndex != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startIndex", startIndex)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (domains != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "domains", domains)); // query parameter
            if (entityTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "entityTypes", entityTypes)); // query parameter
            if (actions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "actions", actions)); // query parameter
            if (search != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "search", search)); // query parameter
            if (userNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "userNames", userNames)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SearchClusterAuditLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ClusterAuditLogsSearchResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ClusterAuditLogsSearchResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ClusterAuditLogsSearchResult)));
        }

    }
}
