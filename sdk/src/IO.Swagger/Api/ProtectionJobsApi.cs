/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProtectionJobsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Pause future Runs or resume future Runs of the specified Protection Job.
        /// </summary>
        /// <remarks>
        /// If the Protection Job is currently running (not paused) and true is passed in, this operation stops any new Runs of this Protection Job from stating and executing. However, any existing Runs that were already executing will continue to run. If this Projection Job is paused and false is passed in, this operation restores the Job to a running state and new Runs are started as defined by the schedule in the Policy associated with the Job.  Returns success if the paused state is changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void ChangeProtectionJobState (long? id, ChangeProtectionJobStateParam body = null);

        /// <summary>
        /// Pause future Runs or resume future Runs of the specified Protection Job.
        /// </summary>
        /// <remarks>
        /// If the Protection Job is currently running (not paused) and true is passed in, this operation stops any new Runs of this Protection Job from stating and executing. However, any existing Runs that were already executing will continue to run. If this Projection Job is paused and false is passed in, this operation restores the Job to a running state and new Runs are started as defined by the schedule in the Policy associated with the Job.  Returns success if the paused state is changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeProtectionJobStateWithHttpInfo (long? id, ChangeProtectionJobStateParam body = null);
        /// <summary>
        /// Create a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the created Protection Job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Job.</param>
        /// <returns>ProtectionJob</returns>
        ProtectionJob CreateProtectionJob (ProtectionJobRequestBody body);

        /// <summary>
        /// Create a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the created Protection Job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Job.</param>
        /// <returns>ApiResponse of ProtectionJob</returns>
        ApiResponse<ProtectionJob> CreateProtectionJobWithHttpInfo (ProtectionJobRequestBody body);
        /// <summary>
        /// Delete a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns Success if the Protection Job is deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="deleteSnapshots">Specifies if Snapshots generated by the Protection Job should also be deleted when the Job is deleted. (optional)</param>
        /// <returns></returns>
        void DeleteProtectionJob (long? id, bool? deleteSnapshots = null);

        /// <summary>
        /// Delete a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns Success if the Protection Job is deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="deleteSnapshots">Specifies if Snapshots generated by the Protection Job should also be deleted when the Job is deleted. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteProtectionJobWithHttpInfo (long? id, bool? deleteSnapshots = null);
        /// <summary>
        /// List details about single Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Job corresponding to the specified Job id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>ProtectionJob</returns>
        ProtectionJob GetProtectionJobById (long? id);

        /// <summary>
        /// List details about single Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Job corresponding to the specified Job id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>ApiResponse of ProtectionJob</returns>
        ApiResponse<ProtectionJob> GetProtectionJobByIdWithHttpInfo (long? id);
        /// <summary>
        /// List Protections Jobs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Jobs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyIds">Filter by Policy ids that are associated with Protection Jobs. Only Jobs associated with the specified Policy ids, are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. Only Jobs protecting the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="isActive">Filter by Inactive or Active Jobs. If not set, all Inactive and Active Jobs are returned. If true, only Active Jobs are returned. If false, only Inactive Jobs are returned. When you create a Protection Job on a Primary Cluster with a replication schedule, the Cluster creates an Inactive copy of the Job on the Remote Cluster. In addition, when an Active and running Job is deactivated, the Job becomes Inactive. (optional)</param>
        /// <param name="isDeleted">If true, return only Protection Jobs that have been deleted but still have Snapshots associated with them. If false, return all Protection Jobs except those Jobs that have been deleted and still have Snapshots associated with them. A Job that is deleted with all its Snapshots is not returned for either of these cases. (optional)</param>
        /// <param name="includeLastRunAndStats">If true, return the last Protection Run of the Job and the summary stats. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Job ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Job names. (optional)</param>
        /// <returns>List&lt;ProtectionJob&gt;</returns>
        List<ProtectionJob> GetProtectionJobs (List<string> policyIds = null, List<string> environments = null, bool? isActive = null, bool? isDeleted = null, bool? includeLastRunAndStats = null, List<long?> ids = null, List<string> names = null);

        /// <summary>
        /// List Protections Jobs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Jobs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyIds">Filter by Policy ids that are associated with Protection Jobs. Only Jobs associated with the specified Policy ids, are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. Only Jobs protecting the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="isActive">Filter by Inactive or Active Jobs. If not set, all Inactive and Active Jobs are returned. If true, only Active Jobs are returned. If false, only Inactive Jobs are returned. When you create a Protection Job on a Primary Cluster with a replication schedule, the Cluster creates an Inactive copy of the Job on the Remote Cluster. In addition, when an Active and running Job is deactivated, the Job becomes Inactive. (optional)</param>
        /// <param name="isDeleted">If true, return only Protection Jobs that have been deleted but still have Snapshots associated with them. If false, return all Protection Jobs except those Jobs that have been deleted and still have Snapshots associated with them. A Job that is deleted with all its Snapshots is not returned for either of these cases. (optional)</param>
        /// <param name="includeLastRunAndStats">If true, return the last Protection Run of the Job and the summary stats. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Job ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Job names. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionJob&gt;</returns>
        ApiResponse<List<ProtectionJob>> GetProtectionJobsWithHttpInfo (List<string> policyIds = null, List<string> environments = null, bool? isActive = null, bool? isDeleted = null, bool? includeLastRunAndStats = null, List<long?> ids = null, List<string> names = null);
        /// <summary>
        /// Immediately execute a single Protection Job Run.
        /// </summary>
        /// <remarks>
        /// Immediately excute a single Job Run and ignore the schedule defined in the Policy. A Protection Policy associated with the Job may define up to three backup run types: 1) Regular (CBT utilized), 2) Full (CBT not utilized) and 3) Log. The passed in run type defines what type of backup is done by the Job Run. The schedule defined in the Policy for the backup run type is ignored but other settings such as the snapshot retention and retry settings are used. Returns success if the Job Run starts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body">Specifies the type of backup. If not specified, the &#39;kRegular&#39; backup is run.</param>
        /// <returns></returns>
        void RunProtectionJob (long? id, RunProtectionJobParam body);

        /// <summary>
        /// Immediately execute a single Protection Job Run.
        /// </summary>
        /// <remarks>
        /// Immediately excute a single Job Run and ignore the schedule defined in the Policy. A Protection Policy associated with the Job may define up to three backup run types: 1) Regular (CBT utilized), 2) Full (CBT not utilized) and 3) Log. The passed in run type defines what type of backup is done by the Job Run. The schedule defined in the Policy for the backup run type is ignored but other settings such as the snapshot retention and retry settings are used. Returns success if the Job Run starts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body">Specifies the type of backup. If not specified, the &#39;kRegular&#39; backup is run.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RunProtectionJobWithHttpInfo (long? id, RunProtectionJobParam body);
        /// <summary>
        /// Update a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the updated Protection Job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a protection job.</param>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>ProtectionJob</returns>
        ProtectionJob UpdateProtectionJob (ProtectionJobRequestBody body, long? id);

        /// <summary>
        /// Update a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the updated Protection Job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a protection job.</param>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>ApiResponse of ProtectionJob</returns>
        ApiResponse<ProtectionJob> UpdateProtectionJobWithHttpInfo (ProtectionJobRequestBody body, long? id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Pause future Runs or resume future Runs of the specified Protection Job.
        /// </summary>
        /// <remarks>
        /// If the Protection Job is currently running (not paused) and true is passed in, this operation stops any new Runs of this Protection Job from stating and executing. However, any existing Runs that were already executing will continue to run. If this Projection Job is paused and false is passed in, this operation restores the Job to a running state and new Runs are started as defined by the schedule in the Policy associated with the Job.  Returns success if the paused state is changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangeProtectionJobStateAsync (long? id, ChangeProtectionJobStateParam body = null);

        /// <summary>
        /// Pause future Runs or resume future Runs of the specified Protection Job.
        /// </summary>
        /// <remarks>
        /// If the Protection Job is currently running (not paused) and true is passed in, this operation stops any new Runs of this Protection Job from stating and executing. However, any existing Runs that were already executing will continue to run. If this Projection Job is paused and false is passed in, this operation restores the Job to a running state and new Runs are started as defined by the schedule in the Policy associated with the Job.  Returns success if the paused state is changed.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeProtectionJobStateAsyncWithHttpInfo (long? id, ChangeProtectionJobStateParam body = null);
        /// <summary>
        /// Create a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the created Protection Job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Job.</param>
        /// <returns>Task of ProtectionJob</returns>
        System.Threading.Tasks.Task<ProtectionJob> CreateProtectionJobAsync (ProtectionJobRequestBody body);

        /// <summary>
        /// Create a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the created Protection Job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Job.</param>
        /// <returns>Task of ApiResponse (ProtectionJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionJob>> CreateProtectionJobAsyncWithHttpInfo (ProtectionJobRequestBody body);
        /// <summary>
        /// Delete a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns Success if the Protection Job is deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="deleteSnapshots">Specifies if Snapshots generated by the Protection Job should also be deleted when the Job is deleted. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteProtectionJobAsync (long? id, bool? deleteSnapshots = null);

        /// <summary>
        /// Delete a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns Success if the Protection Job is deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="deleteSnapshots">Specifies if Snapshots generated by the Protection Job should also be deleted when the Job is deleted. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProtectionJobAsyncWithHttpInfo (long? id, bool? deleteSnapshots = null);
        /// <summary>
        /// List details about single Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Job corresponding to the specified Job id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>Task of ProtectionJob</returns>
        System.Threading.Tasks.Task<ProtectionJob> GetProtectionJobByIdAsync (long? id);

        /// <summary>
        /// List details about single Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Job corresponding to the specified Job id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>Task of ApiResponse (ProtectionJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionJob>> GetProtectionJobByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List Protections Jobs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Jobs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyIds">Filter by Policy ids that are associated with Protection Jobs. Only Jobs associated with the specified Policy ids, are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. Only Jobs protecting the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="isActive">Filter by Inactive or Active Jobs. If not set, all Inactive and Active Jobs are returned. If true, only Active Jobs are returned. If false, only Inactive Jobs are returned. When you create a Protection Job on a Primary Cluster with a replication schedule, the Cluster creates an Inactive copy of the Job on the Remote Cluster. In addition, when an Active and running Job is deactivated, the Job becomes Inactive. (optional)</param>
        /// <param name="isDeleted">If true, return only Protection Jobs that have been deleted but still have Snapshots associated with them. If false, return all Protection Jobs except those Jobs that have been deleted and still have Snapshots associated with them. A Job that is deleted with all its Snapshots is not returned for either of these cases. (optional)</param>
        /// <param name="includeLastRunAndStats">If true, return the last Protection Run of the Job and the summary stats. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Job ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Job names. (optional)</param>
        /// <returns>Task of List&lt;ProtectionJob&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectionJob>> GetProtectionJobsAsync (List<string> policyIds = null, List<string> environments = null, bool? isActive = null, bool? isDeleted = null, bool? includeLastRunAndStats = null, List<long?> ids = null, List<string> names = null);

        /// <summary>
        /// List Protections Jobs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Jobs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyIds">Filter by Policy ids that are associated with Protection Jobs. Only Jobs associated with the specified Policy ids, are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. Only Jobs protecting the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="isActive">Filter by Inactive or Active Jobs. If not set, all Inactive and Active Jobs are returned. If true, only Active Jobs are returned. If false, only Inactive Jobs are returned. When you create a Protection Job on a Primary Cluster with a replication schedule, the Cluster creates an Inactive copy of the Job on the Remote Cluster. In addition, when an Active and running Job is deactivated, the Job becomes Inactive. (optional)</param>
        /// <param name="isDeleted">If true, return only Protection Jobs that have been deleted but still have Snapshots associated with them. If false, return all Protection Jobs except those Jobs that have been deleted and still have Snapshots associated with them. A Job that is deleted with all its Snapshots is not returned for either of these cases. (optional)</param>
        /// <param name="includeLastRunAndStats">If true, return the last Protection Run of the Job and the summary stats. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Job ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Job names. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionJob&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectionJob>>> GetProtectionJobsAsyncWithHttpInfo (List<string> policyIds = null, List<string> environments = null, bool? isActive = null, bool? isDeleted = null, bool? includeLastRunAndStats = null, List<long?> ids = null, List<string> names = null);
        /// <summary>
        /// Immediately execute a single Protection Job Run.
        /// </summary>
        /// <remarks>
        /// Immediately excute a single Job Run and ignore the schedule defined in the Policy. A Protection Policy associated with the Job may define up to three backup run types: 1) Regular (CBT utilized), 2) Full (CBT not utilized) and 3) Log. The passed in run type defines what type of backup is done by the Job Run. The schedule defined in the Policy for the backup run type is ignored but other settings such as the snapshot retention and retry settings are used. Returns success if the Job Run starts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body">Specifies the type of backup. If not specified, the &#39;kRegular&#39; backup is run.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RunProtectionJobAsync (long? id, RunProtectionJobParam body);

        /// <summary>
        /// Immediately execute a single Protection Job Run.
        /// </summary>
        /// <remarks>
        /// Immediately excute a single Job Run and ignore the schedule defined in the Policy. A Protection Policy associated with the Job may define up to three backup run types: 1) Regular (CBT utilized), 2) Full (CBT not utilized) and 3) Log. The passed in run type defines what type of backup is done by the Job Run. The schedule defined in the Policy for the backup run type is ignored but other settings such as the snapshot retention and retry settings are used. Returns success if the Job Run starts.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body">Specifies the type of backup. If not specified, the &#39;kRegular&#39; backup is run.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RunProtectionJobAsyncWithHttpInfo (long? id, RunProtectionJobParam body);
        /// <summary>
        /// Update a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the updated Protection Job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a protection job.</param>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>Task of ProtectionJob</returns>
        System.Threading.Tasks.Task<ProtectionJob> UpdateProtectionJobAsync (ProtectionJobRequestBody body, long? id);

        /// <summary>
        /// Update a Protection Job.
        /// </summary>
        /// <remarks>
        /// Returns the updated Protection Job.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a protection job.</param>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>Task of ApiResponse (ProtectionJob)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionJob>> UpdateProtectionJobAsyncWithHttpInfo (ProtectionJobRequestBody body, long? id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProtectionJobsApi : IProtectionJobsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectionJobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProtectionJobsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectionJobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProtectionJobsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Pause future Runs or resume future Runs of the specified Protection Job. If the Protection Job is currently running (not paused) and true is passed in, this operation stops any new Runs of this Protection Job from stating and executing. However, any existing Runs that were already executing will continue to run. If this Projection Job is paused and false is passed in, this operation restores the Job to a running state and new Runs are started as defined by the schedule in the Policy associated with the Job.  Returns success if the paused state is changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void ChangeProtectionJobState (long? id, ChangeProtectionJobStateParam body = null)
        {
             ChangeProtectionJobStateWithHttpInfo(id, body);
        }

        /// <summary>
        /// Pause future Runs or resume future Runs of the specified Protection Job. If the Protection Job is currently running (not paused) and true is passed in, this operation stops any new Runs of this Protection Job from stating and executing. However, any existing Runs that were already executing will continue to run. If this Projection Job is paused and false is passed in, this operation restores the Job to a running state and new Runs are started as defined by the schedule in the Policy associated with the Job.  Returns success if the paused state is changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ChangeProtectionJobStateWithHttpInfo (long? id, ChangeProtectionJobStateParam body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionJobsApi->ChangeProtectionJobState");

            var localVarPath = "/public/protectionJobState/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeProtectionJobState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Pause future Runs or resume future Runs of the specified Protection Job. If the Protection Job is currently running (not paused) and true is passed in, this operation stops any new Runs of this Protection Job from stating and executing. However, any existing Runs that were already executing will continue to run. If this Projection Job is paused and false is passed in, this operation restores the Job to a running state and new Runs are started as defined by the schedule in the Policy associated with the Job.  Returns success if the paused state is changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangeProtectionJobStateAsync (long? id, ChangeProtectionJobStateParam body = null)
        {
             await ChangeProtectionJobStateAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Pause future Runs or resume future Runs of the specified Protection Job. If the Protection Job is currently running (not paused) and true is passed in, this operation stops any new Runs of this Protection Job from stating and executing. However, any existing Runs that were already executing will continue to run. If this Projection Job is paused and false is passed in, this operation restores the Job to a running state and new Runs are started as defined by the schedule in the Policy associated with the Job.  Returns success if the paused state is changed.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ChangeProtectionJobStateAsyncWithHttpInfo (long? id, ChangeProtectionJobStateParam body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionJobsApi->ChangeProtectionJobState");

            var localVarPath = "/public/protectionJobState/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeProtectionJobState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a Protection Job. Returns the created Protection Job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Job.</param>
        /// <returns>ProtectionJob</returns>
        public ProtectionJob CreateProtectionJob (ProtectionJobRequestBody body)
        {
             ApiResponse<ProtectionJob> localVarResponse = CreateProtectionJobWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Protection Job. Returns the created Protection Job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Job.</param>
        /// <returns>ApiResponse of ProtectionJob</returns>
        public ApiResponse< ProtectionJob > CreateProtectionJobWithHttpInfo (ProtectionJobRequestBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionJobsApi->CreateProtectionJob");

            var localVarPath = "/public/protectionJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProtectionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionJob)));
        }

        /// <summary>
        /// Create a Protection Job. Returns the created Protection Job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Job.</param>
        /// <returns>Task of ProtectionJob</returns>
        public async System.Threading.Tasks.Task<ProtectionJob> CreateProtectionJobAsync (ProtectionJobRequestBody body)
        {
             ApiResponse<ProtectionJob> localVarResponse = await CreateProtectionJobAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Protection Job. Returns the created Protection Job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Protection Job.</param>
        /// <returns>Task of ApiResponse (ProtectionJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionJob>> CreateProtectionJobAsyncWithHttpInfo (ProtectionJobRequestBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionJobsApi->CreateProtectionJob");

            var localVarPath = "/public/protectionJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProtectionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionJob)));
        }

        /// <summary>
        /// Delete a Protection Job. Returns Success if the Protection Job is deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="deleteSnapshots">Specifies if Snapshots generated by the Protection Job should also be deleted when the Job is deleted. (optional)</param>
        /// <returns></returns>
        public void DeleteProtectionJob (long? id, bool? deleteSnapshots = null)
        {
             DeleteProtectionJobWithHttpInfo(id, deleteSnapshots);
        }

        /// <summary>
        /// Delete a Protection Job. Returns Success if the Protection Job is deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="deleteSnapshots">Specifies if Snapshots generated by the Protection Job should also be deleted when the Job is deleted. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteProtectionJobWithHttpInfo (long? id, bool? deleteSnapshots = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionJobsApi->DeleteProtectionJob");

            var localVarPath = "/public/protectionJobs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteSnapshots != null && deleteSnapshots.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteSnapshots); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteSnapshots; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProtectionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a Protection Job. Returns Success if the Protection Job is deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="deleteSnapshots">Specifies if Snapshots generated by the Protection Job should also be deleted when the Job is deleted. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteProtectionJobAsync (long? id, bool? deleteSnapshots = null)
        {
             await DeleteProtectionJobAsyncWithHttpInfo(id, deleteSnapshots);

        }

        /// <summary>
        /// Delete a Protection Job. Returns Success if the Protection Job is deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="deleteSnapshots">Specifies if Snapshots generated by the Protection Job should also be deleted when the Job is deleted. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteProtectionJobAsyncWithHttpInfo (long? id, bool? deleteSnapshots = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionJobsApi->DeleteProtectionJob");

            var localVarPath = "/public/protectionJobs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteSnapshots != null && deleteSnapshots.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(deleteSnapshots); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteSnapshots; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteProtectionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List details about single Protection Job. Returns the Protection Job corresponding to the specified Job id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>ProtectionJob</returns>
        public ProtectionJob GetProtectionJobById (long? id)
        {
             ApiResponse<ProtectionJob> localVarResponse = GetProtectionJobByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about single Protection Job. Returns the Protection Job corresponding to the specified Job id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>ApiResponse of ProtectionJob</returns>
        public ApiResponse< ProtectionJob > GetProtectionJobByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionJobsApi->GetProtectionJobById");

            var localVarPath = "/public/protectionJobs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionJob)));
        }

        /// <summary>
        /// List details about single Protection Job. Returns the Protection Job corresponding to the specified Job id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>Task of ProtectionJob</returns>
        public async System.Threading.Tasks.Task<ProtectionJob> GetProtectionJobByIdAsync (long? id)
        {
             ApiResponse<ProtectionJob> localVarResponse = await GetProtectionJobByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about single Protection Job. Returns the Protection Job corresponding to the specified Job id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>Task of ApiResponse (ProtectionJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionJob>> GetProtectionJobByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionJobsApi->GetProtectionJobById");

            var localVarPath = "/public/protectionJobs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionJobById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionJob)));
        }

        /// <summary>
        /// List Protections Jobs filtered by the specified parameters. If no parameters are specified, all Protection Jobs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyIds">Filter by Policy ids that are associated with Protection Jobs. Only Jobs associated with the specified Policy ids, are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. Only Jobs protecting the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="isActive">Filter by Inactive or Active Jobs. If not set, all Inactive and Active Jobs are returned. If true, only Active Jobs are returned. If false, only Inactive Jobs are returned. When you create a Protection Job on a Primary Cluster with a replication schedule, the Cluster creates an Inactive copy of the Job on the Remote Cluster. In addition, when an Active and running Job is deactivated, the Job becomes Inactive. (optional)</param>
        /// <param name="isDeleted">If true, return only Protection Jobs that have been deleted but still have Snapshots associated with them. If false, return all Protection Jobs except those Jobs that have been deleted and still have Snapshots associated with them. A Job that is deleted with all its Snapshots is not returned for either of these cases. (optional)</param>
        /// <param name="includeLastRunAndStats">If true, return the last Protection Run of the Job and the summary stats. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Job ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Job names. (optional)</param>
        /// <returns>List&lt;ProtectionJob&gt;</returns>
        public List<ProtectionJob> GetProtectionJobs (List<string> policyIds = null, List<string> environments = null, bool? isActive = null, bool? isDeleted = null, bool? includeLastRunAndStats = null, List<long?> ids = null, List<string> names = null)
        {
             ApiResponse<List<ProtectionJob>> localVarResponse = GetProtectionJobsWithHttpInfo(policyIds, environments, isActive, isDeleted, includeLastRunAndStats, ids, names);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Protections Jobs filtered by the specified parameters. If no parameters are specified, all Protection Jobs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyIds">Filter by Policy ids that are associated with Protection Jobs. Only Jobs associated with the specified Policy ids, are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. Only Jobs protecting the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="isActive">Filter by Inactive or Active Jobs. If not set, all Inactive and Active Jobs are returned. If true, only Active Jobs are returned. If false, only Inactive Jobs are returned. When you create a Protection Job on a Primary Cluster with a replication schedule, the Cluster creates an Inactive copy of the Job on the Remote Cluster. In addition, when an Active and running Job is deactivated, the Job becomes Inactive. (optional)</param>
        /// <param name="isDeleted">If true, return only Protection Jobs that have been deleted but still have Snapshots associated with them. If false, return all Protection Jobs except those Jobs that have been deleted and still have Snapshots associated with them. A Job that is deleted with all its Snapshots is not returned for either of these cases. (optional)</param>
        /// <param name="includeLastRunAndStats">If true, return the last Protection Run of the Job and the summary stats. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Job ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Job names. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionJob&gt;</returns>
        public ApiResponse< List<ProtectionJob> > GetProtectionJobsWithHttpInfo (List<string> policyIds = null, List<string> environments = null, bool? isActive = null, bool? isDeleted = null, bool? includeLastRunAndStats = null, List<long?> ids = null, List<string> names = null)
        {

            var localVarPath = "/public/protectionJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "policyIds", policyIds)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (isActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isActive", isActive)); // query parameter
            if (isDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isDeleted", isDeleted)); // query parameter
            if (includeLastRunAndStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeLastRunAndStats", includeLastRunAndStats)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "names", names)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionJob>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionJob>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionJob>)));
        }

        /// <summary>
        /// List Protections Jobs filtered by the specified parameters. If no parameters are specified, all Protection Jobs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyIds">Filter by Policy ids that are associated with Protection Jobs. Only Jobs associated with the specified Policy ids, are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. Only Jobs protecting the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="isActive">Filter by Inactive or Active Jobs. If not set, all Inactive and Active Jobs are returned. If true, only Active Jobs are returned. If false, only Inactive Jobs are returned. When you create a Protection Job on a Primary Cluster with a replication schedule, the Cluster creates an Inactive copy of the Job on the Remote Cluster. In addition, when an Active and running Job is deactivated, the Job becomes Inactive. (optional)</param>
        /// <param name="isDeleted">If true, return only Protection Jobs that have been deleted but still have Snapshots associated with them. If false, return all Protection Jobs except those Jobs that have been deleted and still have Snapshots associated with them. A Job that is deleted with all its Snapshots is not returned for either of these cases. (optional)</param>
        /// <param name="includeLastRunAndStats">If true, return the last Protection Run of the Job and the summary stats. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Job ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Job names. (optional)</param>
        /// <returns>Task of List&lt;ProtectionJob&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectionJob>> GetProtectionJobsAsync (List<string> policyIds = null, List<string> environments = null, bool? isActive = null, bool? isDeleted = null, bool? includeLastRunAndStats = null, List<long?> ids = null, List<string> names = null)
        {
             ApiResponse<List<ProtectionJob>> localVarResponse = await GetProtectionJobsAsyncWithHttpInfo(policyIds, environments, isActive, isDeleted, includeLastRunAndStats, ids, names);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Protections Jobs filtered by the specified parameters. If no parameters are specified, all Protection Jobs currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyIds">Filter by Policy ids that are associated with Protection Jobs. Only Jobs associated with the specified Policy ids, are returned. (optional)</param>
        /// <param name="environments">Filter by environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. Only Jobs protecting the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="isActive">Filter by Inactive or Active Jobs. If not set, all Inactive and Active Jobs are returned. If true, only Active Jobs are returned. If false, only Inactive Jobs are returned. When you create a Protection Job on a Primary Cluster with a replication schedule, the Cluster creates an Inactive copy of the Job on the Remote Cluster. In addition, when an Active and running Job is deactivated, the Job becomes Inactive. (optional)</param>
        /// <param name="isDeleted">If true, return only Protection Jobs that have been deleted but still have Snapshots associated with them. If false, return all Protection Jobs except those Jobs that have been deleted and still have Snapshots associated with them. A Job that is deleted with all its Snapshots is not returned for either of these cases. (optional)</param>
        /// <param name="includeLastRunAndStats">If true, return the last Protection Run of the Job and the summary stats. (optional)</param>
        /// <param name="ids">Filter by a list of Protection Job ids. (optional)</param>
        /// <param name="names">Filter by a list of Protection Job names. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionJob&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectionJob>>> GetProtectionJobsAsyncWithHttpInfo (List<string> policyIds = null, List<string> environments = null, bool? isActive = null, bool? isDeleted = null, bool? includeLastRunAndStats = null, List<long?> ids = null, List<string> names = null)
        {

            var localVarPath = "/public/protectionJobs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (policyIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "policyIds", policyIds)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (isActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isActive", isActive)); // query parameter
            if (isDeleted != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isDeleted", isDeleted)); // query parameter
            if (includeLastRunAndStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeLastRunAndStats", includeLastRunAndStats)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "names", names)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionJobs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionJob>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionJob>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionJob>)));
        }

        /// <summary>
        /// Immediately execute a single Protection Job Run. Immediately excute a single Job Run and ignore the schedule defined in the Policy. A Protection Policy associated with the Job may define up to three backup run types: 1) Regular (CBT utilized), 2) Full (CBT not utilized) and 3) Log. The passed in run type defines what type of backup is done by the Job Run. The schedule defined in the Policy for the backup run type is ignored but other settings such as the snapshot retention and retry settings are used. Returns success if the Job Run starts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body">Specifies the type of backup. If not specified, the &#39;kRegular&#39; backup is run.</param>
        /// <returns></returns>
        public void RunProtectionJob (long? id, RunProtectionJobParam body)
        {
             RunProtectionJobWithHttpInfo(id, body);
        }

        /// <summary>
        /// Immediately execute a single Protection Job Run. Immediately excute a single Job Run and ignore the schedule defined in the Policy. A Protection Policy associated with the Job may define up to three backup run types: 1) Regular (CBT utilized), 2) Full (CBT not utilized) and 3) Log. The passed in run type defines what type of backup is done by the Job Run. The schedule defined in the Policy for the backup run type is ignored but other settings such as the snapshot retention and retry settings are used. Returns success if the Job Run starts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body">Specifies the type of backup. If not specified, the &#39;kRegular&#39; backup is run.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RunProtectionJobWithHttpInfo (long? id, RunProtectionJobParam body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionJobsApi->RunProtectionJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionJobsApi->RunProtectionJob");

            var localVarPath = "/public/protectionJobs/run/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunProtectionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Immediately execute a single Protection Job Run. Immediately excute a single Job Run and ignore the schedule defined in the Policy. A Protection Policy associated with the Job may define up to three backup run types: 1) Regular (CBT utilized), 2) Full (CBT not utilized) and 3) Log. The passed in run type defines what type of backup is done by the Job Run. The schedule defined in the Policy for the backup run type is ignored but other settings such as the snapshot retention and retry settings are used. Returns success if the Job Run starts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body">Specifies the type of backup. If not specified, the &#39;kRegular&#39; backup is run.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RunProtectionJobAsync (long? id, RunProtectionJobParam body)
        {
             await RunProtectionJobAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Immediately execute a single Protection Job Run. Immediately excute a single Job Run and ignore the schedule defined in the Policy. A Protection Policy associated with the Job may define up to three backup run types: 1) Regular (CBT utilized), 2) Full (CBT not utilized) and 3) Log. The passed in run type defines what type of backup is done by the Job Run. The schedule defined in the Policy for the backup run type is ignored but other settings such as the snapshot retention and retry settings are used. Returns success if the Job Run starts.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body">Specifies the type of backup. If not specified, the &#39;kRegular&#39; backup is run.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RunProtectionJobAsyncWithHttpInfo (long? id, RunProtectionJobParam body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionJobsApi->RunProtectionJob");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionJobsApi->RunProtectionJob");

            var localVarPath = "/public/protectionJobs/run/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RunProtectionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a Protection Job. Returns the updated Protection Job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a protection job.</param>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>ProtectionJob</returns>
        public ProtectionJob UpdateProtectionJob (ProtectionJobRequestBody body, long? id)
        {
             ApiResponse<ProtectionJob> localVarResponse = UpdateProtectionJobWithHttpInfo(body, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Protection Job. Returns the updated Protection Job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a protection job.</param>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>ApiResponse of ProtectionJob</returns>
        public ApiResponse< ProtectionJob > UpdateProtectionJobWithHttpInfo (ProtectionJobRequestBody body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionJobsApi->UpdateProtectionJob");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionJobsApi->UpdateProtectionJob");

            var localVarPath = "/public/protectionJobs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProtectionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionJob)));
        }

        /// <summary>
        /// Update a Protection Job. Returns the updated Protection Job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a protection job.</param>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>Task of ProtectionJob</returns>
        public async System.Threading.Tasks.Task<ProtectionJob> UpdateProtectionJobAsync (ProtectionJobRequestBody body, long? id)
        {
             ApiResponse<ProtectionJob> localVarResponse = await UpdateProtectionJobAsyncWithHttpInfo(body, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Protection Job. Returns the updated Protection Job.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update a protection job.</param>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <returns>Task of ApiResponse (ProtectionJob)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionJob>> UpdateProtectionJobAsyncWithHttpInfo (ProtectionJobRequestBody body, long? id)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionJobsApi->UpdateProtectionJob");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionJobsApi->UpdateProtectionJob");

            var localVarPath = "/public/protectionJobs/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProtectionJob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionJob>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionJob) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionJob)));
        }

    }
}
