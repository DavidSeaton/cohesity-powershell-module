/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProtectionSourcesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get details about a single Protection Source Object.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source object corresponding to the specified id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to return.</param>
        /// <returns>ProtectionSource</returns>
        ProtectionSource GetProtectionSourcesObjectById (long? id);

        /// <summary>
        /// Get details about a single Protection Source Object.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source object corresponding to the specified id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to return.</param>
        /// <returns>ApiResponse of ProtectionSource</returns>
        ApiResponse<ProtectionSource> GetProtectionSourcesObjectByIdWithHttpInfo (long? id);
        /// <summary>
        /// List details about Protection Source objects.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source objects corresponding to the specified ids.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectIds">Specifies the ids of the Protection Source objects to return. (optional)</param>
        /// <returns>List&lt;ProtectionSource&gt;</returns>
        List<ProtectionSource> GetProtectionSourcesObjects (List<long?> objectIds = null);

        /// <summary>
        /// List details about Protection Source objects.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source objects corresponding to the specified ids.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectIds">Specifies the ids of the Protection Source objects to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSource&gt;</returns>
        ApiResponse<List<ProtectionSource>> GetProtectionSourcesObjectsWithHttpInfo (List<long?> objectIds = null);
        /// <summary>
        /// Returns the registered Application Servers and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// Given the root node id of a Protection Source tree, returns the list of Application Servers registered under that tree based on the filters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourcesRootNodeId">Specifies the Protection Source Id of the root node of a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server. (optional)</param>
        /// <param name="environment">Specifies the environment such as &#39;kPhysical&#39; or &#39;kVMware&#39; of the Protection Source tree. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="application">Specifies the application such as &#39;kSQL&#39;, &#39;kExchange&#39; running on the Protection Source. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>List&lt;RegisteredApplicationServer&gt;</returns>
        List<RegisteredApplicationServer> ListApplicationServers (long? protectionSourcesRootNodeId = null, string environment = null, string application = null);

        /// <summary>
        /// Returns the registered Application Servers and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// Given the root node id of a Protection Source tree, returns the list of Application Servers registered under that tree based on the filters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourcesRootNodeId">Specifies the Protection Source Id of the root node of a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server. (optional)</param>
        /// <param name="environment">Specifies the environment such as &#39;kPhysical&#39; or &#39;kVMware&#39; of the Protection Source tree. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="application">Specifies the application such as &#39;kSQL&#39;, &#39;kExchange&#39; running on the Protection Source. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>ApiResponse of List&lt;RegisteredApplicationServer&gt;</returns>
        ApiResponse<List<RegisteredApplicationServer>> ListApplicationServersWithHttpInfo (long? protectionSourcesRootNodeId = null, string environment = null, string application = null);
        /// <summary>
        /// Returns the list of protected VMs in a registered Protection Source tree.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environment">Specifies the environment type of the registered Protection Source such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; if the registered Protection Source is of &#39;kVMware&#39; environment type. Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter.</param>
        /// <param name="id">Specifies the Id of a registered Protection Source of the type given in environment.</param>
        /// <returns>List&lt;ProtectedVmInfo&gt;</returns>
        List<ProtectedVmInfo> ListProtectedVms (string environment, long? id);

        /// <summary>
        /// Returns the list of protected VMs in a registered Protection Source tree.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environment">Specifies the environment type of the registered Protection Source such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; if the registered Protection Source is of &#39;kVMware&#39; environment type. Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter.</param>
        /// <param name="id">Specifies the Id of a registered Protection Source of the type given in environment.</param>
        /// <returns>ApiResponse of List&lt;ProtectedVmInfo&gt;</returns>
        ApiResponse<List<ProtectedVmInfo>> ListProtectedVmsWithHttpInfo (string environment, long? id);
        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Sources that are registered on the Cohesity Cluster are returned. In addition, an Object subtree gathered from each Source is returned. For example, the Cohesity Cluster interrogates a Source VMware vCenter Server and creates an hierarchical Object subtree that mirrors the Inventory tree on vCenter Server. The contents of the Object tree is returned as a \&quot;nodes\&quot; hierarchy of \&quot;protectionSource\&quot;s. Specifying parameters can alter the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDatastores">Set this parameter to true to also return kDatastore object types found in the Source in addition to their Object subtrees. By default, datastores are not returned. (optional)</param>
        /// <param name="includeNetworks">Set this parameter to true to also return kNetwork object types found in the Source in addition to their Object subtrees. By default, network objects are not returned. (optional)</param>
        /// <param name="includeVMFolders">Set this parameter to true to also return kVMFolder object types found in the Source in addition to their Object subtrees. By default, VM folder objects are not returned. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <param name="id">Return the Object subtree for the passed in Protection Source id. (optional)</param>
        /// <param name="excludeTypes">Filter out the Object types (and their subtrees) that match the passed in types such as &#39;kVCenter&#39;, &#39;kFolder&#39;, &#39;kDatacenter&#39;, &#39;kComputeResource&#39;, &#39;kResourcePool&#39;, &#39;kDatastore&#39;, &#39;kHostSystem&#39;, &#39;kVirtualMachine&#39;, etc. For example, set this parameter to &#39;kResourcePool&#39; to exclude Resource Pool Objects from being returned. (optional)</param>
        /// <returns>List&lt;ProtectionSourceNode&gt;</returns>
        List<ProtectionSourceNode> ListProtectionSources (bool? includeDatastores = null, bool? includeNetworks = null, bool? includeVMFolders = null, List<string> environments = null, string environment = null, long? id = null, List<string> excludeTypes = null);

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Sources that are registered on the Cohesity Cluster are returned. In addition, an Object subtree gathered from each Source is returned. For example, the Cohesity Cluster interrogates a Source VMware vCenter Server and creates an hierarchical Object subtree that mirrors the Inventory tree on vCenter Server. The contents of the Object tree is returned as a \&quot;nodes\&quot; hierarchy of \&quot;protectionSource\&quot;s. Specifying parameters can alter the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDatastores">Set this parameter to true to also return kDatastore object types found in the Source in addition to their Object subtrees. By default, datastores are not returned. (optional)</param>
        /// <param name="includeNetworks">Set this parameter to true to also return kNetwork object types found in the Source in addition to their Object subtrees. By default, network objects are not returned. (optional)</param>
        /// <param name="includeVMFolders">Set this parameter to true to also return kVMFolder object types found in the Source in addition to their Object subtrees. By default, VM folder objects are not returned. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <param name="id">Return the Object subtree for the passed in Protection Source id. (optional)</param>
        /// <param name="excludeTypes">Filter out the Object types (and their subtrees) that match the passed in types such as &#39;kVCenter&#39;, &#39;kFolder&#39;, &#39;kDatacenter&#39;, &#39;kComputeResource&#39;, &#39;kResourcePool&#39;, &#39;kDatastore&#39;, &#39;kHostSystem&#39;, &#39;kVirtualMachine&#39;, etc. For example, set this parameter to &#39;kResourcePool&#39; to exclude Resource Pool Objects from being returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSourceNode&gt;</returns>
        ApiResponse<List<ProtectionSourceNode>> ListProtectionSourcesWithHttpInfo (bool? includeDatastores = null, bool? includeNetworks = null, bool? includeVMFolders = null, List<string> environments = null, string environment = null, long? id = null, List<string> excludeTypes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the registration and protection information of the registered Protection Sources.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewNames">Return only the Views whose names are specified in the list. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Return only the registered root nodes whose Ids are given in the list. (optional)</param>
        /// <returns>GetRegistrationInfoResponse</returns>
        GetRegistrationInfoResponse ListProtectionSourcesRegistrationInfo (List<string> viewNames = null, List<string> environments = null, List<long?> ids = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the registration and protection information of the registered Protection Sources.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewNames">Return only the Views whose names are specified in the list. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Return only the registered root nodes whose Ids are given in the list. (optional)</param>
        /// <returns>ApiResponse of GetRegistrationInfoResponse</returns>
        ApiResponse<GetRegistrationInfoResponse> ListProtectionSourcesRegistrationInfoWithHttpInfo (List<string> viewNames = null, List<string> environments = null, List<long?> ids = null);
        /// <summary>
        /// Returns the top level (root) Protection Sources with registration information.
        /// </summary>
        /// <remarks>
        /// Returns the root Protection Sources and the registration information for each of these Sources.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Return the registration information for the Protection Source id. (optional)</param>
        /// <param name="environments">Return only the root Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39; &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the root Protection Sources found in the &#39;kVMware&#39; (VMware vCenter) environment. In addition, the registration information for each Source is returned.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <returns>List&lt;ProtectionSourceNode&gt;</returns>
        List<ProtectionSourceNode> ListProtectionSourcesRootNodes (long? id = null, List<string> environments = null, string environment = null);

        /// <summary>
        /// Returns the top level (root) Protection Sources with registration information.
        /// </summary>
        /// <remarks>
        /// Returns the root Protection Sources and the registration information for each of these Sources.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Return the registration information for the Protection Source id. (optional)</param>
        /// <param name="environments">Return only the root Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39; &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the root Protection Sources found in the &#39;kVMware&#39; (VMware vCenter) environment. In addition, the registration information for each Source is returned.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSourceNode&gt;</returns>
        ApiResponse<List<ProtectionSourceNode>> ListProtectionSourcesRootNodesWithHttpInfo (long? id = null, List<string> environments = null, string environment = null);
        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// Given a list of Protection Source Ids registered as SQL servers, returns AAGs found and the databases in AAG(Always on Availablity Group).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlProtectionSourceIds">Specifies a list of Ids of Protection Sources registered as SQL servers. These sources may have one or more SQL databases in them. Some of them may be part of AAGs(Always on Availability Group).</param>
        /// <returns>List&lt;SqlAagHostAndDatabases&gt;</returns>
        List<SqlAagHostAndDatabases> ListSqlAagHostsAndDatabases (List<long?> sqlProtectionSourceIds);

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// Given a list of Protection Source Ids registered as SQL servers, returns AAGs found and the databases in AAG(Always on Availablity Group).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlProtectionSourceIds">Specifies a list of Ids of Protection Sources registered as SQL servers. These sources may have one or more SQL databases in them. Some of them may be part of AAGs(Always on Availability Group).</param>
        /// <returns>ApiResponse of List&lt;SqlAagHostAndDatabases&gt;</returns>
        ApiResponse<List<SqlAagHostAndDatabases>> ListSqlAagHostsAndDatabasesWithHttpInfo (List<long?> sqlProtectionSourceIds);
        /// <summary>
        /// Returns the Virtual Machines in a vCenter Server.
        /// </summary>
        /// <remarks>
        /// Returns all Virtual Machines found in all the vCenter Servers registered on the Cohesity Cluster that match the filter criteria specified using parameters. If an id is specified, only VMs found in the specified vCenter Server are returned. Only VM Objects are returned. Other VMware Objects such as datacenters are not returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCenterId">Limit the VMs returned to the set of VMs found in a specific vCenter Server. Pass in the root Protection Source id for the vCenter Server to search for VMs. (optional)</param>
        /// <param name="names">Limit the returned VMs to those that exactly match the passed in VM name. To match multiple VM names, specify multiple \&quot;names\&quot; parameters that each specify a single VM name. The string must exactly match the passed in VM name and wild cards are not supported. (optional)</param>
        /// <param name="uuids">Limit the returned VMs to those that exactly match the passed in UUIDs. (optional)</param>
        /// <param name="_protected">Limit the returned VMs to those that have been protected by a Protection Job. By default, both protected and unprotected VMs are returned. (optional)</param>
        /// <returns>List&lt;ProtectionSource&gt;</returns>
        List<ProtectionSource> ListVirtualMachines (long? vCenterId = null, List<string> names = null, List<string> uuids = null, bool? _protected = null);

        /// <summary>
        /// Returns the Virtual Machines in a vCenter Server.
        /// </summary>
        /// <remarks>
        /// Returns all Virtual Machines found in all the vCenter Servers registered on the Cohesity Cluster that match the filter criteria specified using parameters. If an id is specified, only VMs found in the specified vCenter Server are returned. Only VM Objects are returned. Other VMware Objects such as datacenters are not returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCenterId">Limit the VMs returned to the set of VMs found in a specific vCenter Server. Pass in the root Protection Source id for the vCenter Server to search for VMs. (optional)</param>
        /// <param name="names">Limit the returned VMs to those that exactly match the passed in VM name. To match multiple VM names, specify multiple \&quot;names\&quot; parameters that each specify a single VM name. The string must exactly match the passed in VM name and wild cards are not supported. (optional)</param>
        /// <param name="uuids">Limit the returned VMs to those that exactly match the passed in UUIDs. (optional)</param>
        /// <param name="_protected">Limit the returned VMs to those that have been protected by a Protection Job. By default, both protected and unprotected VMs are returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSource&gt;</returns>
        ApiResponse<List<ProtectionSource>> ListVirtualMachinesWithHttpInfo (long? vCenterId = null, List<string> names = null, List<string> uuids = null, bool? _protected = null);
        /// <summary>
        /// Refresh the Object hierarchy of the Protection Sources tree.
        /// </summary>
        /// <remarks>
        /// Force an immediate refresh between the specified Protection Source tree on the Cohesity Cluster and the Inventory tree in the associated vCenter Server.  For example if a new VM is added to the vCenter Server, after a refresh, a new Protection Source node for this VM is added to the Protection Sources tree.  Success indicates the forced refresh has been started. The amount of time to complete a refresh depends on the size of the Object hierarchies.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the root node of the Protection Sources tree to refresh.  Force a refresh of the Object hierarchy for the passed in Protection Sources Id.</param>
        /// <returns></returns>
        void RefreshProtectionSourceById (long? id);

        /// <summary>
        /// Refresh the Object hierarchy of the Protection Sources tree.
        /// </summary>
        /// <remarks>
        /// Force an immediate refresh between the specified Protection Source tree on the Cohesity Cluster and the Inventory tree in the associated vCenter Server.  For example if a new VM is added to the vCenter Server, after a refresh, a new Protection Source node for this VM is added to the Protection Sources tree.  Success indicates the forced refresh has been started. The amount of time to complete a refresh depends on the size of the Object hierarchies.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the root node of the Protection Sources tree to refresh.  Force a refresh of the Object hierarchy for the passed in Protection Sources Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RefreshProtectionSourceByIdWithHttpInfo (long? id);
        /// <summary>
        /// Register a Protection Source as running one or more Application Servers like Microsoft SQL servers or Microsoft Exchange servers.
        /// </summary>
        /// <remarks>
        /// Registering Application Servers will help Cohesity Cluster such that any application specific data can be backed up.  Returns the Protection Source registered upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register Application Servers in a Protection Source.</param>
        /// <returns>ProtectionSource</returns>
        ProtectionSource RegisterApplicationServers (RegisterApplicationServersParameters body);

        /// <summary>
        /// Register a Protection Source as running one or more Application Servers like Microsoft SQL servers or Microsoft Exchange servers.
        /// </summary>
        /// <remarks>
        /// Registering Application Servers will help Cohesity Cluster such that any application specific data can be backed up.  Returns the Protection Source registered upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register Application Servers in a Protection Source.</param>
        /// <returns>ApiResponse of ProtectionSource</returns>
        ApiResponse<ProtectionSource> RegisterApplicationServersWithHttpInfo (RegisterApplicationServersParameters body);
        /// <summary>
        /// Register a Protection Source.
        /// </summary>
        /// <remarks>
        /// Register a Protection Source on the Cohesity Cluster. It could be the root node of a vCenter Server or a physcical server.  Returns the newly registered Protection Source upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a protection source.</param>
        /// <returns>ProtectionSource</returns>
        ProtectionSource RegisterProtectionSource (RegisterProtectionSourceParameters body);

        /// <summary>
        /// Register a Protection Source.
        /// </summary>
        /// <remarks>
        /// Register a Protection Source on the Cohesity Cluster. It could be the root node of a vCenter Server or a physcical server.  Returns the newly registered Protection Source upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a protection source.</param>
        /// <returns>ApiResponse of ProtectionSource</returns>
        ApiResponse<ProtectionSource> RegisterProtectionSourceWithHttpInfo (RegisterProtectionSourceParameters body);
        /// <summary>
        /// Unregister Application Servers like Microsoft SQL servers or Microsoft Exchange servers running on a Protection Source.
        /// </summary>
        /// <remarks>
        /// Unregistering Application Servers will fail if the Protection Source is currently being backed up.  Returns the Protection Source whose Application Servers are unregistered upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to unregister the Application Servers. If the Protection Source is currently being backed up, unregister operation will fail.</param>
        /// <returns>ProtectionSource</returns>
        ProtectionSource UnregisterApplicationServers (long? id);

        /// <summary>
        /// Unregister Application Servers like Microsoft SQL servers or Microsoft Exchange servers running on a Protection Source.
        /// </summary>
        /// <remarks>
        /// Unregistering Application Servers will fail if the Protection Source is currently being backed up.  Returns the Protection Source whose Application Servers are unregistered upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to unregister the Application Servers. If the Protection Source is currently being backed up, unregister operation will fail.</param>
        /// <returns>ApiResponse of ProtectionSource</returns>
        ApiResponse<ProtectionSource> UnregisterApplicationServersWithHttpInfo (long? id);
        /// <summary>
        /// Modifies the registration parameters of Application Servers in a Protection Source.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source whose registration parameters of its Application Servers are modified upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to modify the Application Servers registration of a Protection Source.</param>
        /// <returns>ProtectionSource</returns>
        ProtectionSource UpdateApplicationServers (UpdateApplicationServerParameters body);

        /// <summary>
        /// Modifies the registration parameters of Application Servers in a Protection Source.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source whose registration parameters of its Application Servers are modified upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to modify the Application Servers registration of a Protection Source.</param>
        /// <returns>ApiResponse of ProtectionSource</returns>
        ApiResponse<ProtectionSource> UpdateApplicationServersWithHttpInfo (UpdateApplicationServerParameters body);
        /// <summary>
        /// Initiate a request to upgrade Cohesity agents on one or more Physical Servers registered on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// If the request is successful, the Cohesity agents on the specified Physical Servers are upgraded to the agent release currently available from this Cohesity Cluster. For example if the Cluster is upgraded from 3.7.1 to 4.0, the agents on the specified Physical Servers can be upgraded to 4.0 using this POST operation. To get the agentIds to pass into this operation, call GET /public/protectionSources with the environment set to &#39;KPhysical&#39;. In addition this GET operation returns the agentUpgradability field, that indicates if an agent can be upgraded. Use the agentUpgradability field to determine which Physical Servers to upgrade using this POST /public/physicalAgents/upgrade operation.  WARNING: Only agents at a particular Cohesity release can be upgraded using this operation. See the Cohesity online help for details.  Returns the status of the upgrade initiation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to upgrade agents on Physical Servers. (optional)</param>
        /// <returns>UpgradePhysicalAgentsMessage</returns>
        UpgradePhysicalAgentsMessage UpgradePhysicalAgents (UpgradePhysicalServerAgents body = null);

        /// <summary>
        /// Initiate a request to upgrade Cohesity agents on one or more Physical Servers registered on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// If the request is successful, the Cohesity agents on the specified Physical Servers are upgraded to the agent release currently available from this Cohesity Cluster. For example if the Cluster is upgraded from 3.7.1 to 4.0, the agents on the specified Physical Servers can be upgraded to 4.0 using this POST operation. To get the agentIds to pass into this operation, call GET /public/protectionSources with the environment set to &#39;KPhysical&#39;. In addition this GET operation returns the agentUpgradability field, that indicates if an agent can be upgraded. Use the agentUpgradability field to determine which Physical Servers to upgrade using this POST /public/physicalAgents/upgrade operation.  WARNING: Only agents at a particular Cohesity release can be upgraded using this operation. See the Cohesity online help for details.  Returns the status of the upgrade initiation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to upgrade agents on Physical Servers. (optional)</param>
        /// <returns>ApiResponse of UpgradePhysicalAgentsMessage</returns>
        ApiResponse<UpgradePhysicalAgentsMessage> UpgradePhysicalAgentsWithHttpInfo (UpgradePhysicalServerAgents body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get details about a single Protection Source Object.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source object corresponding to the specified id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to return.</param>
        /// <returns>Task of ProtectionSource</returns>
        System.Threading.Tasks.Task<ProtectionSource> GetProtectionSourcesObjectByIdAsync (long? id);

        /// <summary>
        /// Get details about a single Protection Source Object.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source object corresponding to the specified id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to return.</param>
        /// <returns>Task of ApiResponse (ProtectionSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionSource>> GetProtectionSourcesObjectByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List details about Protection Source objects.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source objects corresponding to the specified ids.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectIds">Specifies the ids of the Protection Source objects to return. (optional)</param>
        /// <returns>Task of List&lt;ProtectionSource&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectionSource>> GetProtectionSourcesObjectsAsync (List<long?> objectIds = null);

        /// <summary>
        /// List details about Protection Source objects.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source objects corresponding to the specified ids.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectIds">Specifies the ids of the Protection Source objects to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectionSource>>> GetProtectionSourcesObjectsAsyncWithHttpInfo (List<long?> objectIds = null);
        /// <summary>
        /// Returns the registered Application Servers and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// Given the root node id of a Protection Source tree, returns the list of Application Servers registered under that tree based on the filters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourcesRootNodeId">Specifies the Protection Source Id of the root node of a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server. (optional)</param>
        /// <param name="environment">Specifies the environment such as &#39;kPhysical&#39; or &#39;kVMware&#39; of the Protection Source tree. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="application">Specifies the application such as &#39;kSQL&#39;, &#39;kExchange&#39; running on the Protection Source. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of List&lt;RegisteredApplicationServer&gt;</returns>
        System.Threading.Tasks.Task<List<RegisteredApplicationServer>> ListApplicationServersAsync (long? protectionSourcesRootNodeId = null, string environment = null, string application = null);

        /// <summary>
        /// Returns the registered Application Servers and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// Given the root node id of a Protection Source tree, returns the list of Application Servers registered under that tree based on the filters.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourcesRootNodeId">Specifies the Protection Source Id of the root node of a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server. (optional)</param>
        /// <param name="environment">Specifies the environment such as &#39;kPhysical&#39; or &#39;kVMware&#39; of the Protection Source tree. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="application">Specifies the application such as &#39;kSQL&#39;, &#39;kExchange&#39; running on the Protection Source. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RegisteredApplicationServer&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RegisteredApplicationServer>>> ListApplicationServersAsyncWithHttpInfo (long? protectionSourcesRootNodeId = null, string environment = null, string application = null);
        /// <summary>
        /// Returns the list of protected VMs in a registered Protection Source tree.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environment">Specifies the environment type of the registered Protection Source such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; if the registered Protection Source is of &#39;kVMware&#39; environment type. Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter.</param>
        /// <param name="id">Specifies the Id of a registered Protection Source of the type given in environment.</param>
        /// <returns>Task of List&lt;ProtectedVmInfo&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectedVmInfo>> ListProtectedVmsAsync (string environment, long? id);

        /// <summary>
        /// Returns the list of protected VMs in a registered Protection Source tree.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environment">Specifies the environment type of the registered Protection Source such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; if the registered Protection Source is of &#39;kVMware&#39; environment type. Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter.</param>
        /// <param name="id">Specifies the Id of a registered Protection Source of the type given in environment.</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectedVmInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectedVmInfo>>> ListProtectedVmsAsyncWithHttpInfo (string environment, long? id);
        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Sources that are registered on the Cohesity Cluster are returned. In addition, an Object subtree gathered from each Source is returned. For example, the Cohesity Cluster interrogates a Source VMware vCenter Server and creates an hierarchical Object subtree that mirrors the Inventory tree on vCenter Server. The contents of the Object tree is returned as a \&quot;nodes\&quot; hierarchy of \&quot;protectionSource\&quot;s. Specifying parameters can alter the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDatastores">Set this parameter to true to also return kDatastore object types found in the Source in addition to their Object subtrees. By default, datastores are not returned. (optional)</param>
        /// <param name="includeNetworks">Set this parameter to true to also return kNetwork object types found in the Source in addition to their Object subtrees. By default, network objects are not returned. (optional)</param>
        /// <param name="includeVMFolders">Set this parameter to true to also return kVMFolder object types found in the Source in addition to their Object subtrees. By default, VM folder objects are not returned. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <param name="id">Return the Object subtree for the passed in Protection Source id. (optional)</param>
        /// <param name="excludeTypes">Filter out the Object types (and their subtrees) that match the passed in types such as &#39;kVCenter&#39;, &#39;kFolder&#39;, &#39;kDatacenter&#39;, &#39;kComputeResource&#39;, &#39;kResourcePool&#39;, &#39;kDatastore&#39;, &#39;kHostSystem&#39;, &#39;kVirtualMachine&#39;, etc. For example, set this parameter to &#39;kResourcePool&#39; to exclude Resource Pool Objects from being returned. (optional)</param>
        /// <returns>Task of List&lt;ProtectionSourceNode&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectionSourceNode>> ListProtectionSourcesAsync (bool? includeDatastores = null, bool? includeNetworks = null, bool? includeVMFolders = null, List<string> environments = null, string environment = null, long? id = null, List<string> excludeTypes = null);

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Protection Sources that are registered on the Cohesity Cluster are returned. In addition, an Object subtree gathered from each Source is returned. For example, the Cohesity Cluster interrogates a Source VMware vCenter Server and creates an hierarchical Object subtree that mirrors the Inventory tree on vCenter Server. The contents of the Object tree is returned as a \&quot;nodes\&quot; hierarchy of \&quot;protectionSource\&quot;s. Specifying parameters can alter the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDatastores">Set this parameter to true to also return kDatastore object types found in the Source in addition to their Object subtrees. By default, datastores are not returned. (optional)</param>
        /// <param name="includeNetworks">Set this parameter to true to also return kNetwork object types found in the Source in addition to their Object subtrees. By default, network objects are not returned. (optional)</param>
        /// <param name="includeVMFolders">Set this parameter to true to also return kVMFolder object types found in the Source in addition to their Object subtrees. By default, VM folder objects are not returned. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <param name="id">Return the Object subtree for the passed in Protection Source id. (optional)</param>
        /// <param name="excludeTypes">Filter out the Object types (and their subtrees) that match the passed in types such as &#39;kVCenter&#39;, &#39;kFolder&#39;, &#39;kDatacenter&#39;, &#39;kComputeResource&#39;, &#39;kResourcePool&#39;, &#39;kDatastore&#39;, &#39;kHostSystem&#39;, &#39;kVirtualMachine&#39;, etc. For example, set this parameter to &#39;kResourcePool&#39; to exclude Resource Pool Objects from being returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSourceNode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectionSourceNode>>> ListProtectionSourcesAsyncWithHttpInfo (bool? includeDatastores = null, bool? includeNetworks = null, bool? includeVMFolders = null, List<string> environments = null, string environment = null, long? id = null, List<string> excludeTypes = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the registration and protection information of the registered Protection Sources.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewNames">Return only the Views whose names are specified in the list. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Return only the registered root nodes whose Ids are given in the list. (optional)</param>
        /// <returns>Task of GetRegistrationInfoResponse</returns>
        System.Threading.Tasks.Task<GetRegistrationInfoResponse> ListProtectionSourcesRegistrationInfoAsync (List<string> viewNames = null, List<string> environments = null, List<long?> ids = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the registration and protection information of the registered Protection Sources.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewNames">Return only the Views whose names are specified in the list. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Return only the registered root nodes whose Ids are given in the list. (optional)</param>
        /// <returns>Task of ApiResponse (GetRegistrationInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRegistrationInfoResponse>> ListProtectionSourcesRegistrationInfoAsyncWithHttpInfo (List<string> viewNames = null, List<string> environments = null, List<long?> ids = null);
        /// <summary>
        /// Returns the top level (root) Protection Sources with registration information.
        /// </summary>
        /// <remarks>
        /// Returns the root Protection Sources and the registration information for each of these Sources.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Return the registration information for the Protection Source id. (optional)</param>
        /// <param name="environments">Return only the root Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39; &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the root Protection Sources found in the &#39;kVMware&#39; (VMware vCenter) environment. In addition, the registration information for each Source is returned.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <returns>Task of List&lt;ProtectionSourceNode&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectionSourceNode>> ListProtectionSourcesRootNodesAsync (long? id = null, List<string> environments = null, string environment = null);

        /// <summary>
        /// Returns the top level (root) Protection Sources with registration information.
        /// </summary>
        /// <remarks>
        /// Returns the root Protection Sources and the registration information for each of these Sources.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Return the registration information for the Protection Source id. (optional)</param>
        /// <param name="environments">Return only the root Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39; &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the root Protection Sources found in the &#39;kVMware&#39; (VMware vCenter) environment. In addition, the registration information for each Source is returned.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSourceNode&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectionSourceNode>>> ListProtectionSourcesRootNodesAsyncWithHttpInfo (long? id = null, List<string> environments = null, string environment = null);
        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// Given a list of Protection Source Ids registered as SQL servers, returns AAGs found and the databases in AAG(Always on Availablity Group).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlProtectionSourceIds">Specifies a list of Ids of Protection Sources registered as SQL servers. These sources may have one or more SQL databases in them. Some of them may be part of AAGs(Always on Availability Group).</param>
        /// <returns>Task of List&lt;SqlAagHostAndDatabases&gt;</returns>
        System.Threading.Tasks.Task<List<SqlAagHostAndDatabases>> ListSqlAagHostsAndDatabasesAsync (List<long?> sqlProtectionSourceIds);

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees.
        /// </summary>
        /// <remarks>
        /// Given a list of Protection Source Ids registered as SQL servers, returns AAGs found and the databases in AAG(Always on Availablity Group).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlProtectionSourceIds">Specifies a list of Ids of Protection Sources registered as SQL servers. These sources may have one or more SQL databases in them. Some of them may be part of AAGs(Always on Availability Group).</param>
        /// <returns>Task of ApiResponse (List&lt;SqlAagHostAndDatabases&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SqlAagHostAndDatabases>>> ListSqlAagHostsAndDatabasesAsyncWithHttpInfo (List<long?> sqlProtectionSourceIds);
        /// <summary>
        /// Returns the Virtual Machines in a vCenter Server.
        /// </summary>
        /// <remarks>
        /// Returns all Virtual Machines found in all the vCenter Servers registered on the Cohesity Cluster that match the filter criteria specified using parameters. If an id is specified, only VMs found in the specified vCenter Server are returned. Only VM Objects are returned. Other VMware Objects such as datacenters are not returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCenterId">Limit the VMs returned to the set of VMs found in a specific vCenter Server. Pass in the root Protection Source id for the vCenter Server to search for VMs. (optional)</param>
        /// <param name="names">Limit the returned VMs to those that exactly match the passed in VM name. To match multiple VM names, specify multiple \&quot;names\&quot; parameters that each specify a single VM name. The string must exactly match the passed in VM name and wild cards are not supported. (optional)</param>
        /// <param name="uuids">Limit the returned VMs to those that exactly match the passed in UUIDs. (optional)</param>
        /// <param name="_protected">Limit the returned VMs to those that have been protected by a Protection Job. By default, both protected and unprotected VMs are returned. (optional)</param>
        /// <returns>Task of List&lt;ProtectionSource&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectionSource>> ListVirtualMachinesAsync (long? vCenterId = null, List<string> names = null, List<string> uuids = null, bool? _protected = null);

        /// <summary>
        /// Returns the Virtual Machines in a vCenter Server.
        /// </summary>
        /// <remarks>
        /// Returns all Virtual Machines found in all the vCenter Servers registered on the Cohesity Cluster that match the filter criteria specified using parameters. If an id is specified, only VMs found in the specified vCenter Server are returned. Only VM Objects are returned. Other VMware Objects such as datacenters are not returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCenterId">Limit the VMs returned to the set of VMs found in a specific vCenter Server. Pass in the root Protection Source id for the vCenter Server to search for VMs. (optional)</param>
        /// <param name="names">Limit the returned VMs to those that exactly match the passed in VM name. To match multiple VM names, specify multiple \&quot;names\&quot; parameters that each specify a single VM name. The string must exactly match the passed in VM name and wild cards are not supported. (optional)</param>
        /// <param name="uuids">Limit the returned VMs to those that exactly match the passed in UUIDs. (optional)</param>
        /// <param name="_protected">Limit the returned VMs to those that have been protected by a Protection Job. By default, both protected and unprotected VMs are returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSource&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectionSource>>> ListVirtualMachinesAsyncWithHttpInfo (long? vCenterId = null, List<string> names = null, List<string> uuids = null, bool? _protected = null);
        /// <summary>
        /// Refresh the Object hierarchy of the Protection Sources tree.
        /// </summary>
        /// <remarks>
        /// Force an immediate refresh between the specified Protection Source tree on the Cohesity Cluster and the Inventory tree in the associated vCenter Server.  For example if a new VM is added to the vCenter Server, after a refresh, a new Protection Source node for this VM is added to the Protection Sources tree.  Success indicates the forced refresh has been started. The amount of time to complete a refresh depends on the size of the Object hierarchies.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the root node of the Protection Sources tree to refresh.  Force a refresh of the Object hierarchy for the passed in Protection Sources Id.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RefreshProtectionSourceByIdAsync (long? id);

        /// <summary>
        /// Refresh the Object hierarchy of the Protection Sources tree.
        /// </summary>
        /// <remarks>
        /// Force an immediate refresh between the specified Protection Source tree on the Cohesity Cluster and the Inventory tree in the associated vCenter Server.  For example if a new VM is added to the vCenter Server, after a refresh, a new Protection Source node for this VM is added to the Protection Sources tree.  Success indicates the forced refresh has been started. The amount of time to complete a refresh depends on the size of the Object hierarchies.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the root node of the Protection Sources tree to refresh.  Force a refresh of the Object hierarchy for the passed in Protection Sources Id.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RefreshProtectionSourceByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Register a Protection Source as running one or more Application Servers like Microsoft SQL servers or Microsoft Exchange servers.
        /// </summary>
        /// <remarks>
        /// Registering Application Servers will help Cohesity Cluster such that any application specific data can be backed up.  Returns the Protection Source registered upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register Application Servers in a Protection Source.</param>
        /// <returns>Task of ProtectionSource</returns>
        System.Threading.Tasks.Task<ProtectionSource> RegisterApplicationServersAsync (RegisterApplicationServersParameters body);

        /// <summary>
        /// Register a Protection Source as running one or more Application Servers like Microsoft SQL servers or Microsoft Exchange servers.
        /// </summary>
        /// <remarks>
        /// Registering Application Servers will help Cohesity Cluster such that any application specific data can be backed up.  Returns the Protection Source registered upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register Application Servers in a Protection Source.</param>
        /// <returns>Task of ApiResponse (ProtectionSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionSource>> RegisterApplicationServersAsyncWithHttpInfo (RegisterApplicationServersParameters body);
        /// <summary>
        /// Register a Protection Source.
        /// </summary>
        /// <remarks>
        /// Register a Protection Source on the Cohesity Cluster. It could be the root node of a vCenter Server or a physcical server.  Returns the newly registered Protection Source upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a protection source.</param>
        /// <returns>Task of ProtectionSource</returns>
        System.Threading.Tasks.Task<ProtectionSource> RegisterProtectionSourceAsync (RegisterProtectionSourceParameters body);

        /// <summary>
        /// Register a Protection Source.
        /// </summary>
        /// <remarks>
        /// Register a Protection Source on the Cohesity Cluster. It could be the root node of a vCenter Server or a physcical server.  Returns the newly registered Protection Source upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a protection source.</param>
        /// <returns>Task of ApiResponse (ProtectionSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionSource>> RegisterProtectionSourceAsyncWithHttpInfo (RegisterProtectionSourceParameters body);
        /// <summary>
        /// Unregister Application Servers like Microsoft SQL servers or Microsoft Exchange servers running on a Protection Source.
        /// </summary>
        /// <remarks>
        /// Unregistering Application Servers will fail if the Protection Source is currently being backed up.  Returns the Protection Source whose Application Servers are unregistered upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to unregister the Application Servers. If the Protection Source is currently being backed up, unregister operation will fail.</param>
        /// <returns>Task of ProtectionSource</returns>
        System.Threading.Tasks.Task<ProtectionSource> UnregisterApplicationServersAsync (long? id);

        /// <summary>
        /// Unregister Application Servers like Microsoft SQL servers or Microsoft Exchange servers running on a Protection Source.
        /// </summary>
        /// <remarks>
        /// Unregistering Application Servers will fail if the Protection Source is currently being backed up.  Returns the Protection Source whose Application Servers are unregistered upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to unregister the Application Servers. If the Protection Source is currently being backed up, unregister operation will fail.</param>
        /// <returns>Task of ApiResponse (ProtectionSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionSource>> UnregisterApplicationServersAsyncWithHttpInfo (long? id);
        /// <summary>
        /// Modifies the registration parameters of Application Servers in a Protection Source.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source whose registration parameters of its Application Servers are modified upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to modify the Application Servers registration of a Protection Source.</param>
        /// <returns>Task of ProtectionSource</returns>
        System.Threading.Tasks.Task<ProtectionSource> UpdateApplicationServersAsync (UpdateApplicationServerParameters body);

        /// <summary>
        /// Modifies the registration parameters of Application Servers in a Protection Source.
        /// </summary>
        /// <remarks>
        /// Returns the Protection Source whose registration parameters of its Application Servers are modified upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to modify the Application Servers registration of a Protection Source.</param>
        /// <returns>Task of ApiResponse (ProtectionSource)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProtectionSource>> UpdateApplicationServersAsyncWithHttpInfo (UpdateApplicationServerParameters body);
        /// <summary>
        /// Initiate a request to upgrade Cohesity agents on one or more Physical Servers registered on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// If the request is successful, the Cohesity agents on the specified Physical Servers are upgraded to the agent release currently available from this Cohesity Cluster. For example if the Cluster is upgraded from 3.7.1 to 4.0, the agents on the specified Physical Servers can be upgraded to 4.0 using this POST operation. To get the agentIds to pass into this operation, call GET /public/protectionSources with the environment set to &#39;KPhysical&#39;. In addition this GET operation returns the agentUpgradability field, that indicates if an agent can be upgraded. Use the agentUpgradability field to determine which Physical Servers to upgrade using this POST /public/physicalAgents/upgrade operation.  WARNING: Only agents at a particular Cohesity release can be upgraded using this operation. See the Cohesity online help for details.  Returns the status of the upgrade initiation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to upgrade agents on Physical Servers. (optional)</param>
        /// <returns>Task of UpgradePhysicalAgentsMessage</returns>
        System.Threading.Tasks.Task<UpgradePhysicalAgentsMessage> UpgradePhysicalAgentsAsync (UpgradePhysicalServerAgents body = null);

        /// <summary>
        /// Initiate a request to upgrade Cohesity agents on one or more Physical Servers registered on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// If the request is successful, the Cohesity agents on the specified Physical Servers are upgraded to the agent release currently available from this Cohesity Cluster. For example if the Cluster is upgraded from 3.7.1 to 4.0, the agents on the specified Physical Servers can be upgraded to 4.0 using this POST operation. To get the agentIds to pass into this operation, call GET /public/protectionSources with the environment set to &#39;KPhysical&#39;. In addition this GET operation returns the agentUpgradability field, that indicates if an agent can be upgraded. Use the agentUpgradability field to determine which Physical Servers to upgrade using this POST /public/physicalAgents/upgrade operation.  WARNING: Only agents at a particular Cohesity release can be upgraded using this operation. See the Cohesity online help for details.  Returns the status of the upgrade initiation.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to upgrade agents on Physical Servers. (optional)</param>
        /// <returns>Task of ApiResponse (UpgradePhysicalAgentsMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpgradePhysicalAgentsMessage>> UpgradePhysicalAgentsAsyncWithHttpInfo (UpgradePhysicalServerAgents body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProtectionSourcesApi : IProtectionSourcesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectionSourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProtectionSourcesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectionSourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProtectionSourcesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get details about a single Protection Source Object. Returns the Protection Source object corresponding to the specified id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to return.</param>
        /// <returns>ProtectionSource</returns>
        public ProtectionSource GetProtectionSourcesObjectById (long? id)
        {
             ApiResponse<ProtectionSource> localVarResponse = GetProtectionSourcesObjectByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get details about a single Protection Source Object. Returns the Protection Source object corresponding to the specified id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to return.</param>
        /// <returns>ApiResponse of ProtectionSource</returns>
        public ApiResponse< ProtectionSource > GetProtectionSourcesObjectByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionSourcesApi->GetProtectionSourcesObjectById");

            var localVarPath = "/public/protectionSources/objects/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionSourcesObjectById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionSource)));
        }

        /// <summary>
        /// Get details about a single Protection Source Object. Returns the Protection Source object corresponding to the specified id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to return.</param>
        /// <returns>Task of ProtectionSource</returns>
        public async System.Threading.Tasks.Task<ProtectionSource> GetProtectionSourcesObjectByIdAsync (long? id)
        {
             ApiResponse<ProtectionSource> localVarResponse = await GetProtectionSourcesObjectByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get details about a single Protection Source Object. Returns the Protection Source object corresponding to the specified id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to return.</param>
        /// <returns>Task of ApiResponse (ProtectionSource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionSource>> GetProtectionSourcesObjectByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionSourcesApi->GetProtectionSourcesObjectById");

            var localVarPath = "/public/protectionSources/objects/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionSourcesObjectById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionSource)));
        }

        /// <summary>
        /// List details about Protection Source objects. Returns the Protection Source objects corresponding to the specified ids.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectIds">Specifies the ids of the Protection Source objects to return. (optional)</param>
        /// <returns>List&lt;ProtectionSource&gt;</returns>
        public List<ProtectionSource> GetProtectionSourcesObjects (List<long?> objectIds = null)
        {
             ApiResponse<List<ProtectionSource>> localVarResponse = GetProtectionSourcesObjectsWithHttpInfo(objectIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about Protection Source objects. Returns the Protection Source objects corresponding to the specified ids.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectIds">Specifies the ids of the Protection Source objects to return. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSource&gt;</returns>
        public ApiResponse< List<ProtectionSource> > GetProtectionSourcesObjectsWithHttpInfo (List<long?> objectIds = null)
        {

            var localVarPath = "/public/protectionSources/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "objectIds", objectIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionSourcesObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSource>)));
        }

        /// <summary>
        /// List details about Protection Source objects. Returns the Protection Source objects corresponding to the specified ids.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectIds">Specifies the ids of the Protection Source objects to return. (optional)</param>
        /// <returns>Task of List&lt;ProtectionSource&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectionSource>> GetProtectionSourcesObjectsAsync (List<long?> objectIds = null)
        {
             ApiResponse<List<ProtectionSource>> localVarResponse = await GetProtectionSourcesObjectsAsyncWithHttpInfo(objectIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about Protection Source objects. Returns the Protection Source objects corresponding to the specified ids.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectIds">Specifies the ids of the Protection Source objects to return. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectionSource>>> GetProtectionSourcesObjectsAsyncWithHttpInfo (List<long?> objectIds = null)
        {

            var localVarPath = "/public/protectionSources/objects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (objectIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "objectIds", objectIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionSourcesObjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSource>)));
        }

        /// <summary>
        /// Returns the registered Application Servers and their Object subtrees. Given the root node id of a Protection Source tree, returns the list of Application Servers registered under that tree based on the filters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourcesRootNodeId">Specifies the Protection Source Id of the root node of a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server. (optional)</param>
        /// <param name="environment">Specifies the environment such as &#39;kPhysical&#39; or &#39;kVMware&#39; of the Protection Source tree. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="application">Specifies the application such as &#39;kSQL&#39;, &#39;kExchange&#39; running on the Protection Source. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>List&lt;RegisteredApplicationServer&gt;</returns>
        public List<RegisteredApplicationServer> ListApplicationServers (long? protectionSourcesRootNodeId = null, string environment = null, string application = null)
        {
             ApiResponse<List<RegisteredApplicationServer>> localVarResponse = ListApplicationServersWithHttpInfo(protectionSourcesRootNodeId, environment, application);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the registered Application Servers and their Object subtrees. Given the root node id of a Protection Source tree, returns the list of Application Servers registered under that tree based on the filters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourcesRootNodeId">Specifies the Protection Source Id of the root node of a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server. (optional)</param>
        /// <param name="environment">Specifies the environment such as &#39;kPhysical&#39; or &#39;kVMware&#39; of the Protection Source tree. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="application">Specifies the application such as &#39;kSQL&#39;, &#39;kExchange&#39; running on the Protection Source. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>ApiResponse of List&lt;RegisteredApplicationServer&gt;</returns>
        public ApiResponse< List<RegisteredApplicationServer> > ListApplicationServersWithHttpInfo (long? protectionSourcesRootNodeId = null, string environment = null, string application = null)
        {

            var localVarPath = "/public/protectionSources/applicationServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (protectionSourcesRootNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protectionSourcesRootNodeId", protectionSourcesRootNodeId)); // query parameter
            if (environment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "environment", environment)); // query parameter
            if (application != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application", application)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RegisteredApplicationServer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RegisteredApplicationServer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RegisteredApplicationServer>)));
        }

        /// <summary>
        /// Returns the registered Application Servers and their Object subtrees. Given the root node id of a Protection Source tree, returns the list of Application Servers registered under that tree based on the filters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourcesRootNodeId">Specifies the Protection Source Id of the root node of a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server. (optional)</param>
        /// <param name="environment">Specifies the environment such as &#39;kPhysical&#39; or &#39;kVMware&#39; of the Protection Source tree. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="application">Specifies the application such as &#39;kSQL&#39;, &#39;kExchange&#39; running on the Protection Source. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of List&lt;RegisteredApplicationServer&gt;</returns>
        public async System.Threading.Tasks.Task<List<RegisteredApplicationServer>> ListApplicationServersAsync (long? protectionSourcesRootNodeId = null, string environment = null, string application = null)
        {
             ApiResponse<List<RegisteredApplicationServer>> localVarResponse = await ListApplicationServersAsyncWithHttpInfo(protectionSourcesRootNodeId, environment, application);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the registered Application Servers and their Object subtrees. Given the root node id of a Protection Source tree, returns the list of Application Servers registered under that tree based on the filters.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourcesRootNodeId">Specifies the Protection Source Id of the root node of a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server. (optional)</param>
        /// <param name="environment">Specifies the environment such as &#39;kPhysical&#39; or &#39;kVMware&#39; of the Protection Source tree. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="application">Specifies the application such as &#39;kSQL&#39;, &#39;kExchange&#39; running on the Protection Source. overrideDescription: true Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RegisteredApplicationServer&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RegisteredApplicationServer>>> ListApplicationServersAsyncWithHttpInfo (long? protectionSourcesRootNodeId = null, string environment = null, string application = null)
        {

            var localVarPath = "/public/protectionSources/applicationServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (protectionSourcesRootNodeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protectionSourcesRootNodeId", protectionSourcesRootNodeId)); // query parameter
            if (environment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "environment", environment)); // query parameter
            if (application != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "application", application)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApplicationServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RegisteredApplicationServer>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RegisteredApplicationServer>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RegisteredApplicationServer>)));
        }

        /// <summary>
        /// Returns the list of protected VMs in a registered Protection Source tree. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environment">Specifies the environment type of the registered Protection Source such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; if the registered Protection Source is of &#39;kVMware&#39; environment type. Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter.</param>
        /// <param name="id">Specifies the Id of a registered Protection Source of the type given in environment.</param>
        /// <returns>List&lt;ProtectedVmInfo&gt;</returns>
        public List<ProtectedVmInfo> ListProtectedVms (string environment, long? id)
        {
             ApiResponse<List<ProtectedVmInfo>> localVarResponse = ListProtectedVmsWithHttpInfo(environment, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of protected VMs in a registered Protection Source tree. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environment">Specifies the environment type of the registered Protection Source such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; if the registered Protection Source is of &#39;kVMware&#39; environment type. Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter.</param>
        /// <param name="id">Specifies the Id of a registered Protection Source of the type given in environment.</param>
        /// <returns>ApiResponse of List&lt;ProtectedVmInfo&gt;</returns>
        public ApiResponse< List<ProtectedVmInfo> > ListProtectedVmsWithHttpInfo (string environment, long? id)
        {
            // verify the required parameter 'environment' is set
            if (environment == null)
                throw new ApiException(400, "Missing required parameter 'environment' when calling ProtectionSourcesApi->ListProtectedVms");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionSourcesApi->ListProtectedVms");

            var localVarPath = "/public/protectionSources/protectedVms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (environment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "environment", environment)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProtectedVms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectedVmInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectedVmInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectedVmInfo>)));
        }

        /// <summary>
        /// Returns the list of protected VMs in a registered Protection Source tree. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environment">Specifies the environment type of the registered Protection Source such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; if the registered Protection Source is of &#39;kVMware&#39; environment type. Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter.</param>
        /// <param name="id">Specifies the Id of a registered Protection Source of the type given in environment.</param>
        /// <returns>Task of List&lt;ProtectedVmInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectedVmInfo>> ListProtectedVmsAsync (string environment, long? id)
        {
             ApiResponse<List<ProtectedVmInfo>> localVarResponse = await ListProtectedVmsAsyncWithHttpInfo(environment, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of protected VMs in a registered Protection Source tree. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="environment">Specifies the environment type of the registered Protection Source such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; if the registered Protection Source is of &#39;kVMware&#39; environment type. Supported environment types include &#39;kView&#39;, &#39;kSQL&#39;, &#39;kVMware&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp, &#39;kGenericNas, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, &#39;kAzure&#39;. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter.</param>
        /// <param name="id">Specifies the Id of a registered Protection Source of the type given in environment.</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectedVmInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectedVmInfo>>> ListProtectedVmsAsyncWithHttpInfo (string environment, long? id)
        {
            // verify the required parameter 'environment' is set
            if (environment == null)
                throw new ApiException(400, "Missing required parameter 'environment' when calling ProtectionSourcesApi->ListProtectedVms");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionSourcesApi->ListProtectedVms");

            var localVarPath = "/public/protectionSources/protectedVms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (environment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "environment", environment)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProtectedVms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectedVmInfo>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectedVmInfo>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectedVmInfo>)));
        }

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees. If no parameters are specified, all Protection Sources that are registered on the Cohesity Cluster are returned. In addition, an Object subtree gathered from each Source is returned. For example, the Cohesity Cluster interrogates a Source VMware vCenter Server and creates an hierarchical Object subtree that mirrors the Inventory tree on vCenter Server. The contents of the Object tree is returned as a \&quot;nodes\&quot; hierarchy of \&quot;protectionSource\&quot;s. Specifying parameters can alter the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDatastores">Set this parameter to true to also return kDatastore object types found in the Source in addition to their Object subtrees. By default, datastores are not returned. (optional)</param>
        /// <param name="includeNetworks">Set this parameter to true to also return kNetwork object types found in the Source in addition to their Object subtrees. By default, network objects are not returned. (optional)</param>
        /// <param name="includeVMFolders">Set this parameter to true to also return kVMFolder object types found in the Source in addition to their Object subtrees. By default, VM folder objects are not returned. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <param name="id">Return the Object subtree for the passed in Protection Source id. (optional)</param>
        /// <param name="excludeTypes">Filter out the Object types (and their subtrees) that match the passed in types such as &#39;kVCenter&#39;, &#39;kFolder&#39;, &#39;kDatacenter&#39;, &#39;kComputeResource&#39;, &#39;kResourcePool&#39;, &#39;kDatastore&#39;, &#39;kHostSystem&#39;, &#39;kVirtualMachine&#39;, etc. For example, set this parameter to &#39;kResourcePool&#39; to exclude Resource Pool Objects from being returned. (optional)</param>
        /// <returns>List&lt;ProtectionSourceNode&gt;</returns>
        public List<ProtectionSourceNode> ListProtectionSources (bool? includeDatastores = null, bool? includeNetworks = null, bool? includeVMFolders = null, List<string> environments = null, string environment = null, long? id = null, List<string> excludeTypes = null)
        {
             ApiResponse<List<ProtectionSourceNode>> localVarResponse = ListProtectionSourcesWithHttpInfo(includeDatastores, includeNetworks, includeVMFolders, environments, environment, id, excludeTypes);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees. If no parameters are specified, all Protection Sources that are registered on the Cohesity Cluster are returned. In addition, an Object subtree gathered from each Source is returned. For example, the Cohesity Cluster interrogates a Source VMware vCenter Server and creates an hierarchical Object subtree that mirrors the Inventory tree on vCenter Server. The contents of the Object tree is returned as a \&quot;nodes\&quot; hierarchy of \&quot;protectionSource\&quot;s. Specifying parameters can alter the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDatastores">Set this parameter to true to also return kDatastore object types found in the Source in addition to their Object subtrees. By default, datastores are not returned. (optional)</param>
        /// <param name="includeNetworks">Set this parameter to true to also return kNetwork object types found in the Source in addition to their Object subtrees. By default, network objects are not returned. (optional)</param>
        /// <param name="includeVMFolders">Set this parameter to true to also return kVMFolder object types found in the Source in addition to their Object subtrees. By default, VM folder objects are not returned. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <param name="id">Return the Object subtree for the passed in Protection Source id. (optional)</param>
        /// <param name="excludeTypes">Filter out the Object types (and their subtrees) that match the passed in types such as &#39;kVCenter&#39;, &#39;kFolder&#39;, &#39;kDatacenter&#39;, &#39;kComputeResource&#39;, &#39;kResourcePool&#39;, &#39;kDatastore&#39;, &#39;kHostSystem&#39;, &#39;kVirtualMachine&#39;, etc. For example, set this parameter to &#39;kResourcePool&#39; to exclude Resource Pool Objects from being returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSourceNode&gt;</returns>
        public ApiResponse< List<ProtectionSourceNode> > ListProtectionSourcesWithHttpInfo (bool? includeDatastores = null, bool? includeNetworks = null, bool? includeVMFolders = null, List<string> environments = null, string environment = null, long? id = null, List<string> excludeTypes = null)
        {

            var localVarPath = "/public/protectionSources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeDatastores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDatastores", includeDatastores)); // query parameter
            if (includeNetworks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeNetworks", includeNetworks)); // query parameter
            if (includeVMFolders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeVMFolders", includeVMFolders)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (environment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "environment", environment)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (excludeTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "excludeTypes", excludeTypes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProtectionSources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSourceNode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSourceNode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSourceNode>)));
        }

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees. If no parameters are specified, all Protection Sources that are registered on the Cohesity Cluster are returned. In addition, an Object subtree gathered from each Source is returned. For example, the Cohesity Cluster interrogates a Source VMware vCenter Server and creates an hierarchical Object subtree that mirrors the Inventory tree on vCenter Server. The contents of the Object tree is returned as a \&quot;nodes\&quot; hierarchy of \&quot;protectionSource\&quot;s. Specifying parameters can alter the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDatastores">Set this parameter to true to also return kDatastore object types found in the Source in addition to their Object subtrees. By default, datastores are not returned. (optional)</param>
        /// <param name="includeNetworks">Set this parameter to true to also return kNetwork object types found in the Source in addition to their Object subtrees. By default, network objects are not returned. (optional)</param>
        /// <param name="includeVMFolders">Set this parameter to true to also return kVMFolder object types found in the Source in addition to their Object subtrees. By default, VM folder objects are not returned. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <param name="id">Return the Object subtree for the passed in Protection Source id. (optional)</param>
        /// <param name="excludeTypes">Filter out the Object types (and their subtrees) that match the passed in types such as &#39;kVCenter&#39;, &#39;kFolder&#39;, &#39;kDatacenter&#39;, &#39;kComputeResource&#39;, &#39;kResourcePool&#39;, &#39;kDatastore&#39;, &#39;kHostSystem&#39;, &#39;kVirtualMachine&#39;, etc. For example, set this parameter to &#39;kResourcePool&#39; to exclude Resource Pool Objects from being returned. (optional)</param>
        /// <returns>Task of List&lt;ProtectionSourceNode&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectionSourceNode>> ListProtectionSourcesAsync (bool? includeDatastores = null, bool? includeNetworks = null, bool? includeVMFolders = null, List<string> environments = null, string environment = null, long? id = null, List<string> excludeTypes = null)
        {
             ApiResponse<List<ProtectionSourceNode>> localVarResponse = await ListProtectionSourcesAsyncWithHttpInfo(includeDatastores, includeNetworks, includeVMFolders, environments, environment, id, excludeTypes);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees. If no parameters are specified, all Protection Sources that are registered on the Cohesity Cluster are returned. In addition, an Object subtree gathered from each Source is returned. For example, the Cohesity Cluster interrogates a Source VMware vCenter Server and creates an hierarchical Object subtree that mirrors the Inventory tree on vCenter Server. The contents of the Object tree is returned as a \&quot;nodes\&quot; hierarchy of \&quot;protectionSource\&quot;s. Specifying parameters can alter the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDatastores">Set this parameter to true to also return kDatastore object types found in the Source in addition to their Object subtrees. By default, datastores are not returned. (optional)</param>
        /// <param name="includeNetworks">Set this parameter to true to also return kNetwork object types found in the Source in addition to their Object subtrees. By default, network objects are not returned. (optional)</param>
        /// <param name="includeVMFolders">Set this parameter to true to also return kVMFolder object types found in the Source in addition to their Object subtrees. By default, VM folder objects are not returned. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <param name="id">Return the Object subtree for the passed in Protection Source id. (optional)</param>
        /// <param name="excludeTypes">Filter out the Object types (and their subtrees) that match the passed in types such as &#39;kVCenter&#39;, &#39;kFolder&#39;, &#39;kDatacenter&#39;, &#39;kComputeResource&#39;, &#39;kResourcePool&#39;, &#39;kDatastore&#39;, &#39;kHostSystem&#39;, &#39;kVirtualMachine&#39;, etc. For example, set this parameter to &#39;kResourcePool&#39; to exclude Resource Pool Objects from being returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSourceNode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectionSourceNode>>> ListProtectionSourcesAsyncWithHttpInfo (bool? includeDatastores = null, bool? includeNetworks = null, bool? includeVMFolders = null, List<string> environments = null, string environment = null, long? id = null, List<string> excludeTypes = null)
        {

            var localVarPath = "/public/protectionSources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeDatastores != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeDatastores", includeDatastores)); // query parameter
            if (includeNetworks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeNetworks", includeNetworks)); // query parameter
            if (includeVMFolders != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeVMFolders", includeVMFolders)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (environment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "environment", environment)); // query parameter
            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (excludeTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "excludeTypes", excludeTypes)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProtectionSources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSourceNode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSourceNode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSourceNode>)));
        }

        /// <summary>
        ///  Returns the registration and protection information of the registered Protection Sources.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewNames">Return only the Views whose names are specified in the list. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Return only the registered root nodes whose Ids are given in the list. (optional)</param>
        /// <returns>GetRegistrationInfoResponse</returns>
        public GetRegistrationInfoResponse ListProtectionSourcesRegistrationInfo (List<string> viewNames = null, List<string> environments = null, List<long?> ids = null)
        {
             ApiResponse<GetRegistrationInfoResponse> localVarResponse = ListProtectionSourcesRegistrationInfoWithHttpInfo(viewNames, environments, ids);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the registration and protection information of the registered Protection Sources.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewNames">Return only the Views whose names are specified in the list. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Return only the registered root nodes whose Ids are given in the list. (optional)</param>
        /// <returns>ApiResponse of GetRegistrationInfoResponse</returns>
        public ApiResponse< GetRegistrationInfoResponse > ListProtectionSourcesRegistrationInfoWithHttpInfo (List<string> viewNames = null, List<string> environments = null, List<long?> ids = null)
        {

            var localVarPath = "/public/protectionSources/registrationInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewNames", viewNames)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProtectionSourcesRegistrationInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRegistrationInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRegistrationInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRegistrationInfoResponse)));
        }

        /// <summary>
        ///  Returns the registration and protection information of the registered Protection Sources.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewNames">Return only the Views whose names are specified in the list. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Return only the registered root nodes whose Ids are given in the list. (optional)</param>
        /// <returns>Task of GetRegistrationInfoResponse</returns>
        public async System.Threading.Tasks.Task<GetRegistrationInfoResponse> ListProtectionSourcesRegistrationInfoAsync (List<string> viewNames = null, List<string> environments = null, List<long?> ids = null)
        {
             ApiResponse<GetRegistrationInfoResponse> localVarResponse = await ListProtectionSourcesRegistrationInfoAsyncWithHttpInfo(viewNames, environments, ids);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the registration and protection information of the registered Protection Sources.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewNames">Return only the Views whose names are specified in the list. (optional)</param>
        /// <param name="environments">Return only Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39; &#39;kPhysical&#39;, &#39;kPuppeteer&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the Sources (and their Object subtrees) found in the &#39;kVMware&#39; (VMware vCenter Server) environment.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="ids">Return only the registered root nodes whose Ids are given in the list. (optional)</param>
        /// <returns>Task of ApiResponse (GetRegistrationInfoResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetRegistrationInfoResponse>> ListProtectionSourcesRegistrationInfoAsyncWithHttpInfo (List<string> viewNames = null, List<string> environments = null, List<long?> ids = null)
        {

            var localVarPath = "/public/protectionSources/registrationInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewNames", viewNames)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProtectionSourcesRegistrationInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetRegistrationInfoResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetRegistrationInfoResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetRegistrationInfoResponse)));
        }

        /// <summary>
        /// Returns the top level (root) Protection Sources with registration information. Returns the root Protection Sources and the registration information for each of these Sources.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Return the registration information for the Protection Source id. (optional)</param>
        /// <param name="environments">Return only the root Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39; &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the root Protection Sources found in the &#39;kVMware&#39; (VMware vCenter) environment. In addition, the registration information for each Source is returned.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <returns>List&lt;ProtectionSourceNode&gt;</returns>
        public List<ProtectionSourceNode> ListProtectionSourcesRootNodes (long? id = null, List<string> environments = null, string environment = null)
        {
             ApiResponse<List<ProtectionSourceNode>> localVarResponse = ListProtectionSourcesRootNodesWithHttpInfo(id, environments, environment);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the top level (root) Protection Sources with registration information. Returns the root Protection Sources and the registration information for each of these Sources.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Return the registration information for the Protection Source id. (optional)</param>
        /// <param name="environments">Return only the root Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39; &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the root Protection Sources found in the &#39;kVMware&#39; (VMware vCenter) environment. In addition, the registration information for each Source is returned.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSourceNode&gt;</returns>
        public ApiResponse< List<ProtectionSourceNode> > ListProtectionSourcesRootNodesWithHttpInfo (long? id = null, List<string> environments = null, string environment = null)
        {

            var localVarPath = "/public/protectionSources/rootNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (environment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "environment", environment)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProtectionSourcesRootNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSourceNode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSourceNode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSourceNode>)));
        }

        /// <summary>
        /// Returns the top level (root) Protection Sources with registration information. Returns the root Protection Sources and the registration information for each of these Sources.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Return the registration information for the Protection Source id. (optional)</param>
        /// <param name="environments">Return only the root Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39; &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the root Protection Sources found in the &#39;kVMware&#39; (VMware vCenter) environment. In addition, the registration information for each Source is returned.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <returns>Task of List&lt;ProtectionSourceNode&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectionSourceNode>> ListProtectionSourcesRootNodesAsync (long? id = null, List<string> environments = null, string environment = null)
        {
             ApiResponse<List<ProtectionSourceNode>> localVarResponse = await ListProtectionSourcesRootNodesAsyncWithHttpInfo(id, environments, environment);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the top level (root) Protection Sources with registration information. Returns the root Protection Sources and the registration information for each of these Sources.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Return the registration information for the Protection Source id. (optional)</param>
        /// <param name="environments">Return only the root Protection Sources that match the passed in environment type such as &#39;kVMware&#39;, &#39;kSQL&#39;, &#39;kView&#39;, &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39; &#39;kAzure&#39;. For example, set this parameter to &#39;kVMware&#39; to only return the root Protection Sources found in the &#39;kVMware&#39; (VMware vCenter) environment. In addition, the registration information for each Source is returned.  NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="environment">This field is deprecated. Use environments instead. deprecated: true (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSourceNode&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectionSourceNode>>> ListProtectionSourcesRootNodesAsyncWithHttpInfo (long? id = null, List<string> environments = null, string environment = null)
        {

            var localVarPath = "/public/protectionSources/rootNodes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (environment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "environment", environment)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListProtectionSourcesRootNodes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSourceNode>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSourceNode>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSourceNode>)));
        }

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees. Given a list of Protection Source Ids registered as SQL servers, returns AAGs found and the databases in AAG(Always on Availablity Group).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlProtectionSourceIds">Specifies a list of Ids of Protection Sources registered as SQL servers. These sources may have one or more SQL databases in them. Some of them may be part of AAGs(Always on Availability Group).</param>
        /// <returns>List&lt;SqlAagHostAndDatabases&gt;</returns>
        public List<SqlAagHostAndDatabases> ListSqlAagHostsAndDatabases (List<long?> sqlProtectionSourceIds)
        {
             ApiResponse<List<SqlAagHostAndDatabases>> localVarResponse = ListSqlAagHostsAndDatabasesWithHttpInfo(sqlProtectionSourceIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees. Given a list of Protection Source Ids registered as SQL servers, returns AAGs found and the databases in AAG(Always on Availablity Group).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlProtectionSourceIds">Specifies a list of Ids of Protection Sources registered as SQL servers. These sources may have one or more SQL databases in them. Some of them may be part of AAGs(Always on Availability Group).</param>
        /// <returns>ApiResponse of List&lt;SqlAagHostAndDatabases&gt;</returns>
        public ApiResponse< List<SqlAagHostAndDatabases> > ListSqlAagHostsAndDatabasesWithHttpInfo (List<long?> sqlProtectionSourceIds)
        {
            // verify the required parameter 'sqlProtectionSourceIds' is set
            if (sqlProtectionSourceIds == null)
                throw new ApiException(400, "Missing required parameter 'sqlProtectionSourceIds' when calling ProtectionSourcesApi->ListSqlAagHostsAndDatabases");

            var localVarPath = "/public/protectionSources/sqlAagHostsAndDatabases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sqlProtectionSourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sqlProtectionSourceIds", sqlProtectionSourceIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSqlAagHostsAndDatabases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SqlAagHostAndDatabases>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SqlAagHostAndDatabases>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SqlAagHostAndDatabases>)));
        }

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees. Given a list of Protection Source Ids registered as SQL servers, returns AAGs found and the databases in AAG(Always on Availablity Group).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlProtectionSourceIds">Specifies a list of Ids of Protection Sources registered as SQL servers. These sources may have one or more SQL databases in them. Some of them may be part of AAGs(Always on Availability Group).</param>
        /// <returns>Task of List&lt;SqlAagHostAndDatabases&gt;</returns>
        public async System.Threading.Tasks.Task<List<SqlAagHostAndDatabases>> ListSqlAagHostsAndDatabasesAsync (List<long?> sqlProtectionSourceIds)
        {
             ApiResponse<List<SqlAagHostAndDatabases>> localVarResponse = await ListSqlAagHostsAndDatabasesAsyncWithHttpInfo(sqlProtectionSourceIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the registered Protection Sources and their Object subtrees. Given a list of Protection Source Ids registered as SQL servers, returns AAGs found and the databases in AAG(Always on Availablity Group).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sqlProtectionSourceIds">Specifies a list of Ids of Protection Sources registered as SQL servers. These sources may have one or more SQL databases in them. Some of them may be part of AAGs(Always on Availability Group).</param>
        /// <returns>Task of ApiResponse (List&lt;SqlAagHostAndDatabases&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SqlAagHostAndDatabases>>> ListSqlAagHostsAndDatabasesAsyncWithHttpInfo (List<long?> sqlProtectionSourceIds)
        {
            // verify the required parameter 'sqlProtectionSourceIds' is set
            if (sqlProtectionSourceIds == null)
                throw new ApiException(400, "Missing required parameter 'sqlProtectionSourceIds' when calling ProtectionSourcesApi->ListSqlAagHostsAndDatabases");

            var localVarPath = "/public/protectionSources/sqlAagHostsAndDatabases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sqlProtectionSourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sqlProtectionSourceIds", sqlProtectionSourceIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSqlAagHostsAndDatabases", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SqlAagHostAndDatabases>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<SqlAagHostAndDatabases>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SqlAagHostAndDatabases>)));
        }

        /// <summary>
        /// Returns the Virtual Machines in a vCenter Server. Returns all Virtual Machines found in all the vCenter Servers registered on the Cohesity Cluster that match the filter criteria specified using parameters. If an id is specified, only VMs found in the specified vCenter Server are returned. Only VM Objects are returned. Other VMware Objects such as datacenters are not returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCenterId">Limit the VMs returned to the set of VMs found in a specific vCenter Server. Pass in the root Protection Source id for the vCenter Server to search for VMs. (optional)</param>
        /// <param name="names">Limit the returned VMs to those that exactly match the passed in VM name. To match multiple VM names, specify multiple \&quot;names\&quot; parameters that each specify a single VM name. The string must exactly match the passed in VM name and wild cards are not supported. (optional)</param>
        /// <param name="uuids">Limit the returned VMs to those that exactly match the passed in UUIDs. (optional)</param>
        /// <param name="_protected">Limit the returned VMs to those that have been protected by a Protection Job. By default, both protected and unprotected VMs are returned. (optional)</param>
        /// <returns>List&lt;ProtectionSource&gt;</returns>
        public List<ProtectionSource> ListVirtualMachines (long? vCenterId = null, List<string> names = null, List<string> uuids = null, bool? _protected = null)
        {
             ApiResponse<List<ProtectionSource>> localVarResponse = ListVirtualMachinesWithHttpInfo(vCenterId, names, uuids, _protected);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the Virtual Machines in a vCenter Server. Returns all Virtual Machines found in all the vCenter Servers registered on the Cohesity Cluster that match the filter criteria specified using parameters. If an id is specified, only VMs found in the specified vCenter Server are returned. Only VM Objects are returned. Other VMware Objects such as datacenters are not returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCenterId">Limit the VMs returned to the set of VMs found in a specific vCenter Server. Pass in the root Protection Source id for the vCenter Server to search for VMs. (optional)</param>
        /// <param name="names">Limit the returned VMs to those that exactly match the passed in VM name. To match multiple VM names, specify multiple \&quot;names\&quot; parameters that each specify a single VM name. The string must exactly match the passed in VM name and wild cards are not supported. (optional)</param>
        /// <param name="uuids">Limit the returned VMs to those that exactly match the passed in UUIDs. (optional)</param>
        /// <param name="_protected">Limit the returned VMs to those that have been protected by a Protection Job. By default, both protected and unprotected VMs are returned. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSource&gt;</returns>
        public ApiResponse< List<ProtectionSource> > ListVirtualMachinesWithHttpInfo (long? vCenterId = null, List<string> names = null, List<string> uuids = null, bool? _protected = null)
        {

            var localVarPath = "/public/protectionSources/virtualMachines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vCenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vCenterId", vCenterId)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "names", names)); // query parameter
            if (uuids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "uuids", uuids)); // query parameter
            if (_protected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protected", _protected)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVirtualMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSource>)));
        }

        /// <summary>
        /// Returns the Virtual Machines in a vCenter Server. Returns all Virtual Machines found in all the vCenter Servers registered on the Cohesity Cluster that match the filter criteria specified using parameters. If an id is specified, only VMs found in the specified vCenter Server are returned. Only VM Objects are returned. Other VMware Objects such as datacenters are not returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCenterId">Limit the VMs returned to the set of VMs found in a specific vCenter Server. Pass in the root Protection Source id for the vCenter Server to search for VMs. (optional)</param>
        /// <param name="names">Limit the returned VMs to those that exactly match the passed in VM name. To match multiple VM names, specify multiple \&quot;names\&quot; parameters that each specify a single VM name. The string must exactly match the passed in VM name and wild cards are not supported. (optional)</param>
        /// <param name="uuids">Limit the returned VMs to those that exactly match the passed in UUIDs. (optional)</param>
        /// <param name="_protected">Limit the returned VMs to those that have been protected by a Protection Job. By default, both protected and unprotected VMs are returned. (optional)</param>
        /// <returns>Task of List&lt;ProtectionSource&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectionSource>> ListVirtualMachinesAsync (long? vCenterId = null, List<string> names = null, List<string> uuids = null, bool? _protected = null)
        {
             ApiResponse<List<ProtectionSource>> localVarResponse = await ListVirtualMachinesAsyncWithHttpInfo(vCenterId, names, uuids, _protected);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the Virtual Machines in a vCenter Server. Returns all Virtual Machines found in all the vCenter Servers registered on the Cohesity Cluster that match the filter criteria specified using parameters. If an id is specified, only VMs found in the specified vCenter Server are returned. Only VM Objects are returned. Other VMware Objects such as datacenters are not returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="vCenterId">Limit the VMs returned to the set of VMs found in a specific vCenter Server. Pass in the root Protection Source id for the vCenter Server to search for VMs. (optional)</param>
        /// <param name="names">Limit the returned VMs to those that exactly match the passed in VM name. To match multiple VM names, specify multiple \&quot;names\&quot; parameters that each specify a single VM name. The string must exactly match the passed in VM name and wild cards are not supported. (optional)</param>
        /// <param name="uuids">Limit the returned VMs to those that exactly match the passed in UUIDs. (optional)</param>
        /// <param name="_protected">Limit the returned VMs to those that have been protected by a Protection Job. By default, both protected and unprotected VMs are returned. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSource&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectionSource>>> ListVirtualMachinesAsyncWithHttpInfo (long? vCenterId = null, List<string> names = null, List<string> uuids = null, bool? _protected = null)
        {

            var localVarPath = "/public/protectionSources/virtualMachines";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (vCenterId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "vCenterId", vCenterId)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "names", names)); // query parameter
            if (uuids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "uuids", uuids)); // query parameter
            if (_protected != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "protected", _protected)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListVirtualMachines", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSource>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSource>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSource>)));
        }

        /// <summary>
        /// Refresh the Object hierarchy of the Protection Sources tree. Force an immediate refresh between the specified Protection Source tree on the Cohesity Cluster and the Inventory tree in the associated vCenter Server.  For example if a new VM is added to the vCenter Server, after a refresh, a new Protection Source node for this VM is added to the Protection Sources tree.  Success indicates the forced refresh has been started. The amount of time to complete a refresh depends on the size of the Object hierarchies.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the root node of the Protection Sources tree to refresh.  Force a refresh of the Object hierarchy for the passed in Protection Sources Id.</param>
        /// <returns></returns>
        public void RefreshProtectionSourceById (long? id)
        {
             RefreshProtectionSourceByIdWithHttpInfo(id);
        }

        /// <summary>
        /// Refresh the Object hierarchy of the Protection Sources tree. Force an immediate refresh between the specified Protection Source tree on the Cohesity Cluster and the Inventory tree in the associated vCenter Server.  For example if a new VM is added to the vCenter Server, after a refresh, a new Protection Source node for this VM is added to the Protection Sources tree.  Success indicates the forced refresh has been started. The amount of time to complete a refresh depends on the size of the Object hierarchies.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the root node of the Protection Sources tree to refresh.  Force a refresh of the Object hierarchy for the passed in Protection Sources Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RefreshProtectionSourceByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionSourcesApi->RefreshProtectionSourceById");

            var localVarPath = "/public/protectionSources/refresh/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshProtectionSourceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Refresh the Object hierarchy of the Protection Sources tree. Force an immediate refresh between the specified Protection Source tree on the Cohesity Cluster and the Inventory tree in the associated vCenter Server.  For example if a new VM is added to the vCenter Server, after a refresh, a new Protection Source node for this VM is added to the Protection Sources tree.  Success indicates the forced refresh has been started. The amount of time to complete a refresh depends on the size of the Object hierarchies.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the root node of the Protection Sources tree to refresh.  Force a refresh of the Object hierarchy for the passed in Protection Sources Id.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RefreshProtectionSourceByIdAsync (long? id)
        {
             await RefreshProtectionSourceByIdAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Refresh the Object hierarchy of the Protection Sources tree. Force an immediate refresh between the specified Protection Source tree on the Cohesity Cluster and the Inventory tree in the associated vCenter Server.  For example if a new VM is added to the vCenter Server, after a refresh, a new Protection Source node for this VM is added to the Protection Sources tree.  Success indicates the forced refresh has been started. The amount of time to complete a refresh depends on the size of the Object hierarchies.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the root node of the Protection Sources tree to refresh.  Force a refresh of the Object hierarchy for the passed in Protection Sources Id.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RefreshProtectionSourceByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionSourcesApi->RefreshProtectionSourceById");

            var localVarPath = "/public/protectionSources/refresh/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RefreshProtectionSourceById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Register a Protection Source as running one or more Application Servers like Microsoft SQL servers or Microsoft Exchange servers. Registering Application Servers will help Cohesity Cluster such that any application specific data can be backed up.  Returns the Protection Source registered upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register Application Servers in a Protection Source.</param>
        /// <returns>ProtectionSource</returns>
        public ProtectionSource RegisterApplicationServers (RegisterApplicationServersParameters body)
        {
             ApiResponse<ProtectionSource> localVarResponse = RegisterApplicationServersWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a Protection Source as running one or more Application Servers like Microsoft SQL servers or Microsoft Exchange servers. Registering Application Servers will help Cohesity Cluster such that any application specific data can be backed up.  Returns the Protection Source registered upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register Application Servers in a Protection Source.</param>
        /// <returns>ApiResponse of ProtectionSource</returns>
        public ApiResponse< ProtectionSource > RegisterApplicationServersWithHttpInfo (RegisterApplicationServersParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionSourcesApi->RegisterApplicationServers");

            var localVarPath = "/public/protectionSources/applicationServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterApplicationServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionSource)));
        }

        /// <summary>
        /// Register a Protection Source as running one or more Application Servers like Microsoft SQL servers or Microsoft Exchange servers. Registering Application Servers will help Cohesity Cluster such that any application specific data can be backed up.  Returns the Protection Source registered upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register Application Servers in a Protection Source.</param>
        /// <returns>Task of ProtectionSource</returns>
        public async System.Threading.Tasks.Task<ProtectionSource> RegisterApplicationServersAsync (RegisterApplicationServersParameters body)
        {
             ApiResponse<ProtectionSource> localVarResponse = await RegisterApplicationServersAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a Protection Source as running one or more Application Servers like Microsoft SQL servers or Microsoft Exchange servers. Registering Application Servers will help Cohesity Cluster such that any application specific data can be backed up.  Returns the Protection Source registered upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register Application Servers in a Protection Source.</param>
        /// <returns>Task of ApiResponse (ProtectionSource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionSource>> RegisterApplicationServersAsyncWithHttpInfo (RegisterApplicationServersParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionSourcesApi->RegisterApplicationServers");

            var localVarPath = "/public/protectionSources/applicationServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterApplicationServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionSource)));
        }

        /// <summary>
        /// Register a Protection Source. Register a Protection Source on the Cohesity Cluster. It could be the root node of a vCenter Server or a physcical server.  Returns the newly registered Protection Source upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a protection source.</param>
        /// <returns>ProtectionSource</returns>
        public ProtectionSource RegisterProtectionSource (RegisterProtectionSourceParameters body)
        {
             ApiResponse<ProtectionSource> localVarResponse = RegisterProtectionSourceWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a Protection Source. Register a Protection Source on the Cohesity Cluster. It could be the root node of a vCenter Server or a physcical server.  Returns the newly registered Protection Source upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a protection source.</param>
        /// <returns>ApiResponse of ProtectionSource</returns>
        public ApiResponse< ProtectionSource > RegisterProtectionSourceWithHttpInfo (RegisterProtectionSourceParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionSourcesApi->RegisterProtectionSource");

            var localVarPath = "/public/protectionSources/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterProtectionSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionSource)));
        }

        /// <summary>
        /// Register a Protection Source. Register a Protection Source on the Cohesity Cluster. It could be the root node of a vCenter Server or a physcical server.  Returns the newly registered Protection Source upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a protection source.</param>
        /// <returns>Task of ProtectionSource</returns>
        public async System.Threading.Tasks.Task<ProtectionSource> RegisterProtectionSourceAsync (RegisterProtectionSourceParameters body)
        {
             ApiResponse<ProtectionSource> localVarResponse = await RegisterProtectionSourceAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a Protection Source. Register a Protection Source on the Cohesity Cluster. It could be the root node of a vCenter Server or a physcical server.  Returns the newly registered Protection Source upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a protection source.</param>
        /// <returns>Task of ApiResponse (ProtectionSource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionSource>> RegisterProtectionSourceAsyncWithHttpInfo (RegisterProtectionSourceParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionSourcesApi->RegisterProtectionSource");

            var localVarPath = "/public/protectionSources/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RegisterProtectionSource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionSource)));
        }

        /// <summary>
        /// Unregister Application Servers like Microsoft SQL servers or Microsoft Exchange servers running on a Protection Source. Unregistering Application Servers will fail if the Protection Source is currently being backed up.  Returns the Protection Source whose Application Servers are unregistered upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to unregister the Application Servers. If the Protection Source is currently being backed up, unregister operation will fail.</param>
        /// <returns>ProtectionSource</returns>
        public ProtectionSource UnregisterApplicationServers (long? id)
        {
             ApiResponse<ProtectionSource> localVarResponse = UnregisterApplicationServersWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unregister Application Servers like Microsoft SQL servers or Microsoft Exchange servers running on a Protection Source. Unregistering Application Servers will fail if the Protection Source is currently being backed up.  Returns the Protection Source whose Application Servers are unregistered upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to unregister the Application Servers. If the Protection Source is currently being backed up, unregister operation will fail.</param>
        /// <returns>ApiResponse of ProtectionSource</returns>
        public ApiResponse< ProtectionSource > UnregisterApplicationServersWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionSourcesApi->UnregisterApplicationServers");

            var localVarPath = "/public/protectionSources/applicationServers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnregisterApplicationServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionSource)));
        }

        /// <summary>
        /// Unregister Application Servers like Microsoft SQL servers or Microsoft Exchange servers running on a Protection Source. Unregistering Application Servers will fail if the Protection Source is currently being backed up.  Returns the Protection Source whose Application Servers are unregistered upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to unregister the Application Servers. If the Protection Source is currently being backed up, unregister operation will fail.</param>
        /// <returns>Task of ProtectionSource</returns>
        public async System.Threading.Tasks.Task<ProtectionSource> UnregisterApplicationServersAsync (long? id)
        {
             ApiResponse<ProtectionSource> localVarResponse = await UnregisterApplicationServersAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unregister Application Servers like Microsoft SQL servers or Microsoft Exchange servers running on a Protection Source. Unregistering Application Servers will fail if the Protection Source is currently being backed up.  Returns the Protection Source whose Application Servers are unregistered upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Source to unregister the Application Servers. If the Protection Source is currently being backed up, unregister operation will fail.</param>
        /// <returns>Task of ApiResponse (ProtectionSource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionSource>> UnregisterApplicationServersAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionSourcesApi->UnregisterApplicationServers");

            var localVarPath = "/public/protectionSources/applicationServers/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnregisterApplicationServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionSource)));
        }

        /// <summary>
        /// Modifies the registration parameters of Application Servers in a Protection Source. Returns the Protection Source whose registration parameters of its Application Servers are modified upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to modify the Application Servers registration of a Protection Source.</param>
        /// <returns>ProtectionSource</returns>
        public ProtectionSource UpdateApplicationServers (UpdateApplicationServerParameters body)
        {
             ApiResponse<ProtectionSource> localVarResponse = UpdateApplicationServersWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Modifies the registration parameters of Application Servers in a Protection Source. Returns the Protection Source whose registration parameters of its Application Servers are modified upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to modify the Application Servers registration of a Protection Source.</param>
        /// <returns>ApiResponse of ProtectionSource</returns>
        public ApiResponse< ProtectionSource > UpdateApplicationServersWithHttpInfo (UpdateApplicationServerParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionSourcesApi->UpdateApplicationServers");

            var localVarPath = "/public/protectionSources/applicationServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionSource)));
        }

        /// <summary>
        /// Modifies the registration parameters of Application Servers in a Protection Source. Returns the Protection Source whose registration parameters of its Application Servers are modified upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to modify the Application Servers registration of a Protection Source.</param>
        /// <returns>Task of ProtectionSource</returns>
        public async System.Threading.Tasks.Task<ProtectionSource> UpdateApplicationServersAsync (UpdateApplicationServerParameters body)
        {
             ApiResponse<ProtectionSource> localVarResponse = await UpdateApplicationServersAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Modifies the registration parameters of Application Servers in a Protection Source. Returns the Protection Source whose registration parameters of its Application Servers are modified upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to modify the Application Servers registration of a Protection Source.</param>
        /// <returns>Task of ApiResponse (ProtectionSource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProtectionSource>> UpdateApplicationServersAsyncWithHttpInfo (UpdateApplicationServerParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionSourcesApi->UpdateApplicationServers");

            var localVarPath = "/public/protectionSources/applicationServers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApplicationServers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProtectionSource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ProtectionSource) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProtectionSource)));
        }

        /// <summary>
        /// Initiate a request to upgrade Cohesity agents on one or more Physical Servers registered on the Cohesity Cluster. If the request is successful, the Cohesity agents on the specified Physical Servers are upgraded to the agent release currently available from this Cohesity Cluster. For example if the Cluster is upgraded from 3.7.1 to 4.0, the agents on the specified Physical Servers can be upgraded to 4.0 using this POST operation. To get the agentIds to pass into this operation, call GET /public/protectionSources with the environment set to &#39;KPhysical&#39;. In addition this GET operation returns the agentUpgradability field, that indicates if an agent can be upgraded. Use the agentUpgradability field to determine which Physical Servers to upgrade using this POST /public/physicalAgents/upgrade operation.  WARNING: Only agents at a particular Cohesity release can be upgraded using this operation. See the Cohesity online help for details.  Returns the status of the upgrade initiation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to upgrade agents on Physical Servers. (optional)</param>
        /// <returns>UpgradePhysicalAgentsMessage</returns>
        public UpgradePhysicalAgentsMessage UpgradePhysicalAgents (UpgradePhysicalServerAgents body = null)
        {
             ApiResponse<UpgradePhysicalAgentsMessage> localVarResponse = UpgradePhysicalAgentsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate a request to upgrade Cohesity agents on one or more Physical Servers registered on the Cohesity Cluster. If the request is successful, the Cohesity agents on the specified Physical Servers are upgraded to the agent release currently available from this Cohesity Cluster. For example if the Cluster is upgraded from 3.7.1 to 4.0, the agents on the specified Physical Servers can be upgraded to 4.0 using this POST operation. To get the agentIds to pass into this operation, call GET /public/protectionSources with the environment set to &#39;KPhysical&#39;. In addition this GET operation returns the agentUpgradability field, that indicates if an agent can be upgraded. Use the agentUpgradability field to determine which Physical Servers to upgrade using this POST /public/physicalAgents/upgrade operation.  WARNING: Only agents at a particular Cohesity release can be upgraded using this operation. See the Cohesity online help for details.  Returns the status of the upgrade initiation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to upgrade agents on Physical Servers. (optional)</param>
        /// <returns>ApiResponse of UpgradePhysicalAgentsMessage</returns>
        public ApiResponse< UpgradePhysicalAgentsMessage > UpgradePhysicalAgentsWithHttpInfo (UpgradePhysicalServerAgents body = null)
        {

            var localVarPath = "/public/physicalAgents/upgrade";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpgradePhysicalAgents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpgradePhysicalAgentsMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpgradePhysicalAgentsMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpgradePhysicalAgentsMessage)));
        }

        /// <summary>
        /// Initiate a request to upgrade Cohesity agents on one or more Physical Servers registered on the Cohesity Cluster. If the request is successful, the Cohesity agents on the specified Physical Servers are upgraded to the agent release currently available from this Cohesity Cluster. For example if the Cluster is upgraded from 3.7.1 to 4.0, the agents on the specified Physical Servers can be upgraded to 4.0 using this POST operation. To get the agentIds to pass into this operation, call GET /public/protectionSources with the environment set to &#39;KPhysical&#39;. In addition this GET operation returns the agentUpgradability field, that indicates if an agent can be upgraded. Use the agentUpgradability field to determine which Physical Servers to upgrade using this POST /public/physicalAgents/upgrade operation.  WARNING: Only agents at a particular Cohesity release can be upgraded using this operation. See the Cohesity online help for details.  Returns the status of the upgrade initiation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to upgrade agents on Physical Servers. (optional)</param>
        /// <returns>Task of UpgradePhysicalAgentsMessage</returns>
        public async System.Threading.Tasks.Task<UpgradePhysicalAgentsMessage> UpgradePhysicalAgentsAsync (UpgradePhysicalServerAgents body = null)
        {
             ApiResponse<UpgradePhysicalAgentsMessage> localVarResponse = await UpgradePhysicalAgentsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate a request to upgrade Cohesity agents on one or more Physical Servers registered on the Cohesity Cluster. If the request is successful, the Cohesity agents on the specified Physical Servers are upgraded to the agent release currently available from this Cohesity Cluster. For example if the Cluster is upgraded from 3.7.1 to 4.0, the agents on the specified Physical Servers can be upgraded to 4.0 using this POST operation. To get the agentIds to pass into this operation, call GET /public/protectionSources with the environment set to &#39;KPhysical&#39;. In addition this GET operation returns the agentUpgradability field, that indicates if an agent can be upgraded. Use the agentUpgradability field to determine which Physical Servers to upgrade using this POST /public/physicalAgents/upgrade operation.  WARNING: Only agents at a particular Cohesity release can be upgraded using this operation. See the Cohesity online help for details.  Returns the status of the upgrade initiation.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to upgrade agents on Physical Servers. (optional)</param>
        /// <returns>Task of ApiResponse (UpgradePhysicalAgentsMessage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpgradePhysicalAgentsMessage>> UpgradePhysicalAgentsAsyncWithHttpInfo (UpgradePhysicalServerAgents body = null)
        {

            var localVarPath = "/public/physicalAgents/upgrade";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpgradePhysicalAgents", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpgradePhysicalAgentsMessage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpgradePhysicalAgentsMessage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpgradePhysicalAgentsMessage)));
        }

    }
}
