/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClusterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List details about the Cohesity Cluster such as the name, type, version, language, locale and domains. This operation does not require authentication.
        /// </summary>
        /// <remarks>
        /// All Active Directory domains that are currently joined to the Cohesity Cluster are returned. In addition, the default LOCAL domain on the Cohesity Cluster is returned as the first element of the domains array in the response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BasicClusterInfo</returns>
        BasicClusterInfo GetBasicClusterInfo ();

        /// <summary>
        /// List details about the Cohesity Cluster such as the name, type, version, language, locale and domains. This operation does not require authentication.
        /// </summary>
        /// <remarks>
        /// All Active Directory domains that are currently joined to the Cohesity Cluster are returned. In addition, the default LOCAL domain on the Cohesity Cluster is returned as the first element of the domains array in the response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BasicClusterInfo</returns>
        ApiResponse<BasicClusterInfo> GetBasicClusterInfoWithHttpInfo ();
        /// <summary>
        /// List details about this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns information about this Cohesity Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchStats">If &#39;true&#39;, also get statistics about the Cohesity Cluster. (optional)</param>
        /// <returns>Cluster</returns>
        Cluster GetCluster (bool? fetchStats = null);

        /// <summary>
        /// List details about this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns information about this Cohesity Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchStats">If &#39;true&#39;, also get statistics about the Cohesity Cluster. (optional)</param>
        /// <returns>ApiResponse of Cluster</returns>
        ApiResponse<Cluster> GetClusterWithHttpInfo (bool? fetchStats = null);
        /// <summary>
        /// Update the configuration of this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns the updated Cluster configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Cluster Parameter. (optional)</param>
        /// <returns>Cluster</returns>
        Cluster UpdateClusterParams (UpdateClusterParams body = null);

        /// <summary>
        /// Update the configuration of this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns the updated Cluster configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Cluster Parameter. (optional)</param>
        /// <returns>ApiResponse of Cluster</returns>
        ApiResponse<Cluster> UpdateClusterParamsWithHttpInfo (UpdateClusterParams body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List details about the Cohesity Cluster such as the name, type, version, language, locale and domains. This operation does not require authentication.
        /// </summary>
        /// <remarks>
        /// All Active Directory domains that are currently joined to the Cohesity Cluster are returned. In addition, the default LOCAL domain on the Cohesity Cluster is returned as the first element of the domains array in the response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BasicClusterInfo</returns>
        System.Threading.Tasks.Task<BasicClusterInfo> GetBasicClusterInfoAsync ();

        /// <summary>
        /// List details about the Cohesity Cluster such as the name, type, version, language, locale and domains. This operation does not require authentication.
        /// </summary>
        /// <remarks>
        /// All Active Directory domains that are currently joined to the Cohesity Cluster are returned. In addition, the default LOCAL domain on the Cohesity Cluster is returned as the first element of the domains array in the response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BasicClusterInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<BasicClusterInfo>> GetBasicClusterInfoAsyncWithHttpInfo ();
        /// <summary>
        /// List details about this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns information about this Cohesity Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchStats">If &#39;true&#39;, also get statistics about the Cohesity Cluster. (optional)</param>
        /// <returns>Task of Cluster</returns>
        System.Threading.Tasks.Task<Cluster> GetClusterAsync (bool? fetchStats = null);

        /// <summary>
        /// List details about this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns information about this Cohesity Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchStats">If &#39;true&#39;, also get statistics about the Cohesity Cluster. (optional)</param>
        /// <returns>Task of ApiResponse (Cluster)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cluster>> GetClusterAsyncWithHttpInfo (bool? fetchStats = null);
        /// <summary>
        /// Update the configuration of this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns the updated Cluster configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Cluster Parameter. (optional)</param>
        /// <returns>Task of Cluster</returns>
        System.Threading.Tasks.Task<Cluster> UpdateClusterParamsAsync (UpdateClusterParams body = null);

        /// <summary>
        /// Update the configuration of this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns the updated Cluster configuration.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Cluster Parameter. (optional)</param>
        /// <returns>Task of ApiResponse (Cluster)</returns>
        System.Threading.Tasks.Task<ApiResponse<Cluster>> UpdateClusterParamsAsyncWithHttpInfo (UpdateClusterParams body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClusterApi : IClusterApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClusterApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClusterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClusterApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List details about the Cohesity Cluster such as the name, type, version, language, locale and domains. This operation does not require authentication. All Active Directory domains that are currently joined to the Cohesity Cluster are returned. In addition, the default LOCAL domain on the Cohesity Cluster is returned as the first element of the domains array in the response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BasicClusterInfo</returns>
        public BasicClusterInfo GetBasicClusterInfo ()
        {
             ApiResponse<BasicClusterInfo> localVarResponse = GetBasicClusterInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about the Cohesity Cluster such as the name, type, version, language, locale and domains. This operation does not require authentication. All Active Directory domains that are currently joined to the Cohesity Cluster are returned. In addition, the default LOCAL domain on the Cohesity Cluster is returned as the first element of the domains array in the response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BasicClusterInfo</returns>
        public ApiResponse< BasicClusterInfo > GetBasicClusterInfoWithHttpInfo ()
        {

            var localVarPath = "/public/basicClusterInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicClusterInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasicClusterInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BasicClusterInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasicClusterInfo)));
        }

        /// <summary>
        /// List details about the Cohesity Cluster such as the name, type, version, language, locale and domains. This operation does not require authentication. All Active Directory domains that are currently joined to the Cohesity Cluster are returned. In addition, the default LOCAL domain on the Cohesity Cluster is returned as the first element of the domains array in the response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BasicClusterInfo</returns>
        public async System.Threading.Tasks.Task<BasicClusterInfo> GetBasicClusterInfoAsync ()
        {
             ApiResponse<BasicClusterInfo> localVarResponse = await GetBasicClusterInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about the Cohesity Cluster such as the name, type, version, language, locale and domains. This operation does not require authentication. All Active Directory domains that are currently joined to the Cohesity Cluster are returned. In addition, the default LOCAL domain on the Cohesity Cluster is returned as the first element of the domains array in the response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BasicClusterInfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BasicClusterInfo>> GetBasicClusterInfoAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/basicClusterInfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBasicClusterInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BasicClusterInfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BasicClusterInfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BasicClusterInfo)));
        }

        /// <summary>
        /// List details about this Cohesity Cluster. Returns information about this Cohesity Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchStats">If &#39;true&#39;, also get statistics about the Cohesity Cluster. (optional)</param>
        /// <returns>Cluster</returns>
        public Cluster GetCluster (bool? fetchStats = null)
        {
             ApiResponse<Cluster> localVarResponse = GetClusterWithHttpInfo(fetchStats);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about this Cohesity Cluster. Returns information about this Cohesity Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchStats">If &#39;true&#39;, also get statistics about the Cohesity Cluster. (optional)</param>
        /// <returns>ApiResponse of Cluster</returns>
        public ApiResponse< Cluster > GetClusterWithHttpInfo (bool? fetchStats = null)
        {

            var localVarPath = "/public/cluster";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fetchStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fetchStats", fetchStats)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Cluster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Cluster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cluster)));
        }

        /// <summary>
        /// List details about this Cohesity Cluster. Returns information about this Cohesity Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchStats">If &#39;true&#39;, also get statistics about the Cohesity Cluster. (optional)</param>
        /// <returns>Task of Cluster</returns>
        public async System.Threading.Tasks.Task<Cluster> GetClusterAsync (bool? fetchStats = null)
        {
             ApiResponse<Cluster> localVarResponse = await GetClusterAsyncWithHttpInfo(fetchStats);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about this Cohesity Cluster. Returns information about this Cohesity Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fetchStats">If &#39;true&#39;, also get statistics about the Cohesity Cluster. (optional)</param>
        /// <returns>Task of ApiResponse (Cluster)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Cluster>> GetClusterAsyncWithHttpInfo (bool? fetchStats = null)
        {

            var localVarPath = "/public/cluster";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fetchStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fetchStats", fetchStats)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Cluster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Cluster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cluster)));
        }

        /// <summary>
        /// Update the configuration of this Cohesity Cluster. Returns the updated Cluster configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Cluster Parameter. (optional)</param>
        /// <returns>Cluster</returns>
        public Cluster UpdateClusterParams (UpdateClusterParams body = null)
        {
             ApiResponse<Cluster> localVarResponse = UpdateClusterParamsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the configuration of this Cohesity Cluster. Returns the updated Cluster configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Cluster Parameter. (optional)</param>
        /// <returns>ApiResponse of Cluster</returns>
        public ApiResponse< Cluster > UpdateClusterParamsWithHttpInfo (UpdateClusterParams body = null)
        {

            var localVarPath = "/public/cluster";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClusterParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Cluster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Cluster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cluster)));
        }

        /// <summary>
        /// Update the configuration of this Cohesity Cluster. Returns the updated Cluster configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Cluster Parameter. (optional)</param>
        /// <returns>Task of Cluster</returns>
        public async System.Threading.Tasks.Task<Cluster> UpdateClusterParamsAsync (UpdateClusterParams body = null)
        {
             ApiResponse<Cluster> localVarResponse = await UpdateClusterParamsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the configuration of this Cohesity Cluster. Returns the updated Cluster configuration.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Update Cluster Parameter. (optional)</param>
        /// <returns>Task of ApiResponse (Cluster)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Cluster>> UpdateClusterParamsAsyncWithHttpInfo (UpdateClusterParams body = null)
        {

            var localVarPath = "/public/cluster";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClusterParams", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Cluster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Cluster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Cluster)));
        }

    }
}
