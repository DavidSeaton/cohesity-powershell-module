/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get summary statistics about transferring data from Vaults (External Targets) to this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster is stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <returns>DataTransferFromVaultsSummaryResponse</returns>
        DataTransferFromVaultsSummaryResponse GetDataTransferFromVaultsReportRequest (long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null, long? startTimeMsecs = null);

        /// <summary>
        /// Get summary statistics about transferring data from Vaults (External Targets) to this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster is stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <returns>ApiResponse of DataTransferFromVaultsSummaryResponse</returns>
        ApiResponse<DataTransferFromVaultsSummaryResponse> GetDataTransferFromVaultsReportRequestWithHttpInfo (long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null, long? startTimeMsecs = null);
        /// <summary>
        /// Get summary statistics about transferring data from the Cohesity Cluster to Vaults (External Targets).
        /// </summary>
        /// <remarks>
        /// A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster can be stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>DataTransferToVaultsSummaryResponse</returns>
        DataTransferToVaultsSummaryResponse GetDataTransferToVaultsReportRequest (long? startTimeMsecs = null, long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null);

        /// <summary>
        /// Get summary statistics about transferring data from the Cohesity Cluster to Vaults (External Targets).
        /// </summary>
        /// <remarks>
        /// A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster can be stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>ApiResponse of DataTransferToVaultsSummaryResponse</returns>
        ApiResponse<DataTransferToVaultsSummaryResponse> GetDataTransferToVaultsReportRequestWithHttpInfo (long? startTimeMsecs = null, long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null);
        /// <summary>
        /// Get protection details about the specified list of leaf Protection Source Objects (such as a VMs).
        /// </summary>
        /// <remarks>
        /// Returns the Snapshots that contain backups of the specified Protection Source Objects and match the specified filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshots of the specified Protection Source Objects are returned.</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Snapshots of leaf Protection Source Objects for the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;cvs&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="pageCount">Specifies the number of Snapshots to return in the response for pagination purposes. Used in combination with the paginationCookie in the response to return multiple sets of Snapshots. (optional)</param>
        /// <param name="runStatus">Filter by a list of run statuses such as &#39;kRunning&#39;, &#39;kSuccess&#39;, &#39;kFailure&#39; etc. Snapshots of Job Runs with the specified run statuses are reported. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots for the specified Protection Jobs are listed. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshots that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time. Snapshots that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <returns>List&lt;ProtectionSourcesJobRunsReportElement&gt;</returns>
        List<ProtectionSourcesJobRunsReportElement> GetProtectionSourcesJobRunsReportRequest (List<long?> protectionSourceIds, List<string> environments = null, string outputFormat = null, int? pageCount = null, List<string> runStatus = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null);

        /// <summary>
        /// Get protection details about the specified list of leaf Protection Source Objects (such as a VMs).
        /// </summary>
        /// <remarks>
        /// Returns the Snapshots that contain backups of the specified Protection Source Objects and match the specified filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshots of the specified Protection Source Objects are returned.</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Snapshots of leaf Protection Source Objects for the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;cvs&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="pageCount">Specifies the number of Snapshots to return in the response for pagination purposes. Used in combination with the paginationCookie in the response to return multiple sets of Snapshots. (optional)</param>
        /// <param name="runStatus">Filter by a list of run statuses such as &#39;kRunning&#39;, &#39;kSuccess&#39;, &#39;kFailure&#39; etc. Snapshots of Job Runs with the specified run statuses are reported. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots for the specified Protection Jobs are listed. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshots that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time. Snapshots that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSourcesJobRunsReportElement&gt;</returns>
        ApiResponse<List<ProtectionSourcesJobRunsReportElement>> GetProtectionSourcesJobRunsReportRequestWithHttpInfo (List<long?> protectionSourceIds, List<string> environments = null, string outputFormat = null, int? pageCount = null, List<string> runStatus = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null);
        /// <summary>
        /// Get Job Run (Snapshot) summary statistics about the leaf Protection Sources Objects that match the specified filter criteria.
        /// </summary>
        /// <remarks>
        /// For example, if two Job ids are passed in, Snapshot summary statistics about all the leaf Objects that have been protected by the two specified Jobs are reported. For example if a top level registered Source id is passed in, summary statistics about all the Snapshots backing up leaf Objects in the specified Source are reported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshot summary statistics for the listed Protection Source Objects are reported. (optional)</param>
        /// <param name="statuses">Filter by a list of run statuses. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="registeredSourceId">Specifies an id of a top level Registered Source such as a vCenter Server. If specified, Snapshot summary statistics for all the leaf Protection Sources (such as VMs) that are children of this Registered Source are reported. NOTE: If specified, filtering by other fields is not supported. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots summary statistics for the specified Protection Jobs are reported. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshot summary statistics for Job Runs that started after the specified time are reported. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by end time. Snapshot summary statistics for Job Runs that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, or &#39;kNetapp&#39;. Snapshot summary statistics about the leaf Protection Source Objects of specified environment types are reported. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>List&lt;ProtectionSourcesSummaryStats&gt;</returns>
        List<ProtectionSourcesSummaryStats> GetProtectionSourcesJobsSummaryReportRequest (List<long?> protectionSourceIds = null, List<string> statuses = null, string outputFormat = null, long? registeredSourceId = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, List<string> environments = null);

        /// <summary>
        /// Get Job Run (Snapshot) summary statistics about the leaf Protection Sources Objects that match the specified filter criteria.
        /// </summary>
        /// <remarks>
        /// For example, if two Job ids are passed in, Snapshot summary statistics about all the leaf Objects that have been protected by the two specified Jobs are reported. For example if a top level registered Source id is passed in, summary statistics about all the Snapshots backing up leaf Objects in the specified Source are reported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshot summary statistics for the listed Protection Source Objects are reported. (optional)</param>
        /// <param name="statuses">Filter by a list of run statuses. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="registeredSourceId">Specifies an id of a top level Registered Source such as a vCenter Server. If specified, Snapshot summary statistics for all the leaf Protection Sources (such as VMs) that are children of this Registered Source are reported. NOTE: If specified, filtering by other fields is not supported. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots summary statistics for the specified Protection Jobs are reported. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshot summary statistics for Job Runs that started after the specified time are reported. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by end time. Snapshot summary statistics for Job Runs that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, or &#39;kNetapp&#39;. Snapshot summary statistics about the leaf Protection Source Objects of specified environment types are reported. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSourcesSummaryStats&gt;</returns>
        ApiResponse<List<ProtectionSourcesSummaryStats>> GetProtectionSourcesJobsSummaryReportRequestWithHttpInfo (List<long?> protectionSourceIds = null, List<string> statuses = null, string outputFormat = null, long? registeredSourceId = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, List<string> environments = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoveredFrom">Specifies the targets from which the recovery happend. (optional)</param>
        /// <param name="recoverTaskName">Specifies the recover task name. (optional)</param>
        /// <param name="status">Specifies the overall status of the Restore Task to filter. &#39;kReadyToSchedule&#39; indicates the Restore Task is waiting to be scheduled. &#39;kProgressMonitorCreated&#39; indicates the progress monitor for the Restore Task has been created. &#39;kRetrievedFromArchive&#39; indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. &#39;kAdmitted&#39; indicates the task has been admitted. After a task has been admitted, its status does not move back to &#39;kReadyToSchedule&#39; state even if it is rescheduled. &#39;kInProgress&#39; indicates that the Restore Task is in progress. &#39;kFinishingProgressMonitor&#39; indicates that the Restore Task is finishing its progress monitoring. &#39;kFinished&#39; indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="type">Specify the object type to filter with. Specifies the type of Restore Task.  &#39;kRecoverVMs&#39; specifies a Restore Task that recovers VMs. &#39;kCloneVMs&#39; specifies a Restore Task that clones VMs. &#39;kCloneView&#39; specifies a Restore Task that clones a View. &#39;kMountVolumes&#39; specifies a Restore Task that mounts volumes. &#39;kRestoreFiles&#39; specifies a Restore Task that recovers files and folders. (optional)</param>
        /// <param name="userName">Specify the user name to filter with. (optional)</param>
        /// <returns>List&lt;RestoreSourceSummaryByObjectTypeElement&gt;</returns>
        List<RestoreSourceSummaryByObjectTypeElement> GetRestoreSummaryByObjectTypeReport (List<string> recoveredFrom = null, string recoverTaskName = null, string status = null, string outputFormat = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string type = null, string userName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoveredFrom">Specifies the targets from which the recovery happend. (optional)</param>
        /// <param name="recoverTaskName">Specifies the recover task name. (optional)</param>
        /// <param name="status">Specifies the overall status of the Restore Task to filter. &#39;kReadyToSchedule&#39; indicates the Restore Task is waiting to be scheduled. &#39;kProgressMonitorCreated&#39; indicates the progress monitor for the Restore Task has been created. &#39;kRetrievedFromArchive&#39; indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. &#39;kAdmitted&#39; indicates the task has been admitted. After a task has been admitted, its status does not move back to &#39;kReadyToSchedule&#39; state even if it is rescheduled. &#39;kInProgress&#39; indicates that the Restore Task is in progress. &#39;kFinishingProgressMonitor&#39; indicates that the Restore Task is finishing its progress monitoring. &#39;kFinished&#39; indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="type">Specify the object type to filter with. Specifies the type of Restore Task.  &#39;kRecoverVMs&#39; specifies a Restore Task that recovers VMs. &#39;kCloneVMs&#39; specifies a Restore Task that clones VMs. &#39;kCloneView&#39; specifies a Restore Task that clones a View. &#39;kMountVolumes&#39; specifies a Restore Task that mounts volumes. &#39;kRestoreFiles&#39; specifies a Restore Task that recovers files and folders. (optional)</param>
        /// <param name="userName">Specify the user name to filter with. (optional)</param>
        /// <returns>ApiResponse of List&lt;RestoreSourceSummaryByObjectTypeElement&gt;</returns>
        ApiResponse<List<RestoreSourceSummaryByObjectTypeElement>> GetRestoreSummaryByObjectTypeReportWithHttpInfo (List<string> recoveredFrom = null, string recoverTaskName = null, string status = null, string outputFormat = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string type = null, string userName = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get summary statistics about transferring data from Vaults (External Targets) to this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster is stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <returns>Task of DataTransferFromVaultsSummaryResponse</returns>
        System.Threading.Tasks.Task<DataTransferFromVaultsSummaryResponse> GetDataTransferFromVaultsReportRequestAsync (long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null, long? startTimeMsecs = null);

        /// <summary>
        /// Get summary statistics about transferring data from Vaults (External Targets) to this Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster is stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <returns>Task of ApiResponse (DataTransferFromVaultsSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTransferFromVaultsSummaryResponse>> GetDataTransferFromVaultsReportRequestAsyncWithHttpInfo (long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null, long? startTimeMsecs = null);
        /// <summary>
        /// Get summary statistics about transferring data from the Cohesity Cluster to Vaults (External Targets).
        /// </summary>
        /// <remarks>
        /// A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster can be stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>Task of DataTransferToVaultsSummaryResponse</returns>
        System.Threading.Tasks.Task<DataTransferToVaultsSummaryResponse> GetDataTransferToVaultsReportRequestAsync (long? startTimeMsecs = null, long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null);

        /// <summary>
        /// Get summary statistics about transferring data from the Cohesity Cluster to Vaults (External Targets).
        /// </summary>
        /// <remarks>
        /// A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster can be stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>Task of ApiResponse (DataTransferToVaultsSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataTransferToVaultsSummaryResponse>> GetDataTransferToVaultsReportRequestAsyncWithHttpInfo (long? startTimeMsecs = null, long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null);
        /// <summary>
        /// Get protection details about the specified list of leaf Protection Source Objects (such as a VMs).
        /// </summary>
        /// <remarks>
        /// Returns the Snapshots that contain backups of the specified Protection Source Objects and match the specified filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshots of the specified Protection Source Objects are returned.</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Snapshots of leaf Protection Source Objects for the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;cvs&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="pageCount">Specifies the number of Snapshots to return in the response for pagination purposes. Used in combination with the paginationCookie in the response to return multiple sets of Snapshots. (optional)</param>
        /// <param name="runStatus">Filter by a list of run statuses such as &#39;kRunning&#39;, &#39;kSuccess&#39;, &#39;kFailure&#39; etc. Snapshots of Job Runs with the specified run statuses are reported. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots for the specified Protection Jobs are listed. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshots that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time. Snapshots that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <returns>Task of List&lt;ProtectionSourcesJobRunsReportElement&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectionSourcesJobRunsReportElement>> GetProtectionSourcesJobRunsReportRequestAsync (List<long?> protectionSourceIds, List<string> environments = null, string outputFormat = null, int? pageCount = null, List<string> runStatus = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null);

        /// <summary>
        /// Get protection details about the specified list of leaf Protection Source Objects (such as a VMs).
        /// </summary>
        /// <remarks>
        /// Returns the Snapshots that contain backups of the specified Protection Source Objects and match the specified filter criteria.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshots of the specified Protection Source Objects are returned.</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Snapshots of leaf Protection Source Objects for the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;cvs&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="pageCount">Specifies the number of Snapshots to return in the response for pagination purposes. Used in combination with the paginationCookie in the response to return multiple sets of Snapshots. (optional)</param>
        /// <param name="runStatus">Filter by a list of run statuses such as &#39;kRunning&#39;, &#39;kSuccess&#39;, &#39;kFailure&#39; etc. Snapshots of Job Runs with the specified run statuses are reported. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots for the specified Protection Jobs are listed. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshots that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time. Snapshots that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSourcesJobRunsReportElement&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectionSourcesJobRunsReportElement>>> GetProtectionSourcesJobRunsReportRequestAsyncWithHttpInfo (List<long?> protectionSourceIds, List<string> environments = null, string outputFormat = null, int? pageCount = null, List<string> runStatus = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null);
        /// <summary>
        /// Get Job Run (Snapshot) summary statistics about the leaf Protection Sources Objects that match the specified filter criteria.
        /// </summary>
        /// <remarks>
        /// For example, if two Job ids are passed in, Snapshot summary statistics about all the leaf Objects that have been protected by the two specified Jobs are reported. For example if a top level registered Source id is passed in, summary statistics about all the Snapshots backing up leaf Objects in the specified Source are reported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshot summary statistics for the listed Protection Source Objects are reported. (optional)</param>
        /// <param name="statuses">Filter by a list of run statuses. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="registeredSourceId">Specifies an id of a top level Registered Source such as a vCenter Server. If specified, Snapshot summary statistics for all the leaf Protection Sources (such as VMs) that are children of this Registered Source are reported. NOTE: If specified, filtering by other fields is not supported. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots summary statistics for the specified Protection Jobs are reported. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshot summary statistics for Job Runs that started after the specified time are reported. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by end time. Snapshot summary statistics for Job Runs that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, or &#39;kNetapp&#39;. Snapshot summary statistics about the leaf Protection Source Objects of specified environment types are reported. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of List&lt;ProtectionSourcesSummaryStats&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectionSourcesSummaryStats>> GetProtectionSourcesJobsSummaryReportRequestAsync (List<long?> protectionSourceIds = null, List<string> statuses = null, string outputFormat = null, long? registeredSourceId = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, List<string> environments = null);

        /// <summary>
        /// Get Job Run (Snapshot) summary statistics about the leaf Protection Sources Objects that match the specified filter criteria.
        /// </summary>
        /// <remarks>
        /// For example, if two Job ids are passed in, Snapshot summary statistics about all the leaf Objects that have been protected by the two specified Jobs are reported. For example if a top level registered Source id is passed in, summary statistics about all the Snapshots backing up leaf Objects in the specified Source are reported.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshot summary statistics for the listed Protection Source Objects are reported. (optional)</param>
        /// <param name="statuses">Filter by a list of run statuses. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="registeredSourceId">Specifies an id of a top level Registered Source such as a vCenter Server. If specified, Snapshot summary statistics for all the leaf Protection Sources (such as VMs) that are children of this Registered Source are reported. NOTE: If specified, filtering by other fields is not supported. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots summary statistics for the specified Protection Jobs are reported. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshot summary statistics for Job Runs that started after the specified time are reported. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by end time. Snapshot summary statistics for Job Runs that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, or &#39;kNetapp&#39;. Snapshot summary statistics about the leaf Protection Source Objects of specified environment types are reported. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSourcesSummaryStats&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectionSourcesSummaryStats>>> GetProtectionSourcesJobsSummaryReportRequestAsyncWithHttpInfo (List<long?> protectionSourceIds = null, List<string> statuses = null, string outputFormat = null, long? registeredSourceId = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, List<string> environments = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoveredFrom">Specifies the targets from which the recovery happend. (optional)</param>
        /// <param name="recoverTaskName">Specifies the recover task name. (optional)</param>
        /// <param name="status">Specifies the overall status of the Restore Task to filter. &#39;kReadyToSchedule&#39; indicates the Restore Task is waiting to be scheduled. &#39;kProgressMonitorCreated&#39; indicates the progress monitor for the Restore Task has been created. &#39;kRetrievedFromArchive&#39; indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. &#39;kAdmitted&#39; indicates the task has been admitted. After a task has been admitted, its status does not move back to &#39;kReadyToSchedule&#39; state even if it is rescheduled. &#39;kInProgress&#39; indicates that the Restore Task is in progress. &#39;kFinishingProgressMonitor&#39; indicates that the Restore Task is finishing its progress monitoring. &#39;kFinished&#39; indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="type">Specify the object type to filter with. Specifies the type of Restore Task.  &#39;kRecoverVMs&#39; specifies a Restore Task that recovers VMs. &#39;kCloneVMs&#39; specifies a Restore Task that clones VMs. &#39;kCloneView&#39; specifies a Restore Task that clones a View. &#39;kMountVolumes&#39; specifies a Restore Task that mounts volumes. &#39;kRestoreFiles&#39; specifies a Restore Task that recovers files and folders. (optional)</param>
        /// <param name="userName">Specify the user name to filter with. (optional)</param>
        /// <returns>Task of List&lt;RestoreSourceSummaryByObjectTypeElement&gt;</returns>
        System.Threading.Tasks.Task<List<RestoreSourceSummaryByObjectTypeElement>> GetRestoreSummaryByObjectTypeReportAsync (List<string> recoveredFrom = null, string recoverTaskName = null, string status = null, string outputFormat = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string type = null, string userName = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoveredFrom">Specifies the targets from which the recovery happend. (optional)</param>
        /// <param name="recoverTaskName">Specifies the recover task name. (optional)</param>
        /// <param name="status">Specifies the overall status of the Restore Task to filter. &#39;kReadyToSchedule&#39; indicates the Restore Task is waiting to be scheduled. &#39;kProgressMonitorCreated&#39; indicates the progress monitor for the Restore Task has been created. &#39;kRetrievedFromArchive&#39; indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. &#39;kAdmitted&#39; indicates the task has been admitted. After a task has been admitted, its status does not move back to &#39;kReadyToSchedule&#39; state even if it is rescheduled. &#39;kInProgress&#39; indicates that the Restore Task is in progress. &#39;kFinishingProgressMonitor&#39; indicates that the Restore Task is finishing its progress monitoring. &#39;kFinished&#39; indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="type">Specify the object type to filter with. Specifies the type of Restore Task.  &#39;kRecoverVMs&#39; specifies a Restore Task that recovers VMs. &#39;kCloneVMs&#39; specifies a Restore Task that clones VMs. &#39;kCloneView&#39; specifies a Restore Task that clones a View. &#39;kMountVolumes&#39; specifies a Restore Task that mounts volumes. &#39;kRestoreFiles&#39; specifies a Restore Task that recovers files and folders. (optional)</param>
        /// <param name="userName">Specify the user name to filter with. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RestoreSourceSummaryByObjectTypeElement&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RestoreSourceSummaryByObjectTypeElement>>> GetRestoreSummaryByObjectTypeReportAsyncWithHttpInfo (List<string> recoveredFrom = null, string recoverTaskName = null, string status = null, string outputFormat = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string type = null, string userName = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReportsApi : IReportsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get summary statistics about transferring data from Vaults (External Targets) to this Cohesity Cluster. A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster is stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <returns>DataTransferFromVaultsSummaryResponse</returns>
        public DataTransferFromVaultsSummaryResponse GetDataTransferFromVaultsReportRequest (long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null, long? startTimeMsecs = null)
        {
             ApiResponse<DataTransferFromVaultsSummaryResponse> localVarResponse = GetDataTransferFromVaultsReportRequestWithHttpInfo(endTimeMsecs, vaultIds, outputFormat, startTimeMsecs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get summary statistics about transferring data from Vaults (External Targets) to this Cohesity Cluster. A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster is stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <returns>ApiResponse of DataTransferFromVaultsSummaryResponse</returns>
        public ApiResponse< DataTransferFromVaultsSummaryResponse > GetDataTransferFromVaultsReportRequestWithHttpInfo (long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null, long? startTimeMsecs = null)
        {

            var localVarPath = "/public/reports/dataTransferFromVaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeMsecs", endTimeMsecs)); // query parameter
            if (vaultIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "vaultIds", vaultIds)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (startTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeMsecs", startTimeMsecs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataTransferFromVaultsReportRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTransferFromVaultsSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTransferFromVaultsSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTransferFromVaultsSummaryResponse)));
        }

        /// <summary>
        /// Get summary statistics about transferring data from Vaults (External Targets) to this Cohesity Cluster. A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster is stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <returns>Task of DataTransferFromVaultsSummaryResponse</returns>
        public async System.Threading.Tasks.Task<DataTransferFromVaultsSummaryResponse> GetDataTransferFromVaultsReportRequestAsync (long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null, long? startTimeMsecs = null)
        {
             ApiResponse<DataTransferFromVaultsSummaryResponse> localVarResponse = await GetDataTransferFromVaultsReportRequestAsyncWithHttpInfo(endTimeMsecs, vaultIds, outputFormat, startTimeMsecs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get summary statistics about transferring data from Vaults (External Targets) to this Cohesity Cluster. A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster is stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <returns>Task of ApiResponse (DataTransferFromVaultsSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTransferFromVaultsSummaryResponse>> GetDataTransferFromVaultsReportRequestAsyncWithHttpInfo (long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null, long? startTimeMsecs = null)
        {

            var localVarPath = "/public/reports/dataTransferFromVaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (endTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeMsecs", endTimeMsecs)); // query parameter
            if (vaultIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "vaultIds", vaultIds)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (startTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeMsecs", startTimeMsecs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataTransferFromVaultsReportRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTransferFromVaultsSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTransferFromVaultsSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTransferFromVaultsSummaryResponse)));
        }

        /// <summary>
        /// Get summary statistics about transferring data from the Cohesity Cluster to Vaults (External Targets). A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster can be stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>DataTransferToVaultsSummaryResponse</returns>
        public DataTransferToVaultsSummaryResponse GetDataTransferToVaultsReportRequest (long? startTimeMsecs = null, long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null)
        {
             ApiResponse<DataTransferToVaultsSummaryResponse> localVarResponse = GetDataTransferToVaultsReportRequestWithHttpInfo(startTimeMsecs, endTimeMsecs, vaultIds, outputFormat);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get summary statistics about transferring data from the Cohesity Cluster to Vaults (External Targets). A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster can be stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>ApiResponse of DataTransferToVaultsSummaryResponse</returns>
        public ApiResponse< DataTransferToVaultsSummaryResponse > GetDataTransferToVaultsReportRequestWithHttpInfo (long? startTimeMsecs = null, long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null)
        {

            var localVarPath = "/public/reports/dataTransferToVaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeMsecs", startTimeMsecs)); // query parameter
            if (endTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeMsecs", endTimeMsecs)); // query parameter
            if (vaultIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "vaultIds", vaultIds)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataTransferToVaultsReportRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTransferToVaultsSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTransferToVaultsSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTransferToVaultsSummaryResponse)));
        }

        /// <summary>
        /// Get summary statistics about transferring data from the Cohesity Cluster to Vaults (External Targets). A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster can be stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>Task of DataTransferToVaultsSummaryResponse</returns>
        public async System.Threading.Tasks.Task<DataTransferToVaultsSummaryResponse> GetDataTransferToVaultsReportRequestAsync (long? startTimeMsecs = null, long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null)
        {
             ApiResponse<DataTransferToVaultsSummaryResponse> localVarResponse = await GetDataTransferToVaultsReportRequestAsyncWithHttpInfo(startTimeMsecs, endTimeMsecs, vaultIds, outputFormat);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get summary statistics about transferring data from the Cohesity Cluster to Vaults (External Targets). A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster can be stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startTimeMsecs">Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="endTimeMsecs">Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days. (optional)</param>
        /// <param name="vaultIds">Filter by a list of Vault ids. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <returns>Task of ApiResponse (DataTransferToVaultsSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DataTransferToVaultsSummaryResponse>> GetDataTransferToVaultsReportRequestAsyncWithHttpInfo (long? startTimeMsecs = null, long? endTimeMsecs = null, List<long?> vaultIds = null, string outputFormat = null)
        {

            var localVarPath = "/public/reports/dataTransferToVaults";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeMsecs", startTimeMsecs)); // query parameter
            if (endTimeMsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeMsecs", endTimeMsecs)); // query parameter
            if (vaultIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "vaultIds", vaultIds)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDataTransferToVaultsReportRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DataTransferToVaultsSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DataTransferToVaultsSummaryResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DataTransferToVaultsSummaryResponse)));
        }

        /// <summary>
        /// Get protection details about the specified list of leaf Protection Source Objects (such as a VMs). Returns the Snapshots that contain backups of the specified Protection Source Objects and match the specified filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshots of the specified Protection Source Objects are returned.</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Snapshots of leaf Protection Source Objects for the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;cvs&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="pageCount">Specifies the number of Snapshots to return in the response for pagination purposes. Used in combination with the paginationCookie in the response to return multiple sets of Snapshots. (optional)</param>
        /// <param name="runStatus">Filter by a list of run statuses such as &#39;kRunning&#39;, &#39;kSuccess&#39;, &#39;kFailure&#39; etc. Snapshots of Job Runs with the specified run statuses are reported. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots for the specified Protection Jobs are listed. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshots that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time. Snapshots that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <returns>List&lt;ProtectionSourcesJobRunsReportElement&gt;</returns>
        public List<ProtectionSourcesJobRunsReportElement> GetProtectionSourcesJobRunsReportRequest (List<long?> protectionSourceIds, List<string> environments = null, string outputFormat = null, int? pageCount = null, List<string> runStatus = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null)
        {
             ApiResponse<List<ProtectionSourcesJobRunsReportElement>> localVarResponse = GetProtectionSourcesJobRunsReportRequestWithHttpInfo(protectionSourceIds, environments, outputFormat, pageCount, runStatus, jobIds, startTimeUsecs, endTimeUsecs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get protection details about the specified list of leaf Protection Source Objects (such as a VMs). Returns the Snapshots that contain backups of the specified Protection Source Objects and match the specified filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshots of the specified Protection Source Objects are returned.</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Snapshots of leaf Protection Source Objects for the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;cvs&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="pageCount">Specifies the number of Snapshots to return in the response for pagination purposes. Used in combination with the paginationCookie in the response to return multiple sets of Snapshots. (optional)</param>
        /// <param name="runStatus">Filter by a list of run statuses such as &#39;kRunning&#39;, &#39;kSuccess&#39;, &#39;kFailure&#39; etc. Snapshots of Job Runs with the specified run statuses are reported. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots for the specified Protection Jobs are listed. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshots that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time. Snapshots that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSourcesJobRunsReportElement&gt;</returns>
        public ApiResponse< List<ProtectionSourcesJobRunsReportElement> > GetProtectionSourcesJobRunsReportRequestWithHttpInfo (List<long?> protectionSourceIds, List<string> environments = null, string outputFormat = null, int? pageCount = null, List<string> runStatus = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null)
        {
            // verify the required parameter 'protectionSourceIds' is set
            if (protectionSourceIds == null)
                throw new ApiException(400, "Missing required parameter 'protectionSourceIds' when calling ReportsApi->GetProtectionSourcesJobRunsReportRequest");

            var localVarPath = "/public/reports/protectionSourcesJobRuns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (protectionSourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "protectionSourceIds", protectionSourceIds)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (runStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "runStatus", runStatus)); // query parameter
            if (jobIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "jobIds", jobIds)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionSourcesJobRunsReportRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSourcesJobRunsReportElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSourcesJobRunsReportElement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSourcesJobRunsReportElement>)));
        }

        /// <summary>
        /// Get protection details about the specified list of leaf Protection Source Objects (such as a VMs). Returns the Snapshots that contain backups of the specified Protection Source Objects and match the specified filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshots of the specified Protection Source Objects are returned.</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Snapshots of leaf Protection Source Objects for the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;cvs&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="pageCount">Specifies the number of Snapshots to return in the response for pagination purposes. Used in combination with the paginationCookie in the response to return multiple sets of Snapshots. (optional)</param>
        /// <param name="runStatus">Filter by a list of run statuses such as &#39;kRunning&#39;, &#39;kSuccess&#39;, &#39;kFailure&#39; etc. Snapshots of Job Runs with the specified run statuses are reported. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots for the specified Protection Jobs are listed. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshots that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time. Snapshots that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <returns>Task of List&lt;ProtectionSourcesJobRunsReportElement&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectionSourcesJobRunsReportElement>> GetProtectionSourcesJobRunsReportRequestAsync (List<long?> protectionSourceIds, List<string> environments = null, string outputFormat = null, int? pageCount = null, List<string> runStatus = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null)
        {
             ApiResponse<List<ProtectionSourcesJobRunsReportElement>> localVarResponse = await GetProtectionSourcesJobRunsReportRequestAsyncWithHttpInfo(protectionSourceIds, environments, outputFormat, pageCount, runStatus, jobIds, startTimeUsecs, endTimeUsecs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get protection details about the specified list of leaf Protection Source Objects (such as a VMs). Returns the Snapshots that contain backups of the specified Protection Source Objects and match the specified filter criteria.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshots of the specified Protection Source Objects are returned.</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, &#39;kNetapp&#39;, &#39;kGenericNas&#39;, &#39;kHyperV&#39;, &#39;kAcropolis&#39;, or &#39;kAzure&#39;. Snapshots of leaf Protection Source Objects for the specified environment types are returned. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;cvs&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="pageCount">Specifies the number of Snapshots to return in the response for pagination purposes. Used in combination with the paginationCookie in the response to return multiple sets of Snapshots. (optional)</param>
        /// <param name="runStatus">Filter by a list of run statuses such as &#39;kRunning&#39;, &#39;kSuccess&#39;, &#39;kFailure&#39; etc. Snapshots of Job Runs with the specified run statuses are reported. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots for the specified Protection Jobs are listed. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshots that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time. Snapshots that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSourcesJobRunsReportElement&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectionSourcesJobRunsReportElement>>> GetProtectionSourcesJobRunsReportRequestAsyncWithHttpInfo (List<long?> protectionSourceIds, List<string> environments = null, string outputFormat = null, int? pageCount = null, List<string> runStatus = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null)
        {
            // verify the required parameter 'protectionSourceIds' is set
            if (protectionSourceIds == null)
                throw new ApiException(400, "Missing required parameter 'protectionSourceIds' when calling ReportsApi->GetProtectionSourcesJobRunsReportRequest");

            var localVarPath = "/public/reports/protectionSourcesJobRuns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter
            if (protectionSourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "protectionSourceIds", protectionSourceIds)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (runStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "runStatus", runStatus)); // query parameter
            if (jobIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "jobIds", jobIds)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionSourcesJobRunsReportRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSourcesJobRunsReportElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSourcesJobRunsReportElement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSourcesJobRunsReportElement>)));
        }

        /// <summary>
        /// Get Job Run (Snapshot) summary statistics about the leaf Protection Sources Objects that match the specified filter criteria. For example, if two Job ids are passed in, Snapshot summary statistics about all the leaf Objects that have been protected by the two specified Jobs are reported. For example if a top level registered Source id is passed in, summary statistics about all the Snapshots backing up leaf Objects in the specified Source are reported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshot summary statistics for the listed Protection Source Objects are reported. (optional)</param>
        /// <param name="statuses">Filter by a list of run statuses. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="registeredSourceId">Specifies an id of a top level Registered Source such as a vCenter Server. If specified, Snapshot summary statistics for all the leaf Protection Sources (such as VMs) that are children of this Registered Source are reported. NOTE: If specified, filtering by other fields is not supported. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots summary statistics for the specified Protection Jobs are reported. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshot summary statistics for Job Runs that started after the specified time are reported. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by end time. Snapshot summary statistics for Job Runs that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, or &#39;kNetapp&#39;. Snapshot summary statistics about the leaf Protection Source Objects of specified environment types are reported. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>List&lt;ProtectionSourcesSummaryStats&gt;</returns>
        public List<ProtectionSourcesSummaryStats> GetProtectionSourcesJobsSummaryReportRequest (List<long?> protectionSourceIds = null, List<string> statuses = null, string outputFormat = null, long? registeredSourceId = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, List<string> environments = null)
        {
             ApiResponse<List<ProtectionSourcesSummaryStats>> localVarResponse = GetProtectionSourcesJobsSummaryReportRequestWithHttpInfo(protectionSourceIds, statuses, outputFormat, registeredSourceId, jobIds, startTimeUsecs, endTimeUsecs, environments);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Job Run (Snapshot) summary statistics about the leaf Protection Sources Objects that match the specified filter criteria. For example, if two Job ids are passed in, Snapshot summary statistics about all the leaf Objects that have been protected by the two specified Jobs are reported. For example if a top level registered Source id is passed in, summary statistics about all the Snapshots backing up leaf Objects in the specified Source are reported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshot summary statistics for the listed Protection Source Objects are reported. (optional)</param>
        /// <param name="statuses">Filter by a list of run statuses. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="registeredSourceId">Specifies an id of a top level Registered Source such as a vCenter Server. If specified, Snapshot summary statistics for all the leaf Protection Sources (such as VMs) that are children of this Registered Source are reported. NOTE: If specified, filtering by other fields is not supported. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots summary statistics for the specified Protection Jobs are reported. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshot summary statistics for Job Runs that started after the specified time are reported. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by end time. Snapshot summary statistics for Job Runs that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, or &#39;kNetapp&#39;. Snapshot summary statistics about the leaf Protection Source Objects of specified environment types are reported. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionSourcesSummaryStats&gt;</returns>
        public ApiResponse< List<ProtectionSourcesSummaryStats> > GetProtectionSourcesJobsSummaryReportRequestWithHttpInfo (List<long?> protectionSourceIds = null, List<string> statuses = null, string outputFormat = null, long? registeredSourceId = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, List<string> environments = null)
        {

            var localVarPath = "/public/reports/protectionSourcesJobsSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (protectionSourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "protectionSourceIds", protectionSourceIds)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "statuses", statuses)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (registeredSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "registeredSourceId", registeredSourceId)); // query parameter
            if (jobIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "jobIds", jobIds)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionSourcesJobsSummaryReportRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSourcesSummaryStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSourcesSummaryStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSourcesSummaryStats>)));
        }

        /// <summary>
        /// Get Job Run (Snapshot) summary statistics about the leaf Protection Sources Objects that match the specified filter criteria. For example, if two Job ids are passed in, Snapshot summary statistics about all the leaf Objects that have been protected by the two specified Jobs are reported. For example if a top level registered Source id is passed in, summary statistics about all the Snapshots backing up leaf Objects in the specified Source are reported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshot summary statistics for the listed Protection Source Objects are reported. (optional)</param>
        /// <param name="statuses">Filter by a list of run statuses. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="registeredSourceId">Specifies an id of a top level Registered Source such as a vCenter Server. If specified, Snapshot summary statistics for all the leaf Protection Sources (such as VMs) that are children of this Registered Source are reported. NOTE: If specified, filtering by other fields is not supported. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots summary statistics for the specified Protection Jobs are reported. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshot summary statistics for Job Runs that started after the specified time are reported. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by end time. Snapshot summary statistics for Job Runs that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, or &#39;kNetapp&#39;. Snapshot summary statistics about the leaf Protection Source Objects of specified environment types are reported. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of List&lt;ProtectionSourcesSummaryStats&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectionSourcesSummaryStats>> GetProtectionSourcesJobsSummaryReportRequestAsync (List<long?> protectionSourceIds = null, List<string> statuses = null, string outputFormat = null, long? registeredSourceId = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, List<string> environments = null)
        {
             ApiResponse<List<ProtectionSourcesSummaryStats>> localVarResponse = await GetProtectionSourcesJobsSummaryReportRequestAsyncWithHttpInfo(protectionSourceIds, statuses, outputFormat, registeredSourceId, jobIds, startTimeUsecs, endTimeUsecs, environments);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Job Run (Snapshot) summary statistics about the leaf Protection Sources Objects that match the specified filter criteria. For example, if two Job ids are passed in, Snapshot summary statistics about all the leaf Objects that have been protected by the two specified Jobs are reported. For example if a top level registered Source id is passed in, summary statistics about all the Snapshots backing up leaf Objects in the specified Source are reported.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="protectionSourceIds">Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshot summary statistics for the listed Protection Source Objects are reported. (optional)</param>
        /// <param name="statuses">Filter by a list of run statuses. &#39;kSuccess&#39; indicates that the Job Run was successful. &#39;kRunning&#39; indicates that the Job Run is currently running. &#39;kWarning&#39; indicates that the Job Run was successful but warnings were issued. &#39;kCancelled&#39; indicates that the Job Run was canceled. &#39;kError&#39; indicates the Job Run encountered an error and did not run to completion. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="registeredSourceId">Specifies an id of a top level Registered Source such as a vCenter Server. If specified, Snapshot summary statistics for all the leaf Protection Sources (such as VMs) that are children of this Registered Source are reported. NOTE: If specified, filtering by other fields is not supported. (optional)</param>
        /// <param name="jobIds">Filter by a list of Job ids. Snapshots summary statistics for the specified Protection Jobs are reported. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Snapshot summary statistics for Job Runs that started after the specified time are reported. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by end time. Snapshot summary statistics for Job Runs that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="environments">Filter by a list of environment types such as &#39;kVMware&#39;, &#39;kView&#39;, &#39;kSQL&#39; &#39;kPuppeteer&#39;, &#39;kPhysical&#39;, &#39;kPure&#39;, or &#39;kNetapp&#39;. Snapshot summary statistics about the leaf Protection Source Objects of specified environment types are reported. NOTE: &#39;kPuppeteer&#39; refers to Cohesity&#39;s Remote Adapter. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionSourcesSummaryStats&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectionSourcesSummaryStats>>> GetProtectionSourcesJobsSummaryReportRequestAsyncWithHttpInfo (List<long?> protectionSourceIds = null, List<string> statuses = null, string outputFormat = null, long? registeredSourceId = null, List<long?> jobIds = null, long? startTimeUsecs = null, long? endTimeUsecs = null, List<string> environments = null)
        {

            var localVarPath = "/public/reports/protectionSourcesJobsSummary";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (protectionSourceIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "protectionSourceIds", protectionSourceIds)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "statuses", statuses)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (registeredSourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "registeredSourceId", registeredSourceId)); // query parameter
            if (jobIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "jobIds", jobIds)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (environments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "environments", environments)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionSourcesJobsSummaryReportRequest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionSourcesSummaryStats>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionSourcesSummaryStats>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionSourcesSummaryStats>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoveredFrom">Specifies the targets from which the recovery happend. (optional)</param>
        /// <param name="recoverTaskName">Specifies the recover task name. (optional)</param>
        /// <param name="status">Specifies the overall status of the Restore Task to filter. &#39;kReadyToSchedule&#39; indicates the Restore Task is waiting to be scheduled. &#39;kProgressMonitorCreated&#39; indicates the progress monitor for the Restore Task has been created. &#39;kRetrievedFromArchive&#39; indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. &#39;kAdmitted&#39; indicates the task has been admitted. After a task has been admitted, its status does not move back to &#39;kReadyToSchedule&#39; state even if it is rescheduled. &#39;kInProgress&#39; indicates that the Restore Task is in progress. &#39;kFinishingProgressMonitor&#39; indicates that the Restore Task is finishing its progress monitoring. &#39;kFinished&#39; indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="type">Specify the object type to filter with. Specifies the type of Restore Task.  &#39;kRecoverVMs&#39; specifies a Restore Task that recovers VMs. &#39;kCloneVMs&#39; specifies a Restore Task that clones VMs. &#39;kCloneView&#39; specifies a Restore Task that clones a View. &#39;kMountVolumes&#39; specifies a Restore Task that mounts volumes. &#39;kRestoreFiles&#39; specifies a Restore Task that recovers files and folders. (optional)</param>
        /// <param name="userName">Specify the user name to filter with. (optional)</param>
        /// <returns>List&lt;RestoreSourceSummaryByObjectTypeElement&gt;</returns>
        public List<RestoreSourceSummaryByObjectTypeElement> GetRestoreSummaryByObjectTypeReport (List<string> recoveredFrom = null, string recoverTaskName = null, string status = null, string outputFormat = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string type = null, string userName = null)
        {
             ApiResponse<List<RestoreSourceSummaryByObjectTypeElement>> localVarResponse = GetRestoreSummaryByObjectTypeReportWithHttpInfo(recoveredFrom, recoverTaskName, status, outputFormat, startTimeUsecs, endTimeUsecs, type, userName);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoveredFrom">Specifies the targets from which the recovery happend. (optional)</param>
        /// <param name="recoverTaskName">Specifies the recover task name. (optional)</param>
        /// <param name="status">Specifies the overall status of the Restore Task to filter. &#39;kReadyToSchedule&#39; indicates the Restore Task is waiting to be scheduled. &#39;kProgressMonitorCreated&#39; indicates the progress monitor for the Restore Task has been created. &#39;kRetrievedFromArchive&#39; indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. &#39;kAdmitted&#39; indicates the task has been admitted. After a task has been admitted, its status does not move back to &#39;kReadyToSchedule&#39; state even if it is rescheduled. &#39;kInProgress&#39; indicates that the Restore Task is in progress. &#39;kFinishingProgressMonitor&#39; indicates that the Restore Task is finishing its progress monitoring. &#39;kFinished&#39; indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="type">Specify the object type to filter with. Specifies the type of Restore Task.  &#39;kRecoverVMs&#39; specifies a Restore Task that recovers VMs. &#39;kCloneVMs&#39; specifies a Restore Task that clones VMs. &#39;kCloneView&#39; specifies a Restore Task that clones a View. &#39;kMountVolumes&#39; specifies a Restore Task that mounts volumes. &#39;kRestoreFiles&#39; specifies a Restore Task that recovers files and folders. (optional)</param>
        /// <param name="userName">Specify the user name to filter with. (optional)</param>
        /// <returns>ApiResponse of List&lt;RestoreSourceSummaryByObjectTypeElement&gt;</returns>
        public ApiResponse< List<RestoreSourceSummaryByObjectTypeElement> > GetRestoreSummaryByObjectTypeReportWithHttpInfo (List<string> recoveredFrom = null, string recoverTaskName = null, string status = null, string outputFormat = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string type = null, string userName = null)
        {

            var localVarPath = "/public/reports/restoreSummaryByObjectType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recoveredFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "recoveredFrom", recoveredFrom)); // query parameter
            if (recoverTaskName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recoverTaskName", recoverTaskName)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRestoreSummaryByObjectTypeReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestoreSourceSummaryByObjectTypeElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestoreSourceSummaryByObjectTypeElement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestoreSourceSummaryByObjectTypeElement>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoveredFrom">Specifies the targets from which the recovery happend. (optional)</param>
        /// <param name="recoverTaskName">Specifies the recover task name. (optional)</param>
        /// <param name="status">Specifies the overall status of the Restore Task to filter. &#39;kReadyToSchedule&#39; indicates the Restore Task is waiting to be scheduled. &#39;kProgressMonitorCreated&#39; indicates the progress monitor for the Restore Task has been created. &#39;kRetrievedFromArchive&#39; indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. &#39;kAdmitted&#39; indicates the task has been admitted. After a task has been admitted, its status does not move back to &#39;kReadyToSchedule&#39; state even if it is rescheduled. &#39;kInProgress&#39; indicates that the Restore Task is in progress. &#39;kFinishingProgressMonitor&#39; indicates that the Restore Task is finishing its progress monitoring. &#39;kFinished&#39; indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="type">Specify the object type to filter with. Specifies the type of Restore Task.  &#39;kRecoverVMs&#39; specifies a Restore Task that recovers VMs. &#39;kCloneVMs&#39; specifies a Restore Task that clones VMs. &#39;kCloneView&#39; specifies a Restore Task that clones a View. &#39;kMountVolumes&#39; specifies a Restore Task that mounts volumes. &#39;kRestoreFiles&#39; specifies a Restore Task that recovers files and folders. (optional)</param>
        /// <param name="userName">Specify the user name to filter with. (optional)</param>
        /// <returns>Task of List&lt;RestoreSourceSummaryByObjectTypeElement&gt;</returns>
        public async System.Threading.Tasks.Task<List<RestoreSourceSummaryByObjectTypeElement>> GetRestoreSummaryByObjectTypeReportAsync (List<string> recoveredFrom = null, string recoverTaskName = null, string status = null, string outputFormat = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string type = null, string userName = null)
        {
             ApiResponse<List<RestoreSourceSummaryByObjectTypeElement>> localVarResponse = await GetRestoreSummaryByObjectTypeReportAsyncWithHttpInfo(recoveredFrom, recoverTaskName, status, outputFormat, startTimeUsecs, endTimeUsecs, type, userName);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recoveredFrom">Specifies the targets from which the recovery happend. (optional)</param>
        /// <param name="recoverTaskName">Specifies the recover task name. (optional)</param>
        /// <param name="status">Specifies the overall status of the Restore Task to filter. &#39;kReadyToSchedule&#39; indicates the Restore Task is waiting to be scheduled. &#39;kProgressMonitorCreated&#39; indicates the progress monitor for the Restore Task has been created. &#39;kRetrievedFromArchive&#39; indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. &#39;kAdmitted&#39; indicates the task has been admitted. After a task has been admitted, its status does not move back to &#39;kReadyToSchedule&#39; state even if it is rescheduled. &#39;kInProgress&#39; indicates that the Restore Task is in progress. &#39;kFinishingProgressMonitor&#39; indicates that the Restore Task is finishing its progress monitoring. &#39;kFinished&#39; indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task. (optional)</param>
        /// <param name="outputFormat">Specifies the format for the output such as &#39;csv&#39; or &#39;json&#39;. If not specified, the json format is returned. If &#39;csv&#39; is specified, a comma-separated list with a heading row is returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="endTimeUsecs">Filter by an end time specified as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="type">Specify the object type to filter with. Specifies the type of Restore Task.  &#39;kRecoverVMs&#39; specifies a Restore Task that recovers VMs. &#39;kCloneVMs&#39; specifies a Restore Task that clones VMs. &#39;kCloneView&#39; specifies a Restore Task that clones a View. &#39;kMountVolumes&#39; specifies a Restore Task that mounts volumes. &#39;kRestoreFiles&#39; specifies a Restore Task that recovers files and folders. (optional)</param>
        /// <param name="userName">Specify the user name to filter with. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RestoreSourceSummaryByObjectTypeElement&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RestoreSourceSummaryByObjectTypeElement>>> GetRestoreSummaryByObjectTypeReportAsyncWithHttpInfo (List<string> recoveredFrom = null, string recoverTaskName = null, string status = null, string outputFormat = null, long? startTimeUsecs = null, long? endTimeUsecs = null, string type = null, string userName = null)
        {

            var localVarPath = "/public/reports/restoreSummaryByObjectType";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recoveredFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "recoveredFrom", recoveredFrom)); // query parameter
            if (recoverTaskName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recoverTaskName", recoverTaskName)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRestoreSummaryByObjectTypeReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RestoreSourceSummaryByObjectTypeElement>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RestoreSourceSummaryByObjectTypeElement>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RestoreSourceSummaryByObjectTypeElement>)));
        }

    }
}
