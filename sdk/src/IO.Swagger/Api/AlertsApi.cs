/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAlertsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an Alert Resolution.
        /// </summary>
        /// <remarks>
        /// Create an Alert Resolution and apply it to one or more Alerts. Mark the Alerts as resolved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create an Alert Resolution and apply it to the specified Alerts.</param>
        /// <returns>AlertResolution</returns>
        AlertResolution CreateResolution (AlertResolutionRequest body);

        /// <summary>
        /// Create an Alert Resolution.
        /// </summary>
        /// <remarks>
        /// Create an Alert Resolution and apply it to one or more Alerts. Mark the Alerts as resolved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create an Alert Resolution and apply it to the specified Alerts.</param>
        /// <returns>ApiResponse of AlertResolution</returns>
        ApiResponse<AlertResolution> CreateResolutionWithHttpInfo (AlertResolutionRequest body);
        /// <summary>
        /// List details about a single Alert.
        /// </summary>
        /// <remarks>
        /// Returns the Alert object corresponding to the specified id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert to return.</param>
        /// <returns>Alert</returns>
        Alert GetAlertById (string id);

        /// <summary>
        /// List details about a single Alert.
        /// </summary>
        /// <remarks>
        /// Returns the Alert object corresponding to the specified id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert to return.</param>
        /// <returns>ApiResponse of Alert</returns>
        ApiResponse<Alert> GetAlertByIdWithHttpInfo (string id);
        /// <summary>
        /// List the Alerts on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns all Alert objects found on the Cohesity Cluster that match the filter criteria specified using parameters. The Cohesity Cluster creates an Alert when a potential problem is found or when a threshold has been exceeded on the Cohesity Cluster. If no filter parameters are specified, all Alert objects are returned. Each object provides details about the Alert such as the Status and Severity.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxAlerts">Limit the number of returned Alerts. The newest Alerts are returned.</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="alertTypeList">Filter by a list of Alert Types. (optional)</param>
        /// <param name="alertStateList">Filter by a list of Alert States such as &#39;kOpen&#39; and &#39;kResolved&#39;. (optional)</param>
        /// <param name="alertSeverityList">Filter by a list of Alert Severities such as &#39;kCritical&#39;, &#39;kWarning&#39; and &#39;kInfo&#39;. (optional)</param>
        /// <param name="resolutionIdList">Filter by a list of Resolution Ids. (optional)</param>
        /// <param name="alertCategoryList">Filter by a list of Alert Categories such as &#39;kDisk&#39;, &#39;kNode&#39;, &#39;kCluster&#39;, &#39;kNodeHealth&#39;, &#39;kClusterHealth&#39;, &#39;kBackupRestore&#39;, &#39;kEncryption&#39; and &#39;kArchivalRestore&#39;. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>List&lt;Alert&gt;</returns>
        List<Alert> GetAlerts (int? maxAlerts, List<string> alertIdList = null, List<int?> alertTypeList = null, List<string> alertStateList = null, List<string> alertSeverityList = null, List<long?> resolutionIdList = null, List<string> alertCategoryList = null, long? startDateUsecs = null, long? endDateUsecs = null);

        /// <summary>
        /// List the Alerts on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns all Alert objects found on the Cohesity Cluster that match the filter criteria specified using parameters. The Cohesity Cluster creates an Alert when a potential problem is found or when a threshold has been exceeded on the Cohesity Cluster. If no filter parameters are specified, all Alert objects are returned. Each object provides details about the Alert such as the Status and Severity.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxAlerts">Limit the number of returned Alerts. The newest Alerts are returned.</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="alertTypeList">Filter by a list of Alert Types. (optional)</param>
        /// <param name="alertStateList">Filter by a list of Alert States such as &#39;kOpen&#39; and &#39;kResolved&#39;. (optional)</param>
        /// <param name="alertSeverityList">Filter by a list of Alert Severities such as &#39;kCritical&#39;, &#39;kWarning&#39; and &#39;kInfo&#39;. (optional)</param>
        /// <param name="resolutionIdList">Filter by a list of Resolution Ids. (optional)</param>
        /// <param name="alertCategoryList">Filter by a list of Alert Categories such as &#39;kDisk&#39;, &#39;kNode&#39;, &#39;kCluster&#39;, &#39;kNodeHealth&#39;, &#39;kClusterHealth&#39;, &#39;kBackupRestore&#39;, &#39;kEncryption&#39; and &#39;kArchivalRestore&#39;. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>ApiResponse of List&lt;Alert&gt;</returns>
        ApiResponse<List<Alert>> GetAlertsWithHttpInfo (int? maxAlerts, List<string> alertIdList = null, List<int?> alertTypeList = null, List<string> alertStateList = null, List<string> alertSeverityList = null, List<long?> resolutionIdList = null, List<string> alertCategoryList = null, long? startDateUsecs = null, long? endDateUsecs = null);
        /// <summary>
        /// List details about a single Alert Resolution.
        /// </summary>
        /// <remarks>
        /// Returns the Alert Resolution object corresponding to passed in Alert Resolution Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <returns>AlertResolution</returns>
        AlertResolution GetResolutionById (long? id);

        /// <summary>
        /// List details about a single Alert Resolution.
        /// </summary>
        /// <remarks>
        /// Returns the Alert Resolution object corresponding to passed in Alert Resolution Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <returns>ApiResponse of AlertResolution</returns>
        ApiResponse<AlertResolution> GetResolutionByIdWithHttpInfo (long? id);
        /// <summary>
        /// List the Alert Resolutions on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns all Alert Resolution objects found on the Cohesity Cluster that match the filter criteria specified using parameters. If no filter parameters are specified, all Alert Resolution objects are returned. Each object provides details about the Alert Resolution such as the resolution summary and details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResolutions">Limit the number of returned Alert Resolutions. The newest Resolutions are returned.</param>
        /// <param name="resolutionIdList">Filter by a list of Alert Resolution ids. (optional)</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>List&lt;AlertResolution&gt;</returns>
        List<AlertResolution> GetResolutions (int? maxResolutions, List<long?> resolutionIdList = null, List<string> alertIdList = null, long? startDateUsecs = null, long? endDateUsecs = null);

        /// <summary>
        /// List the Alert Resolutions on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns all Alert Resolution objects found on the Cohesity Cluster that match the filter criteria specified using parameters. If no filter parameters are specified, all Alert Resolution objects are returned. Each object provides details about the Alert Resolution such as the resolution summary and details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResolutions">Limit the number of returned Alert Resolutions. The newest Resolutions are returned.</param>
        /// <param name="resolutionIdList">Filter by a list of Alert Resolution ids. (optional)</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>ApiResponse of List&lt;AlertResolution&gt;</returns>
        ApiResponse<List<AlertResolution>> GetResolutionsWithHttpInfo (int? maxResolutions, List<long?> resolutionIdList = null, List<string> alertIdList = null, long? startDateUsecs = null, long? endDateUsecs = null);
        /// <summary>
        /// Apply an existing Alert Resolution to additional Alerts.
        /// </summary>
        /// <remarks>
        /// Apply an existing Alert Resolution to one or more additional Alerts. Mark those additional Alerts as resolved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <param name="body">Request to apply an existing resolution to the specified Alerts.</param>
        /// <returns>AlertResolution</returns>
        AlertResolution UpdateResolution (long? id, UpdateResolutionParams body);

        /// <summary>
        /// Apply an existing Alert Resolution to additional Alerts.
        /// </summary>
        /// <remarks>
        /// Apply an existing Alert Resolution to one or more additional Alerts. Mark those additional Alerts as resolved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <param name="body">Request to apply an existing resolution to the specified Alerts.</param>
        /// <returns>ApiResponse of AlertResolution</returns>
        ApiResponse<AlertResolution> UpdateResolutionWithHttpInfo (long? id, UpdateResolutionParams body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an Alert Resolution.
        /// </summary>
        /// <remarks>
        /// Create an Alert Resolution and apply it to one or more Alerts. Mark the Alerts as resolved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create an Alert Resolution and apply it to the specified Alerts.</param>
        /// <returns>Task of AlertResolution</returns>
        System.Threading.Tasks.Task<AlertResolution> CreateResolutionAsync (AlertResolutionRequest body);

        /// <summary>
        /// Create an Alert Resolution.
        /// </summary>
        /// <remarks>
        /// Create an Alert Resolution and apply it to one or more Alerts. Mark the Alerts as resolved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create an Alert Resolution and apply it to the specified Alerts.</param>
        /// <returns>Task of ApiResponse (AlertResolution)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertResolution>> CreateResolutionAsyncWithHttpInfo (AlertResolutionRequest body);
        /// <summary>
        /// List details about a single Alert.
        /// </summary>
        /// <remarks>
        /// Returns the Alert object corresponding to the specified id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert to return.</param>
        /// <returns>Task of Alert</returns>
        System.Threading.Tasks.Task<Alert> GetAlertByIdAsync (string id);

        /// <summary>
        /// List details about a single Alert.
        /// </summary>
        /// <remarks>
        /// Returns the Alert object corresponding to the specified id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert to return.</param>
        /// <returns>Task of ApiResponse (Alert)</returns>
        System.Threading.Tasks.Task<ApiResponse<Alert>> GetAlertByIdAsyncWithHttpInfo (string id);
        /// <summary>
        /// List the Alerts on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns all Alert objects found on the Cohesity Cluster that match the filter criteria specified using parameters. The Cohesity Cluster creates an Alert when a potential problem is found or when a threshold has been exceeded on the Cohesity Cluster. If no filter parameters are specified, all Alert objects are returned. Each object provides details about the Alert such as the Status and Severity.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxAlerts">Limit the number of returned Alerts. The newest Alerts are returned.</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="alertTypeList">Filter by a list of Alert Types. (optional)</param>
        /// <param name="alertStateList">Filter by a list of Alert States such as &#39;kOpen&#39; and &#39;kResolved&#39;. (optional)</param>
        /// <param name="alertSeverityList">Filter by a list of Alert Severities such as &#39;kCritical&#39;, &#39;kWarning&#39; and &#39;kInfo&#39;. (optional)</param>
        /// <param name="resolutionIdList">Filter by a list of Resolution Ids. (optional)</param>
        /// <param name="alertCategoryList">Filter by a list of Alert Categories such as &#39;kDisk&#39;, &#39;kNode&#39;, &#39;kCluster&#39;, &#39;kNodeHealth&#39;, &#39;kClusterHealth&#39;, &#39;kBackupRestore&#39;, &#39;kEncryption&#39; and &#39;kArchivalRestore&#39;. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>Task of List&lt;Alert&gt;</returns>
        System.Threading.Tasks.Task<List<Alert>> GetAlertsAsync (int? maxAlerts, List<string> alertIdList = null, List<int?> alertTypeList = null, List<string> alertStateList = null, List<string> alertSeverityList = null, List<long?> resolutionIdList = null, List<string> alertCategoryList = null, long? startDateUsecs = null, long? endDateUsecs = null);

        /// <summary>
        /// List the Alerts on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns all Alert objects found on the Cohesity Cluster that match the filter criteria specified using parameters. The Cohesity Cluster creates an Alert when a potential problem is found or when a threshold has been exceeded on the Cohesity Cluster. If no filter parameters are specified, all Alert objects are returned. Each object provides details about the Alert such as the Status and Severity.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxAlerts">Limit the number of returned Alerts. The newest Alerts are returned.</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="alertTypeList">Filter by a list of Alert Types. (optional)</param>
        /// <param name="alertStateList">Filter by a list of Alert States such as &#39;kOpen&#39; and &#39;kResolved&#39;. (optional)</param>
        /// <param name="alertSeverityList">Filter by a list of Alert Severities such as &#39;kCritical&#39;, &#39;kWarning&#39; and &#39;kInfo&#39;. (optional)</param>
        /// <param name="resolutionIdList">Filter by a list of Resolution Ids. (optional)</param>
        /// <param name="alertCategoryList">Filter by a list of Alert Categories such as &#39;kDisk&#39;, &#39;kNode&#39;, &#39;kCluster&#39;, &#39;kNodeHealth&#39;, &#39;kClusterHealth&#39;, &#39;kBackupRestore&#39;, &#39;kEncryption&#39; and &#39;kArchivalRestore&#39;. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Alert&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Alert>>> GetAlertsAsyncWithHttpInfo (int? maxAlerts, List<string> alertIdList = null, List<int?> alertTypeList = null, List<string> alertStateList = null, List<string> alertSeverityList = null, List<long?> resolutionIdList = null, List<string> alertCategoryList = null, long? startDateUsecs = null, long? endDateUsecs = null);
        /// <summary>
        /// List details about a single Alert Resolution.
        /// </summary>
        /// <remarks>
        /// Returns the Alert Resolution object corresponding to passed in Alert Resolution Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <returns>Task of AlertResolution</returns>
        System.Threading.Tasks.Task<AlertResolution> GetResolutionByIdAsync (long? id);

        /// <summary>
        /// List details about a single Alert Resolution.
        /// </summary>
        /// <remarks>
        /// Returns the Alert Resolution object corresponding to passed in Alert Resolution Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <returns>Task of ApiResponse (AlertResolution)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertResolution>> GetResolutionByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List the Alert Resolutions on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns all Alert Resolution objects found on the Cohesity Cluster that match the filter criteria specified using parameters. If no filter parameters are specified, all Alert Resolution objects are returned. Each object provides details about the Alert Resolution such as the resolution summary and details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResolutions">Limit the number of returned Alert Resolutions. The newest Resolutions are returned.</param>
        /// <param name="resolutionIdList">Filter by a list of Alert Resolution ids. (optional)</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>Task of List&lt;AlertResolution&gt;</returns>
        System.Threading.Tasks.Task<List<AlertResolution>> GetResolutionsAsync (int? maxResolutions, List<long?> resolutionIdList = null, List<string> alertIdList = null, long? startDateUsecs = null, long? endDateUsecs = null);

        /// <summary>
        /// List the Alert Resolutions on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Returns all Alert Resolution objects found on the Cohesity Cluster that match the filter criteria specified using parameters. If no filter parameters are specified, all Alert Resolution objects are returned. Each object provides details about the Alert Resolution such as the resolution summary and details.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResolutions">Limit the number of returned Alert Resolutions. The newest Resolutions are returned.</param>
        /// <param name="resolutionIdList">Filter by a list of Alert Resolution ids. (optional)</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AlertResolution&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AlertResolution>>> GetResolutionsAsyncWithHttpInfo (int? maxResolutions, List<long?> resolutionIdList = null, List<string> alertIdList = null, long? startDateUsecs = null, long? endDateUsecs = null);
        /// <summary>
        /// Apply an existing Alert Resolution to additional Alerts.
        /// </summary>
        /// <remarks>
        /// Apply an existing Alert Resolution to one or more additional Alerts. Mark those additional Alerts as resolved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <param name="body">Request to apply an existing resolution to the specified Alerts.</param>
        /// <returns>Task of AlertResolution</returns>
        System.Threading.Tasks.Task<AlertResolution> UpdateResolutionAsync (long? id, UpdateResolutionParams body);

        /// <summary>
        /// Apply an existing Alert Resolution to additional Alerts.
        /// </summary>
        /// <remarks>
        /// Apply an existing Alert Resolution to one or more additional Alerts. Mark those additional Alerts as resolved.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <param name="body">Request to apply an existing resolution to the specified Alerts.</param>
        /// <returns>Task of ApiResponse (AlertResolution)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertResolution>> UpdateResolutionAsyncWithHttpInfo (long? id, UpdateResolutionParams body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AlertsApi : IAlertsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlertsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AlertsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an Alert Resolution. Create an Alert Resolution and apply it to one or more Alerts. Mark the Alerts as resolved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create an Alert Resolution and apply it to the specified Alerts.</param>
        /// <returns>AlertResolution</returns>
        public AlertResolution CreateResolution (AlertResolutionRequest body)
        {
             ApiResponse<AlertResolution> localVarResponse = CreateResolutionWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Alert Resolution. Create an Alert Resolution and apply it to one or more Alerts. Mark the Alerts as resolved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create an Alert Resolution and apply it to the specified Alerts.</param>
        /// <returns>ApiResponse of AlertResolution</returns>
        public ApiResponse< AlertResolution > CreateResolutionWithHttpInfo (AlertResolutionRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->CreateResolution");

            var localVarPath = "/public/alertResolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResolution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResolution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResolution)));
        }

        /// <summary>
        /// Create an Alert Resolution. Create an Alert Resolution and apply it to one or more Alerts. Mark the Alerts as resolved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create an Alert Resolution and apply it to the specified Alerts.</param>
        /// <returns>Task of AlertResolution</returns>
        public async System.Threading.Tasks.Task<AlertResolution> CreateResolutionAsync (AlertResolutionRequest body)
        {
             ApiResponse<AlertResolution> localVarResponse = await CreateResolutionAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Alert Resolution. Create an Alert Resolution and apply it to one or more Alerts. Mark the Alerts as resolved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create an Alert Resolution and apply it to the specified Alerts.</param>
        /// <returns>Task of ApiResponse (AlertResolution)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertResolution>> CreateResolutionAsyncWithHttpInfo (AlertResolutionRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->CreateResolution");

            var localVarPath = "/public/alertResolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResolution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResolution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResolution)));
        }

        /// <summary>
        /// List details about a single Alert. Returns the Alert object corresponding to the specified id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert to return.</param>
        /// <returns>Alert</returns>
        public Alert GetAlertById (string id)
        {
             ApiResponse<Alert> localVarResponse = GetAlertByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single Alert. Returns the Alert object corresponding to the specified id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert to return.</param>
        /// <returns>ApiResponse of Alert</returns>
        public ApiResponse< Alert > GetAlertByIdWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->GetAlertById");

            var localVarPath = "/public/alerts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlertById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Alert>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Alert) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alert)));
        }

        /// <summary>
        /// List details about a single Alert. Returns the Alert object corresponding to the specified id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert to return.</param>
        /// <returns>Task of Alert</returns>
        public async System.Threading.Tasks.Task<Alert> GetAlertByIdAsync (string id)
        {
             ApiResponse<Alert> localVarResponse = await GetAlertByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single Alert. Returns the Alert object corresponding to the specified id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert to return.</param>
        /// <returns>Task of ApiResponse (Alert)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Alert>> GetAlertByIdAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->GetAlertById");

            var localVarPath = "/public/alerts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlertById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Alert>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Alert) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Alert)));
        }

        /// <summary>
        /// List the Alerts on the Cohesity Cluster. Returns all Alert objects found on the Cohesity Cluster that match the filter criteria specified using parameters. The Cohesity Cluster creates an Alert when a potential problem is found or when a threshold has been exceeded on the Cohesity Cluster. If no filter parameters are specified, all Alert objects are returned. Each object provides details about the Alert such as the Status and Severity.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxAlerts">Limit the number of returned Alerts. The newest Alerts are returned.</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="alertTypeList">Filter by a list of Alert Types. (optional)</param>
        /// <param name="alertStateList">Filter by a list of Alert States such as &#39;kOpen&#39; and &#39;kResolved&#39;. (optional)</param>
        /// <param name="alertSeverityList">Filter by a list of Alert Severities such as &#39;kCritical&#39;, &#39;kWarning&#39; and &#39;kInfo&#39;. (optional)</param>
        /// <param name="resolutionIdList">Filter by a list of Resolution Ids. (optional)</param>
        /// <param name="alertCategoryList">Filter by a list of Alert Categories such as &#39;kDisk&#39;, &#39;kNode&#39;, &#39;kCluster&#39;, &#39;kNodeHealth&#39;, &#39;kClusterHealth&#39;, &#39;kBackupRestore&#39;, &#39;kEncryption&#39; and &#39;kArchivalRestore&#39;. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>List&lt;Alert&gt;</returns>
        public List<Alert> GetAlerts (int? maxAlerts, List<string> alertIdList = null, List<int?> alertTypeList = null, List<string> alertStateList = null, List<string> alertSeverityList = null, List<long?> resolutionIdList = null, List<string> alertCategoryList = null, long? startDateUsecs = null, long? endDateUsecs = null)
        {
             ApiResponse<List<Alert>> localVarResponse = GetAlertsWithHttpInfo(maxAlerts, alertIdList, alertTypeList, alertStateList, alertSeverityList, resolutionIdList, alertCategoryList, startDateUsecs, endDateUsecs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the Alerts on the Cohesity Cluster. Returns all Alert objects found on the Cohesity Cluster that match the filter criteria specified using parameters. The Cohesity Cluster creates an Alert when a potential problem is found or when a threshold has been exceeded on the Cohesity Cluster. If no filter parameters are specified, all Alert objects are returned. Each object provides details about the Alert such as the Status and Severity.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxAlerts">Limit the number of returned Alerts. The newest Alerts are returned.</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="alertTypeList">Filter by a list of Alert Types. (optional)</param>
        /// <param name="alertStateList">Filter by a list of Alert States such as &#39;kOpen&#39; and &#39;kResolved&#39;. (optional)</param>
        /// <param name="alertSeverityList">Filter by a list of Alert Severities such as &#39;kCritical&#39;, &#39;kWarning&#39; and &#39;kInfo&#39;. (optional)</param>
        /// <param name="resolutionIdList">Filter by a list of Resolution Ids. (optional)</param>
        /// <param name="alertCategoryList">Filter by a list of Alert Categories such as &#39;kDisk&#39;, &#39;kNode&#39;, &#39;kCluster&#39;, &#39;kNodeHealth&#39;, &#39;kClusterHealth&#39;, &#39;kBackupRestore&#39;, &#39;kEncryption&#39; and &#39;kArchivalRestore&#39;. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>ApiResponse of List&lt;Alert&gt;</returns>
        public ApiResponse< List<Alert> > GetAlertsWithHttpInfo (int? maxAlerts, List<string> alertIdList = null, List<int?> alertTypeList = null, List<string> alertStateList = null, List<string> alertSeverityList = null, List<long?> resolutionIdList = null, List<string> alertCategoryList = null, long? startDateUsecs = null, long? endDateUsecs = null)
        {
            // verify the required parameter 'maxAlerts' is set
            if (maxAlerts == null)
                throw new ApiException(400, "Missing required parameter 'maxAlerts' when calling AlertsApi->GetAlerts");

            var localVarPath = "/public/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (alertIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertIdList", alertIdList)); // query parameter
            if (alertTypeList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertTypeList", alertTypeList)); // query parameter
            if (alertStateList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertStateList", alertStateList)); // query parameter
            if (alertSeverityList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertSeverityList", alertSeverityList)); // query parameter
            if (resolutionIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "resolutionIdList", resolutionIdList)); // query parameter
            if (alertCategoryList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertCategoryList", alertCategoryList)); // query parameter
            if (startDateUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDateUsecs", startDateUsecs)); // query parameter
            if (endDateUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDateUsecs", endDateUsecs)); // query parameter
            if (maxAlerts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAlerts", maxAlerts)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Alert>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Alert>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Alert>)));
        }

        /// <summary>
        /// List the Alerts on the Cohesity Cluster. Returns all Alert objects found on the Cohesity Cluster that match the filter criteria specified using parameters. The Cohesity Cluster creates an Alert when a potential problem is found or when a threshold has been exceeded on the Cohesity Cluster. If no filter parameters are specified, all Alert objects are returned. Each object provides details about the Alert such as the Status and Severity.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxAlerts">Limit the number of returned Alerts. The newest Alerts are returned.</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="alertTypeList">Filter by a list of Alert Types. (optional)</param>
        /// <param name="alertStateList">Filter by a list of Alert States such as &#39;kOpen&#39; and &#39;kResolved&#39;. (optional)</param>
        /// <param name="alertSeverityList">Filter by a list of Alert Severities such as &#39;kCritical&#39;, &#39;kWarning&#39; and &#39;kInfo&#39;. (optional)</param>
        /// <param name="resolutionIdList">Filter by a list of Resolution Ids. (optional)</param>
        /// <param name="alertCategoryList">Filter by a list of Alert Categories such as &#39;kDisk&#39;, &#39;kNode&#39;, &#39;kCluster&#39;, &#39;kNodeHealth&#39;, &#39;kClusterHealth&#39;, &#39;kBackupRestore&#39;, &#39;kEncryption&#39; and &#39;kArchivalRestore&#39;. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>Task of List&lt;Alert&gt;</returns>
        public async System.Threading.Tasks.Task<List<Alert>> GetAlertsAsync (int? maxAlerts, List<string> alertIdList = null, List<int?> alertTypeList = null, List<string> alertStateList = null, List<string> alertSeverityList = null, List<long?> resolutionIdList = null, List<string> alertCategoryList = null, long? startDateUsecs = null, long? endDateUsecs = null)
        {
             ApiResponse<List<Alert>> localVarResponse = await GetAlertsAsyncWithHttpInfo(maxAlerts, alertIdList, alertTypeList, alertStateList, alertSeverityList, resolutionIdList, alertCategoryList, startDateUsecs, endDateUsecs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the Alerts on the Cohesity Cluster. Returns all Alert objects found on the Cohesity Cluster that match the filter criteria specified using parameters. The Cohesity Cluster creates an Alert when a potential problem is found or when a threshold has been exceeded on the Cohesity Cluster. If no filter parameters are specified, all Alert objects are returned. Each object provides details about the Alert such as the Status and Severity.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxAlerts">Limit the number of returned Alerts. The newest Alerts are returned.</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="alertTypeList">Filter by a list of Alert Types. (optional)</param>
        /// <param name="alertStateList">Filter by a list of Alert States such as &#39;kOpen&#39; and &#39;kResolved&#39;. (optional)</param>
        /// <param name="alertSeverityList">Filter by a list of Alert Severities such as &#39;kCritical&#39;, &#39;kWarning&#39; and &#39;kInfo&#39;. (optional)</param>
        /// <param name="resolutionIdList">Filter by a list of Resolution Ids. (optional)</param>
        /// <param name="alertCategoryList">Filter by a list of Alert Categories such as &#39;kDisk&#39;, &#39;kNode&#39;, &#39;kCluster&#39;, &#39;kNodeHealth&#39;, &#39;kClusterHealth&#39;, &#39;kBackupRestore&#39;, &#39;kEncryption&#39; and &#39;kArchivalRestore&#39;. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Alert&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Alert>>> GetAlertsAsyncWithHttpInfo (int? maxAlerts, List<string> alertIdList = null, List<int?> alertTypeList = null, List<string> alertStateList = null, List<string> alertSeverityList = null, List<long?> resolutionIdList = null, List<string> alertCategoryList = null, long? startDateUsecs = null, long? endDateUsecs = null)
        {
            // verify the required parameter 'maxAlerts' is set
            if (maxAlerts == null)
                throw new ApiException(400, "Missing required parameter 'maxAlerts' when calling AlertsApi->GetAlerts");

            var localVarPath = "/public/alerts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (alertIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertIdList", alertIdList)); // query parameter
            if (alertTypeList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertTypeList", alertTypeList)); // query parameter
            if (alertStateList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertStateList", alertStateList)); // query parameter
            if (alertSeverityList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertSeverityList", alertSeverityList)); // query parameter
            if (resolutionIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "resolutionIdList", resolutionIdList)); // query parameter
            if (alertCategoryList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertCategoryList", alertCategoryList)); // query parameter
            if (startDateUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDateUsecs", startDateUsecs)); // query parameter
            if (endDateUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDateUsecs", endDateUsecs)); // query parameter
            if (maxAlerts != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxAlerts", maxAlerts)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAlerts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Alert>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Alert>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Alert>)));
        }

        /// <summary>
        /// List details about a single Alert Resolution. Returns the Alert Resolution object corresponding to passed in Alert Resolution Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <returns>AlertResolution</returns>
        public AlertResolution GetResolutionById (long? id)
        {
             ApiResponse<AlertResolution> localVarResponse = GetResolutionByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single Alert Resolution. Returns the Alert Resolution object corresponding to passed in Alert Resolution Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <returns>ApiResponse of AlertResolution</returns>
        public ApiResponse< AlertResolution > GetResolutionByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->GetResolutionById");

            var localVarPath = "/public/alertResolutions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResolutionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResolution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResolution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResolution)));
        }

        /// <summary>
        /// List details about a single Alert Resolution. Returns the Alert Resolution object corresponding to passed in Alert Resolution Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <returns>Task of AlertResolution</returns>
        public async System.Threading.Tasks.Task<AlertResolution> GetResolutionByIdAsync (long? id)
        {
             ApiResponse<AlertResolution> localVarResponse = await GetResolutionByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single Alert Resolution. Returns the Alert Resolution object corresponding to passed in Alert Resolution Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <returns>Task of ApiResponse (AlertResolution)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertResolution>> GetResolutionByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->GetResolutionById");

            var localVarPath = "/public/alertResolutions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResolutionById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResolution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResolution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResolution)));
        }

        /// <summary>
        /// List the Alert Resolutions on the Cohesity Cluster. Returns all Alert Resolution objects found on the Cohesity Cluster that match the filter criteria specified using parameters. If no filter parameters are specified, all Alert Resolution objects are returned. Each object provides details about the Alert Resolution such as the resolution summary and details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResolutions">Limit the number of returned Alert Resolutions. The newest Resolutions are returned.</param>
        /// <param name="resolutionIdList">Filter by a list of Alert Resolution ids. (optional)</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>List&lt;AlertResolution&gt;</returns>
        public List<AlertResolution> GetResolutions (int? maxResolutions, List<long?> resolutionIdList = null, List<string> alertIdList = null, long? startDateUsecs = null, long? endDateUsecs = null)
        {
             ApiResponse<List<AlertResolution>> localVarResponse = GetResolutionsWithHttpInfo(maxResolutions, resolutionIdList, alertIdList, startDateUsecs, endDateUsecs);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the Alert Resolutions on the Cohesity Cluster. Returns all Alert Resolution objects found on the Cohesity Cluster that match the filter criteria specified using parameters. If no filter parameters are specified, all Alert Resolution objects are returned. Each object provides details about the Alert Resolution such as the resolution summary and details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResolutions">Limit the number of returned Alert Resolutions. The newest Resolutions are returned.</param>
        /// <param name="resolutionIdList">Filter by a list of Alert Resolution ids. (optional)</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>ApiResponse of List&lt;AlertResolution&gt;</returns>
        public ApiResponse< List<AlertResolution> > GetResolutionsWithHttpInfo (int? maxResolutions, List<long?> resolutionIdList = null, List<string> alertIdList = null, long? startDateUsecs = null, long? endDateUsecs = null)
        {
            // verify the required parameter 'maxResolutions' is set
            if (maxResolutions == null)
                throw new ApiException(400, "Missing required parameter 'maxResolutions' when calling AlertsApi->GetResolutions");

            var localVarPath = "/public/alertResolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resolutionIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "resolutionIdList", resolutionIdList)); // query parameter
            if (alertIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertIdList", alertIdList)); // query parameter
            if (startDateUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDateUsecs", startDateUsecs)); // query parameter
            if (endDateUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDateUsecs", endDateUsecs)); // query parameter
            if (maxResolutions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResolutions", maxResolutions)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResolutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertResolution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AlertResolution>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertResolution>)));
        }

        /// <summary>
        /// List the Alert Resolutions on the Cohesity Cluster. Returns all Alert Resolution objects found on the Cohesity Cluster that match the filter criteria specified using parameters. If no filter parameters are specified, all Alert Resolution objects are returned. Each object provides details about the Alert Resolution such as the resolution summary and details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResolutions">Limit the number of returned Alert Resolutions. The newest Resolutions are returned.</param>
        /// <param name="resolutionIdList">Filter by a list of Alert Resolution ids. (optional)</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>Task of List&lt;AlertResolution&gt;</returns>
        public async System.Threading.Tasks.Task<List<AlertResolution>> GetResolutionsAsync (int? maxResolutions, List<long?> resolutionIdList = null, List<string> alertIdList = null, long? startDateUsecs = null, long? endDateUsecs = null)
        {
             ApiResponse<List<AlertResolution>> localVarResponse = await GetResolutionsAsyncWithHttpInfo(maxResolutions, resolutionIdList, alertIdList, startDateUsecs, endDateUsecs);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the Alert Resolutions on the Cohesity Cluster. Returns all Alert Resolution objects found on the Cohesity Cluster that match the filter criteria specified using parameters. If no filter parameters are specified, all Alert Resolution objects are returned. Each object provides details about the Alert Resolution such as the resolution summary and details.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="maxResolutions">Limit the number of returned Alert Resolutions. The newest Resolutions are returned.</param>
        /// <param name="resolutionIdList">Filter by a list of Alert Resolution ids. (optional)</param>
        /// <param name="alertIdList">Filter by a list of Alert ids. (optional)</param>
        /// <param name="startDateUsecs">Filter by Start Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <param name="endDateUsecs">Filter by End Date and Time by specifying a Unix epoch time in microseconds. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;AlertResolution&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AlertResolution>>> GetResolutionsAsyncWithHttpInfo (int? maxResolutions, List<long?> resolutionIdList = null, List<string> alertIdList = null, long? startDateUsecs = null, long? endDateUsecs = null)
        {
            // verify the required parameter 'maxResolutions' is set
            if (maxResolutions == null)
                throw new ApiException(400, "Missing required parameter 'maxResolutions' when calling AlertsApi->GetResolutions");

            var localVarPath = "/public/alertResolutions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (resolutionIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "resolutionIdList", resolutionIdList)); // query parameter
            if (alertIdList != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "alertIdList", alertIdList)); // query parameter
            if (startDateUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDateUsecs", startDateUsecs)); // query parameter
            if (endDateUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDateUsecs", endDateUsecs)); // query parameter
            if (maxResolutions != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxResolutions", maxResolutions)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResolutions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertResolution>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AlertResolution>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertResolution>)));
        }

        /// <summary>
        /// Apply an existing Alert Resolution to additional Alerts. Apply an existing Alert Resolution to one or more additional Alerts. Mark those additional Alerts as resolved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <param name="body">Request to apply an existing resolution to the specified Alerts.</param>
        /// <returns>AlertResolution</returns>
        public AlertResolution UpdateResolution (long? id, UpdateResolutionParams body)
        {
             ApiResponse<AlertResolution> localVarResponse = UpdateResolutionWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Apply an existing Alert Resolution to additional Alerts. Apply an existing Alert Resolution to one or more additional Alerts. Mark those additional Alerts as resolved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <param name="body">Request to apply an existing resolution to the specified Alerts.</param>
        /// <returns>ApiResponse of AlertResolution</returns>
        public ApiResponse< AlertResolution > UpdateResolutionWithHttpInfo (long? id, UpdateResolutionParams body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->UpdateResolution");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->UpdateResolution");

            var localVarPath = "/public/alertResolutions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResolution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResolution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResolution)));
        }

        /// <summary>
        /// Apply an existing Alert Resolution to additional Alerts. Apply an existing Alert Resolution to one or more additional Alerts. Mark those additional Alerts as resolved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <param name="body">Request to apply an existing resolution to the specified Alerts.</param>
        /// <returns>Task of AlertResolution</returns>
        public async System.Threading.Tasks.Task<AlertResolution> UpdateResolutionAsync (long? id, UpdateResolutionParams body)
        {
             ApiResponse<AlertResolution> localVarResponse = await UpdateResolutionAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Apply an existing Alert Resolution to additional Alerts. Apply an existing Alert Resolution to one or more additional Alerts. Mark those additional Alerts as resolved.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Unique id of the Alert Resolution to return.</param>
        /// <param name="body">Request to apply an existing resolution to the specified Alerts.</param>
        /// <returns>Task of ApiResponse (AlertResolution)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertResolution>> UpdateResolutionAsyncWithHttpInfo (long? id, UpdateResolutionParams body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->UpdateResolution");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AlertsApi->UpdateResolution");

            var localVarPath = "/public/alertResolutions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateResolution", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertResolution>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AlertResolution) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertResolution)));
        }

    }
}
