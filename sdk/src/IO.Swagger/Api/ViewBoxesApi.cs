/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewBoxesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the created Domain (View Box).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Storage Domain (View Box) configuration.</param>
        /// <returns>ViewBox</returns>
        ViewBox CreateViewBox (CreateViewBoxParams body);

        /// <summary>
        /// Create a Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the created Domain (View Box).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Storage Domain (View Box) configuration.</param>
        /// <returns>ApiResponse of ViewBox</returns>
        ApiResponse<ViewBox> CreateViewBoxWithHttpInfo (CreateViewBoxParams body);
        /// <summary>
        /// List details about a single Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the Domain (View Box) corresponding to the specified Domain (View Box) Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <returns>ViewBox</returns>
        ViewBox GetViewBoxById (long? id);

        /// <summary>
        /// List details about a single Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the Domain (View Box) corresponding to the specified Domain (View Box) Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <returns>ApiResponse of ViewBox</returns>
        ApiResponse<ViewBox> GetViewBoxByIdWithHttpInfo (long? id);
        /// <summary>
        /// List Domains (View Boxes) filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Domains (View Boxes) currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Filter by a list of Storage Domain (View Box) ids. If empty, View Boxes are not filtered by id. (optional)</param>
        /// <param name="names">Filter by a list of Storage Domain (View Box) Names. If empty, Storage Domains (View Boxes) are not filtered by Name. (optional)</param>
        /// <param name="clusterPartitionIds">Filter by a list of Cluster Partition Ids. (optional)</param>
        /// <param name="fetchStats">Specifies whether to include usage and performance statistics. (optional)</param>
        /// <returns>List&lt;ViewBox&gt;</returns>
        List<ViewBox> GetViewBoxes (List<long?> ids = null, List<string> names = null, List<long?> clusterPartitionIds = null, bool? fetchStats = null);

        /// <summary>
        /// List Domains (View Boxes) filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Domains (View Boxes) currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Filter by a list of Storage Domain (View Box) ids. If empty, View Boxes are not filtered by id. (optional)</param>
        /// <param name="names">Filter by a list of Storage Domain (View Box) Names. If empty, Storage Domains (View Boxes) are not filtered by Name. (optional)</param>
        /// <param name="clusterPartitionIds">Filter by a list of Cluster Partition Ids. (optional)</param>
        /// <param name="fetchStats">Specifies whether to include usage and performance statistics. (optional)</param>
        /// <returns>ApiResponse of List&lt;ViewBox&gt;</returns>
        ApiResponse<List<ViewBox>> GetViewBoxesWithHttpInfo (List<long?> ids = null, List<string> names = null, List<long?> clusterPartitionIds = null, bool? fetchStats = null);
        /// <summary>
        /// Update a Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the updated Domain (View Box).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <param name="body">Request to update a Storage Domain (View Box) configuration.</param>
        /// <returns>ViewBox</returns>
        ViewBox UpdateViewBox (long? id, CreateViewBoxParams body);

        /// <summary>
        /// Update a Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the updated Domain (View Box).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <param name="body">Request to update a Storage Domain (View Box) configuration.</param>
        /// <returns>ApiResponse of ViewBox</returns>
        ApiResponse<ViewBox> UpdateViewBoxWithHttpInfo (long? id, CreateViewBoxParams body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the created Domain (View Box).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Storage Domain (View Box) configuration.</param>
        /// <returns>Task of ViewBox</returns>
        System.Threading.Tasks.Task<ViewBox> CreateViewBoxAsync (CreateViewBoxParams body);

        /// <summary>
        /// Create a Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the created Domain (View Box).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Storage Domain (View Box) configuration.</param>
        /// <returns>Task of ApiResponse (ViewBox)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewBox>> CreateViewBoxAsyncWithHttpInfo (CreateViewBoxParams body);
        /// <summary>
        /// List details about a single Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the Domain (View Box) corresponding to the specified Domain (View Box) Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <returns>Task of ViewBox</returns>
        System.Threading.Tasks.Task<ViewBox> GetViewBoxByIdAsync (long? id);

        /// <summary>
        /// List details about a single Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the Domain (View Box) corresponding to the specified Domain (View Box) Id.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <returns>Task of ApiResponse (ViewBox)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewBox>> GetViewBoxByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List Domains (View Boxes) filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Domains (View Boxes) currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Filter by a list of Storage Domain (View Box) ids. If empty, View Boxes are not filtered by id. (optional)</param>
        /// <param name="names">Filter by a list of Storage Domain (View Box) Names. If empty, Storage Domains (View Boxes) are not filtered by Name. (optional)</param>
        /// <param name="clusterPartitionIds">Filter by a list of Cluster Partition Ids. (optional)</param>
        /// <param name="fetchStats">Specifies whether to include usage and performance statistics. (optional)</param>
        /// <returns>Task of List&lt;ViewBox&gt;</returns>
        System.Threading.Tasks.Task<List<ViewBox>> GetViewBoxesAsync (List<long?> ids = null, List<string> names = null, List<long?> clusterPartitionIds = null, bool? fetchStats = null);

        /// <summary>
        /// List Domains (View Boxes) filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Domains (View Boxes) currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Filter by a list of Storage Domain (View Box) ids. If empty, View Boxes are not filtered by id. (optional)</param>
        /// <param name="names">Filter by a list of Storage Domain (View Box) Names. If empty, Storage Domains (View Boxes) are not filtered by Name. (optional)</param>
        /// <param name="clusterPartitionIds">Filter by a list of Cluster Partition Ids. (optional)</param>
        /// <param name="fetchStats">Specifies whether to include usage and performance statistics. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ViewBox&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ViewBox>>> GetViewBoxesAsyncWithHttpInfo (List<long?> ids = null, List<string> names = null, List<long?> clusterPartitionIds = null, bool? fetchStats = null);
        /// <summary>
        /// Update a Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the updated Domain (View Box).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <param name="body">Request to update a Storage Domain (View Box) configuration.</param>
        /// <returns>Task of ViewBox</returns>
        System.Threading.Tasks.Task<ViewBox> UpdateViewBoxAsync (long? id, CreateViewBoxParams body);

        /// <summary>
        /// Update a Domain (View Box).
        /// </summary>
        /// <remarks>
        /// Returns the updated Domain (View Box).
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <param name="body">Request to update a Storage Domain (View Box) configuration.</param>
        /// <returns>Task of ApiResponse (ViewBox)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewBox>> UpdateViewBoxAsyncWithHttpInfo (long? id, CreateViewBoxParams body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewBoxesApi : IViewBoxesApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewBoxesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewBoxesApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewBoxesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewBoxesApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a Domain (View Box). Returns the created Domain (View Box).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Storage Domain (View Box) configuration.</param>
        /// <returns>ViewBox</returns>
        public ViewBox CreateViewBox (CreateViewBoxParams body)
        {
             ApiResponse<ViewBox> localVarResponse = CreateViewBoxWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Domain (View Box). Returns the created Domain (View Box).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Storage Domain (View Box) configuration.</param>
        /// <returns>ApiResponse of ViewBox</returns>
        public ApiResponse< ViewBox > CreateViewBoxWithHttpInfo (CreateViewBoxParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewBoxesApi->CreateViewBox");

            var localVarPath = "/public/viewBoxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateViewBox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewBox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewBox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewBox)));
        }

        /// <summary>
        /// Create a Domain (View Box). Returns the created Domain (View Box).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Storage Domain (View Box) configuration.</param>
        /// <returns>Task of ViewBox</returns>
        public async System.Threading.Tasks.Task<ViewBox> CreateViewBoxAsync (CreateViewBoxParams body)
        {
             ApiResponse<ViewBox> localVarResponse = await CreateViewBoxAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Domain (View Box). Returns the created Domain (View Box).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a Storage Domain (View Box) configuration.</param>
        /// <returns>Task of ApiResponse (ViewBox)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewBox>> CreateViewBoxAsyncWithHttpInfo (CreateViewBoxParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewBoxesApi->CreateViewBox");

            var localVarPath = "/public/viewBoxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateViewBox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewBox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewBox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewBox)));
        }

        /// <summary>
        /// List details about a single Domain (View Box). Returns the Domain (View Box) corresponding to the specified Domain (View Box) Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <returns>ViewBox</returns>
        public ViewBox GetViewBoxById (long? id)
        {
             ApiResponse<ViewBox> localVarResponse = GetViewBoxByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single Domain (View Box). Returns the Domain (View Box) corresponding to the specified Domain (View Box) Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <returns>ApiResponse of ViewBox</returns>
        public ApiResponse< ViewBox > GetViewBoxByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ViewBoxesApi->GetViewBoxById");

            var localVarPath = "/public/viewBoxes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewBoxById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewBox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewBox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewBox)));
        }

        /// <summary>
        /// List details about a single Domain (View Box). Returns the Domain (View Box) corresponding to the specified Domain (View Box) Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <returns>Task of ViewBox</returns>
        public async System.Threading.Tasks.Task<ViewBox> GetViewBoxByIdAsync (long? id)
        {
             ApiResponse<ViewBox> localVarResponse = await GetViewBoxByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single Domain (View Box). Returns the Domain (View Box) corresponding to the specified Domain (View Box) Id.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <returns>Task of ApiResponse (ViewBox)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewBox>> GetViewBoxByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ViewBoxesApi->GetViewBoxById");

            var localVarPath = "/public/viewBoxes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewBoxById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewBox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewBox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewBox)));
        }

        /// <summary>
        /// List Domains (View Boxes) filtered by the specified parameters. If no parameters are specified, all Domains (View Boxes) currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Filter by a list of Storage Domain (View Box) ids. If empty, View Boxes are not filtered by id. (optional)</param>
        /// <param name="names">Filter by a list of Storage Domain (View Box) Names. If empty, Storage Domains (View Boxes) are not filtered by Name. (optional)</param>
        /// <param name="clusterPartitionIds">Filter by a list of Cluster Partition Ids. (optional)</param>
        /// <param name="fetchStats">Specifies whether to include usage and performance statistics. (optional)</param>
        /// <returns>List&lt;ViewBox&gt;</returns>
        public List<ViewBox> GetViewBoxes (List<long?> ids = null, List<string> names = null, List<long?> clusterPartitionIds = null, bool? fetchStats = null)
        {
             ApiResponse<List<ViewBox>> localVarResponse = GetViewBoxesWithHttpInfo(ids, names, clusterPartitionIds, fetchStats);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Domains (View Boxes) filtered by the specified parameters. If no parameters are specified, all Domains (View Boxes) currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Filter by a list of Storage Domain (View Box) ids. If empty, View Boxes are not filtered by id. (optional)</param>
        /// <param name="names">Filter by a list of Storage Domain (View Box) Names. If empty, Storage Domains (View Boxes) are not filtered by Name. (optional)</param>
        /// <param name="clusterPartitionIds">Filter by a list of Cluster Partition Ids. (optional)</param>
        /// <param name="fetchStats">Specifies whether to include usage and performance statistics. (optional)</param>
        /// <returns>ApiResponse of List&lt;ViewBox&gt;</returns>
        public ApiResponse< List<ViewBox> > GetViewBoxesWithHttpInfo (List<long?> ids = null, List<string> names = null, List<long?> clusterPartitionIds = null, bool? fetchStats = null)
        {

            var localVarPath = "/public/viewBoxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "names", names)); // query parameter
            if (clusterPartitionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "clusterPartitionIds", clusterPartitionIds)); // query parameter
            if (fetchStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fetchStats", fetchStats)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewBoxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ViewBox>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ViewBox>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ViewBox>)));
        }

        /// <summary>
        /// List Domains (View Boxes) filtered by the specified parameters. If no parameters are specified, all Domains (View Boxes) currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Filter by a list of Storage Domain (View Box) ids. If empty, View Boxes are not filtered by id. (optional)</param>
        /// <param name="names">Filter by a list of Storage Domain (View Box) Names. If empty, Storage Domains (View Boxes) are not filtered by Name. (optional)</param>
        /// <param name="clusterPartitionIds">Filter by a list of Cluster Partition Ids. (optional)</param>
        /// <param name="fetchStats">Specifies whether to include usage and performance statistics. (optional)</param>
        /// <returns>Task of List&lt;ViewBox&gt;</returns>
        public async System.Threading.Tasks.Task<List<ViewBox>> GetViewBoxesAsync (List<long?> ids = null, List<string> names = null, List<long?> clusterPartitionIds = null, bool? fetchStats = null)
        {
             ApiResponse<List<ViewBox>> localVarResponse = await GetViewBoxesAsyncWithHttpInfo(ids, names, clusterPartitionIds, fetchStats);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Domains (View Boxes) filtered by the specified parameters. If no parameters are specified, all Domains (View Boxes) currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ids">Filter by a list of Storage Domain (View Box) ids. If empty, View Boxes are not filtered by id. (optional)</param>
        /// <param name="names">Filter by a list of Storage Domain (View Box) Names. If empty, Storage Domains (View Boxes) are not filtered by Name. (optional)</param>
        /// <param name="clusterPartitionIds">Filter by a list of Cluster Partition Ids. (optional)</param>
        /// <param name="fetchStats">Specifies whether to include usage and performance statistics. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ViewBox&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ViewBox>>> GetViewBoxesAsyncWithHttpInfo (List<long?> ids = null, List<string> names = null, List<long?> clusterPartitionIds = null, bool? fetchStats = null)
        {

            var localVarPath = "/public/viewBoxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "ids", ids)); // query parameter
            if (names != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "names", names)); // query parameter
            if (clusterPartitionIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "clusterPartitionIds", clusterPartitionIds)); // query parameter
            if (fetchStats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fetchStats", fetchStats)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewBoxes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ViewBox>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ViewBox>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ViewBox>)));
        }

        /// <summary>
        /// Update a Domain (View Box). Returns the updated Domain (View Box).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <param name="body">Request to update a Storage Domain (View Box) configuration.</param>
        /// <returns>ViewBox</returns>
        public ViewBox UpdateViewBox (long? id, CreateViewBoxParams body)
        {
             ApiResponse<ViewBox> localVarResponse = UpdateViewBoxWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Domain (View Box). Returns the updated Domain (View Box).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <param name="body">Request to update a Storage Domain (View Box) configuration.</param>
        /// <returns>ApiResponse of ViewBox</returns>
        public ApiResponse< ViewBox > UpdateViewBoxWithHttpInfo (long? id, CreateViewBoxParams body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ViewBoxesApi->UpdateViewBox");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewBoxesApi->UpdateViewBox");

            var localVarPath = "/public/viewBoxes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateViewBox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewBox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewBox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewBox)));
        }

        /// <summary>
        /// Update a Domain (View Box). Returns the updated Domain (View Box).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <param name="body">Request to update a Storage Domain (View Box) configuration.</param>
        /// <returns>Task of ViewBox</returns>
        public async System.Threading.Tasks.Task<ViewBox> UpdateViewBoxAsync (long? id, CreateViewBoxParams body)
        {
             ApiResponse<ViewBox> localVarResponse = await UpdateViewBoxAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a Domain (View Box). Returns the updated Domain (View Box).
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Storage Domain (View Box)</param>
        /// <param name="body">Request to update a Storage Domain (View Box) configuration.</param>
        /// <returns>Task of ApiResponse (ViewBox)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewBox>> UpdateViewBoxAsyncWithHttpInfo (long? id, CreateViewBoxParams body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ViewBoxesApi->UpdateViewBox");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewBoxesApi->UpdateViewBox");

            var localVarPath = "/public/viewBoxes/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateViewBox", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewBox>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewBox) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewBox)));
        }

    }
}
