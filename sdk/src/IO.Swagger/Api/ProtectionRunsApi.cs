/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProtectionRunsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel a Protection Job run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CancelProtectionJobRun (long? id, CancelProtectionJobRunParam body = null);

        /// <summary>
        /// Cancel a Protection Job run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelProtectionJobRunWithHttpInfo (long? id, CancelProtectionJobRunParam body = null);
        /// <summary>
        /// List Protection Job Runs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, Job Runs currently on the Cohesity Cluster are returned. Both running and completed Job Runs are reported. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by a Protection Job that is specified by id. If not specified, all Job Runs for all Protection Jobs are returned. (optional)</param>
        /// <param name="startedTimeUsecs">Return a specific Job Run by specifying a time and a jobId. Specify the time when the Job Run started as a Unix epoch Timestamp (in microseconds). If this field is specified, jobId must also be specified. (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that completed before the specified end time are returned. (optional)</param>
        /// <param name="numRuns">Specify the number of Job Runs to return. The newest Job Runs are returned. (optional)</param>
        /// <param name="excludeTasks">If true, the individual backup status for all the objects protected by the Job Run are not populated in the response. For example in a VMware environment, the status of backing up each VM associated with a Job is not returned. (optional)</param>
        /// <param name="sourceId">Filter by source id. Only Job Runs protecting the specified source (such as a VM or View) are returned. The source id is assigned by the Cohesity Cluster. (optional)</param>
        /// <param name="excludeErrorRuns">Filter out Jobs Runs with errors by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Job Runs with errors are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Job Runs that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="runTypes">Filter by run type such as &#39;kFull&#39;, &#39;kRegular&#39; or &#39;kLog&#39;. If not specified, Job Runs of all types are returned. (optional)</param>
        /// <param name="excludeNonRestoreableRuns">Filter out jobs runs that cannot be restored by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Runs without any successful object will be returned. The default value is false. (optional)</param>
        /// <returns>List&lt;ProtectionRunInstance&gt;</returns>
        List<ProtectionRunInstance> GetProtectionRuns (long? jobId = null, long? startedTimeUsecs = null, long? endTimeUsecs = null, long? numRuns = null, bool? excludeTasks = null, long? sourceId = null, bool? excludeErrorRuns = null, long? startTimeUsecs = null, List<string> runTypes = null, bool? excludeNonRestoreableRuns = null);

        /// <summary>
        /// List Protection Job Runs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, Job Runs currently on the Cohesity Cluster are returned. Both running and completed Job Runs are reported. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by a Protection Job that is specified by id. If not specified, all Job Runs for all Protection Jobs are returned. (optional)</param>
        /// <param name="startedTimeUsecs">Return a specific Job Run by specifying a time and a jobId. Specify the time when the Job Run started as a Unix epoch Timestamp (in microseconds). If this field is specified, jobId must also be specified. (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that completed before the specified end time are returned. (optional)</param>
        /// <param name="numRuns">Specify the number of Job Runs to return. The newest Job Runs are returned. (optional)</param>
        /// <param name="excludeTasks">If true, the individual backup status for all the objects protected by the Job Run are not populated in the response. For example in a VMware environment, the status of backing up each VM associated with a Job is not returned. (optional)</param>
        /// <param name="sourceId">Filter by source id. Only Job Runs protecting the specified source (such as a VM or View) are returned. The source id is assigned by the Cohesity Cluster. (optional)</param>
        /// <param name="excludeErrorRuns">Filter out Jobs Runs with errors by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Job Runs with errors are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Job Runs that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="runTypes">Filter by run type such as &#39;kFull&#39;, &#39;kRegular&#39; or &#39;kLog&#39;. If not specified, Job Runs of all types are returned. (optional)</param>
        /// <param name="excludeNonRestoreableRuns">Filter out jobs runs that cannot be restored by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Runs without any successful object will be returned. The default value is false. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionRunInstance&gt;</returns>
        ApiResponse<List<ProtectionRunInstance>> GetProtectionRunsWithHttpInfo (long? jobId = null, long? startedTimeUsecs = null, long? endTimeUsecs = null, long? numRuns = null, bool? excludeTasks = null, long? sourceId = null, bool? excludeErrorRuns = null, long? startTimeUsecs = null, List<string> runTypes = null, bool? excludeNonRestoreableRuns = null);
        /// <summary>
        /// Update how long Protection Job Runs and their snapshots are retained on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Update the expiration date (retention period) for the specified Protection Job Runs and their snapshots. After an expiration time is reached, the Job Run and its snapshots are deleted. If an expiration time of 0 is specified, a Job Run and its snapshots are immediately deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update the expiration time of Protection Job Runs.</param>
        /// <returns></returns>
        void UpdateProtectionRuns (UpdateProtectionJobRunsParam body);

        /// <summary>
        /// Update how long Protection Job Runs and their snapshots are retained on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Update the expiration date (retention period) for the specified Protection Job Runs and their snapshots. After an expiration time is reached, the Job Run and its snapshots are deleted. If an expiration time of 0 is specified, a Job Run and its snapshots are immediately deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update the expiration time of Protection Job Runs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateProtectionRunsWithHttpInfo (UpdateProtectionJobRunsParam body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel a Protection Job run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelProtectionJobRunAsync (long? id, CancelProtectionJobRunParam body = null);

        /// <summary>
        /// Cancel a Protection Job run.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelProtectionJobRunAsyncWithHttpInfo (long? id, CancelProtectionJobRunParam body = null);
        /// <summary>
        /// List Protection Job Runs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, Job Runs currently on the Cohesity Cluster are returned. Both running and completed Job Runs are reported. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by a Protection Job that is specified by id. If not specified, all Job Runs for all Protection Jobs are returned. (optional)</param>
        /// <param name="startedTimeUsecs">Return a specific Job Run by specifying a time and a jobId. Specify the time when the Job Run started as a Unix epoch Timestamp (in microseconds). If this field is specified, jobId must also be specified. (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that completed before the specified end time are returned. (optional)</param>
        /// <param name="numRuns">Specify the number of Job Runs to return. The newest Job Runs are returned. (optional)</param>
        /// <param name="excludeTasks">If true, the individual backup status for all the objects protected by the Job Run are not populated in the response. For example in a VMware environment, the status of backing up each VM associated with a Job is not returned. (optional)</param>
        /// <param name="sourceId">Filter by source id. Only Job Runs protecting the specified source (such as a VM or View) are returned. The source id is assigned by the Cohesity Cluster. (optional)</param>
        /// <param name="excludeErrorRuns">Filter out Jobs Runs with errors by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Job Runs with errors are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Job Runs that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="runTypes">Filter by run type such as &#39;kFull&#39;, &#39;kRegular&#39; or &#39;kLog&#39;. If not specified, Job Runs of all types are returned. (optional)</param>
        /// <param name="excludeNonRestoreableRuns">Filter out jobs runs that cannot be restored by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Runs without any successful object will be returned. The default value is false. (optional)</param>
        /// <returns>Task of List&lt;ProtectionRunInstance&gt;</returns>
        System.Threading.Tasks.Task<List<ProtectionRunInstance>> GetProtectionRunsAsync (long? jobId = null, long? startedTimeUsecs = null, long? endTimeUsecs = null, long? numRuns = null, bool? excludeTasks = null, long? sourceId = null, bool? excludeErrorRuns = null, long? startTimeUsecs = null, List<string> runTypes = null, bool? excludeNonRestoreableRuns = null);

        /// <summary>
        /// List Protection Job Runs filtered by the specified parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, Job Runs currently on the Cohesity Cluster are returned. Both running and completed Job Runs are reported. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by a Protection Job that is specified by id. If not specified, all Job Runs for all Protection Jobs are returned. (optional)</param>
        /// <param name="startedTimeUsecs">Return a specific Job Run by specifying a time and a jobId. Specify the time when the Job Run started as a Unix epoch Timestamp (in microseconds). If this field is specified, jobId must also be specified. (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that completed before the specified end time are returned. (optional)</param>
        /// <param name="numRuns">Specify the number of Job Runs to return. The newest Job Runs are returned. (optional)</param>
        /// <param name="excludeTasks">If true, the individual backup status for all the objects protected by the Job Run are not populated in the response. For example in a VMware environment, the status of backing up each VM associated with a Job is not returned. (optional)</param>
        /// <param name="sourceId">Filter by source id. Only Job Runs protecting the specified source (such as a VM or View) are returned. The source id is assigned by the Cohesity Cluster. (optional)</param>
        /// <param name="excludeErrorRuns">Filter out Jobs Runs with errors by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Job Runs with errors are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Job Runs that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="runTypes">Filter by run type such as &#39;kFull&#39;, &#39;kRegular&#39; or &#39;kLog&#39;. If not specified, Job Runs of all types are returned. (optional)</param>
        /// <param name="excludeNonRestoreableRuns">Filter out jobs runs that cannot be restored by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Runs without any successful object will be returned. The default value is false. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionRunInstance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ProtectionRunInstance>>> GetProtectionRunsAsyncWithHttpInfo (long? jobId = null, long? startedTimeUsecs = null, long? endTimeUsecs = null, long? numRuns = null, bool? excludeTasks = null, long? sourceId = null, bool? excludeErrorRuns = null, long? startTimeUsecs = null, List<string> runTypes = null, bool? excludeNonRestoreableRuns = null);
        /// <summary>
        /// Update how long Protection Job Runs and their snapshots are retained on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Update the expiration date (retention period) for the specified Protection Job Runs and their snapshots. After an expiration time is reached, the Job Run and its snapshots are deleted. If an expiration time of 0 is specified, a Job Run and its snapshots are immediately deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update the expiration time of Protection Job Runs.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateProtectionRunsAsync (UpdateProtectionJobRunsParam body);

        /// <summary>
        /// Update how long Protection Job Runs and their snapshots are retained on the Cohesity Cluster.
        /// </summary>
        /// <remarks>
        /// Update the expiration date (retention period) for the specified Protection Job Runs and their snapshots. After an expiration time is reached, the Job Run and its snapshots are deleted. If an expiration time of 0 is specified, a Job Run and its snapshots are immediately deleted.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update the expiration time of Protection Job Runs.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProtectionRunsAsyncWithHttpInfo (UpdateProtectionJobRunsParam body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProtectionRunsApi : IProtectionRunsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectionRunsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProtectionRunsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProtectionRunsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProtectionRunsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel a Protection Job run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CancelProtectionJobRun (long? id, CancelProtectionJobRunParam body = null)
        {
             CancelProtectionJobRunWithHttpInfo(id, body);
        }

        /// <summary>
        /// Cancel a Protection Job run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CancelProtectionJobRunWithHttpInfo (long? id, CancelProtectionJobRunParam body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionRunsApi->CancelProtectionJobRun");

            var localVarPath = "/public/protectionRuns/cancel/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelProtectionJobRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Cancel a Protection Job run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelProtectionJobRunAsync (long? id, CancelProtectionJobRunParam body = null)
        {
             await CancelProtectionJobRunAsyncWithHttpInfo(id, body);

        }

        /// <summary>
        /// Cancel a Protection Job run. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Specifies a unique id of the Protection Job.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CancelProtectionJobRunAsyncWithHttpInfo (long? id, CancelProtectionJobRunParam body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ProtectionRunsApi->CancelProtectionJobRun");

            var localVarPath = "/public/protectionRuns/cancel/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelProtectionJobRun", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List Protection Job Runs filtered by the specified parameters. If no parameters are specified, Job Runs currently on the Cohesity Cluster are returned. Both running and completed Job Runs are reported. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by a Protection Job that is specified by id. If not specified, all Job Runs for all Protection Jobs are returned. (optional)</param>
        /// <param name="startedTimeUsecs">Return a specific Job Run by specifying a time and a jobId. Specify the time when the Job Run started as a Unix epoch Timestamp (in microseconds). If this field is specified, jobId must also be specified. (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that completed before the specified end time are returned. (optional)</param>
        /// <param name="numRuns">Specify the number of Job Runs to return. The newest Job Runs are returned. (optional)</param>
        /// <param name="excludeTasks">If true, the individual backup status for all the objects protected by the Job Run are not populated in the response. For example in a VMware environment, the status of backing up each VM associated with a Job is not returned. (optional)</param>
        /// <param name="sourceId">Filter by source id. Only Job Runs protecting the specified source (such as a VM or View) are returned. The source id is assigned by the Cohesity Cluster. (optional)</param>
        /// <param name="excludeErrorRuns">Filter out Jobs Runs with errors by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Job Runs with errors are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Job Runs that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="runTypes">Filter by run type such as &#39;kFull&#39;, &#39;kRegular&#39; or &#39;kLog&#39;. If not specified, Job Runs of all types are returned. (optional)</param>
        /// <param name="excludeNonRestoreableRuns">Filter out jobs runs that cannot be restored by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Runs without any successful object will be returned. The default value is false. (optional)</param>
        /// <returns>List&lt;ProtectionRunInstance&gt;</returns>
        public List<ProtectionRunInstance> GetProtectionRuns (long? jobId = null, long? startedTimeUsecs = null, long? endTimeUsecs = null, long? numRuns = null, bool? excludeTasks = null, long? sourceId = null, bool? excludeErrorRuns = null, long? startTimeUsecs = null, List<string> runTypes = null, bool? excludeNonRestoreableRuns = null)
        {
             ApiResponse<List<ProtectionRunInstance>> localVarResponse = GetProtectionRunsWithHttpInfo(jobId, startedTimeUsecs, endTimeUsecs, numRuns, excludeTasks, sourceId, excludeErrorRuns, startTimeUsecs, runTypes, excludeNonRestoreableRuns);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Protection Job Runs filtered by the specified parameters. If no parameters are specified, Job Runs currently on the Cohesity Cluster are returned. Both running and completed Job Runs are reported. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by a Protection Job that is specified by id. If not specified, all Job Runs for all Protection Jobs are returned. (optional)</param>
        /// <param name="startedTimeUsecs">Return a specific Job Run by specifying a time and a jobId. Specify the time when the Job Run started as a Unix epoch Timestamp (in microseconds). If this field is specified, jobId must also be specified. (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that completed before the specified end time are returned. (optional)</param>
        /// <param name="numRuns">Specify the number of Job Runs to return. The newest Job Runs are returned. (optional)</param>
        /// <param name="excludeTasks">If true, the individual backup status for all the objects protected by the Job Run are not populated in the response. For example in a VMware environment, the status of backing up each VM associated with a Job is not returned. (optional)</param>
        /// <param name="sourceId">Filter by source id. Only Job Runs protecting the specified source (such as a VM or View) are returned. The source id is assigned by the Cohesity Cluster. (optional)</param>
        /// <param name="excludeErrorRuns">Filter out Jobs Runs with errors by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Job Runs with errors are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Job Runs that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="runTypes">Filter by run type such as &#39;kFull&#39;, &#39;kRegular&#39; or &#39;kLog&#39;. If not specified, Job Runs of all types are returned. (optional)</param>
        /// <param name="excludeNonRestoreableRuns">Filter out jobs runs that cannot be restored by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Runs without any successful object will be returned. The default value is false. (optional)</param>
        /// <returns>ApiResponse of List&lt;ProtectionRunInstance&gt;</returns>
        public ApiResponse< List<ProtectionRunInstance> > GetProtectionRunsWithHttpInfo (long? jobId = null, long? startedTimeUsecs = null, long? endTimeUsecs = null, long? numRuns = null, bool? excludeTasks = null, long? sourceId = null, bool? excludeErrorRuns = null, long? startTimeUsecs = null, List<string> runTypes = null, bool? excludeNonRestoreableRuns = null)
        {

            var localVarPath = "/public/protectionRuns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter
            if (startedTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startedTimeUsecs", startedTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (numRuns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numRuns", numRuns)); // query parameter
            if (excludeTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeTasks", excludeTasks)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter
            if (excludeErrorRuns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeErrorRuns", excludeErrorRuns)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (runTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "runTypes", runTypes)); // query parameter
            if (excludeNonRestoreableRuns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeNonRestoreableRuns", excludeNonRestoreableRuns)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionRunInstance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionRunInstance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionRunInstance>)));
        }

        /// <summary>
        /// List Protection Job Runs filtered by the specified parameters. If no parameters are specified, Job Runs currently on the Cohesity Cluster are returned. Both running and completed Job Runs are reported. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by a Protection Job that is specified by id. If not specified, all Job Runs for all Protection Jobs are returned. (optional)</param>
        /// <param name="startedTimeUsecs">Return a specific Job Run by specifying a time and a jobId. Specify the time when the Job Run started as a Unix epoch Timestamp (in microseconds). If this field is specified, jobId must also be specified. (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that completed before the specified end time are returned. (optional)</param>
        /// <param name="numRuns">Specify the number of Job Runs to return. The newest Job Runs are returned. (optional)</param>
        /// <param name="excludeTasks">If true, the individual backup status for all the objects protected by the Job Run are not populated in the response. For example in a VMware environment, the status of backing up each VM associated with a Job is not returned. (optional)</param>
        /// <param name="sourceId">Filter by source id. Only Job Runs protecting the specified source (such as a VM or View) are returned. The source id is assigned by the Cohesity Cluster. (optional)</param>
        /// <param name="excludeErrorRuns">Filter out Jobs Runs with errors by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Job Runs with errors are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Job Runs that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="runTypes">Filter by run type such as &#39;kFull&#39;, &#39;kRegular&#39; or &#39;kLog&#39;. If not specified, Job Runs of all types are returned. (optional)</param>
        /// <param name="excludeNonRestoreableRuns">Filter out jobs runs that cannot be restored by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Runs without any successful object will be returned. The default value is false. (optional)</param>
        /// <returns>Task of List&lt;ProtectionRunInstance&gt;</returns>
        public async System.Threading.Tasks.Task<List<ProtectionRunInstance>> GetProtectionRunsAsync (long? jobId = null, long? startedTimeUsecs = null, long? endTimeUsecs = null, long? numRuns = null, bool? excludeTasks = null, long? sourceId = null, bool? excludeErrorRuns = null, long? startTimeUsecs = null, List<string> runTypes = null, bool? excludeNonRestoreableRuns = null)
        {
             ApiResponse<List<ProtectionRunInstance>> localVarResponse = await GetProtectionRunsAsyncWithHttpInfo(jobId, startedTimeUsecs, endTimeUsecs, numRuns, excludeTasks, sourceId, excludeErrorRuns, startTimeUsecs, runTypes, excludeNonRestoreableRuns);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Protection Job Runs filtered by the specified parameters. If no parameters are specified, Job Runs currently on the Cohesity Cluster are returned. Both running and completed Job Runs are reported. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Filter by a Protection Job that is specified by id. If not specified, all Job Runs for all Protection Jobs are returned. (optional)</param>
        /// <param name="startedTimeUsecs">Return a specific Job Run by specifying a time and a jobId. Specify the time when the Job Run started as a Unix epoch Timestamp (in microseconds). If this field is specified, jobId must also be specified. (optional)</param>
        /// <param name="endTimeUsecs">Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that completed before the specified end time are returned. (optional)</param>
        /// <param name="numRuns">Specify the number of Job Runs to return. The newest Job Runs are returned. (optional)</param>
        /// <param name="excludeTasks">If true, the individual backup status for all the objects protected by the Job Run are not populated in the response. For example in a VMware environment, the status of backing up each VM associated with a Job is not returned. (optional)</param>
        /// <param name="sourceId">Filter by source id. Only Job Runs protecting the specified source (such as a VM or View) are returned. The source id is assigned by the Cohesity Cluster. (optional)</param>
        /// <param name="excludeErrorRuns">Filter out Jobs Runs with errors by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Job Runs with errors are returned. (optional)</param>
        /// <param name="startTimeUsecs">Filter by a start time. Only Job Runs that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds). (optional)</param>
        /// <param name="runTypes">Filter by run type such as &#39;kFull&#39;, &#39;kRegular&#39; or &#39;kLog&#39;. If not specified, Job Runs of all types are returned. (optional)</param>
        /// <param name="excludeNonRestoreableRuns">Filter out jobs runs that cannot be restored by setting this field to &#39;true&#39;. If not set or set to &#39;false&#39;, Runs without any successful object will be returned. The default value is false. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ProtectionRunInstance&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ProtectionRunInstance>>> GetProtectionRunsAsyncWithHttpInfo (long? jobId = null, long? startedTimeUsecs = null, long? endTimeUsecs = null, long? numRuns = null, bool? excludeTasks = null, long? sourceId = null, bool? excludeErrorRuns = null, long? startTimeUsecs = null, List<string> runTypes = null, bool? excludeNonRestoreableRuns = null)
        {

            var localVarPath = "/public/protectionRuns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (jobId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "jobId", jobId)); // query parameter
            if (startedTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startedTimeUsecs", startedTimeUsecs)); // query parameter
            if (endTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endTimeUsecs", endTimeUsecs)); // query parameter
            if (numRuns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "numRuns", numRuns)); // query parameter
            if (excludeTasks != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeTasks", excludeTasks)); // query parameter
            if (sourceId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sourceId", sourceId)); // query parameter
            if (excludeErrorRuns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeErrorRuns", excludeErrorRuns)); // query parameter
            if (startTimeUsecs != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startTimeUsecs", startTimeUsecs)); // query parameter
            if (runTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "runTypes", runTypes)); // query parameter
            if (excludeNonRestoreableRuns != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeNonRestoreableRuns", excludeNonRestoreableRuns)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProtectionRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ProtectionRunInstance>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ProtectionRunInstance>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ProtectionRunInstance>)));
        }

        /// <summary>
        /// Update how long Protection Job Runs and their snapshots are retained on the Cohesity Cluster. Update the expiration date (retention period) for the specified Protection Job Runs and their snapshots. After an expiration time is reached, the Job Run and its snapshots are deleted. If an expiration time of 0 is specified, a Job Run and its snapshots are immediately deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update the expiration time of Protection Job Runs.</param>
        /// <returns></returns>
        public void UpdateProtectionRuns (UpdateProtectionJobRunsParam body)
        {
             UpdateProtectionRunsWithHttpInfo(body);
        }

        /// <summary>
        /// Update how long Protection Job Runs and their snapshots are retained on the Cohesity Cluster. Update the expiration date (retention period) for the specified Protection Job Runs and their snapshots. After an expiration time is reached, the Job Run and its snapshots are deleted. If an expiration time of 0 is specified, a Job Run and its snapshots are immediately deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update the expiration time of Protection Job Runs.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateProtectionRunsWithHttpInfo (UpdateProtectionJobRunsParam body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionRunsApi->UpdateProtectionRuns");

            var localVarPath = "/public/protectionRuns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProtectionRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update how long Protection Job Runs and their snapshots are retained on the Cohesity Cluster. Update the expiration date (retention period) for the specified Protection Job Runs and their snapshots. After an expiration time is reached, the Job Run and its snapshots are deleted. If an expiration time of 0 is specified, a Job Run and its snapshots are immediately deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update the expiration time of Protection Job Runs.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateProtectionRunsAsync (UpdateProtectionJobRunsParam body)
        {
             await UpdateProtectionRunsAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Update how long Protection Job Runs and their snapshots are retained on the Cohesity Cluster. Update the expiration date (retention period) for the specified Protection Job Runs and their snapshots. After an expiration time is reached, the Job Run and its snapshots are deleted. If an expiration time of 0 is specified, a Job Run and its snapshots are immediately deleted.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to update the expiration time of Protection Job Runs.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProtectionRunsAsyncWithHttpInfo (UpdateProtectionJobRunsParam body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProtectionRunsApi->UpdateProtectionRuns");

            var localVarPath = "/public/protectionRuns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProtectionRuns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
