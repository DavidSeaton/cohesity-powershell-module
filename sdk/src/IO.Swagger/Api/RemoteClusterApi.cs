/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRemoteClusterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Register a remote Cluster on this local Cluster for replication.
        /// </summary>
        /// <remarks>
        /// For a Protection Job to replicate Snapshots from one Cluster to another Cluster, the Clusters must be paired together by registering each Cluster on the other Cluster. For example, Cluster A must be registered on Cluster B and Cluster B must be registered on Cluster A.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a remote Cluster.</param>
        /// <returns>RemoteCluster</returns>
        RemoteCluster CreateRemoteCluster (RegisterRemoteCluster body);

        /// <summary>
        /// Register a remote Cluster on this local Cluster for replication.
        /// </summary>
        /// <remarks>
        /// For a Protection Job to replicate Snapshots from one Cluster to another Cluster, the Clusters must be paired together by registering each Cluster on the other Cluster. For example, Cluster A must be registered on Cluster B and Cluster B must be registered on Cluster A.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a remote Cluster.</param>
        /// <returns>ApiResponse of RemoteCluster</returns>
        ApiResponse<RemoteCluster> CreateRemoteClusterWithHttpInfo (RegisterRemoteCluster body);
        /// <summary>
        /// Delete a remote Cluster registration connection.
        /// </summary>
        /// <remarks>
        /// Delete the specified remote Cluster registration connection on this Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns></returns>
        void DeleteRemoteCluster (long? id);

        /// <summary>
        /// Delete a remote Cluster registration connection.
        /// </summary>
        /// <remarks>
        /// Delete the specified remote Cluster registration connection on this Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRemoteClusterWithHttpInfo (long? id);
        /// <summary>
        /// List details about a single remote Cluster registered on this local Cluster.
        /// </summary>
        /// <remarks>
        /// Returns the details about the remote Cluster with the specified Cluster id that is registered on this local Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>List&lt;RemoteCluster&gt;</returns>
        List<RemoteCluster> GetRemoteClusterById (long? id);

        /// <summary>
        /// List details about a single remote Cluster registered on this local Cluster.
        /// </summary>
        /// <remarks>
        /// Returns the details about the remote Cluster with the specified Cluster id that is registered on this local Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>ApiResponse of List&lt;RemoteCluster&gt;</returns>
        ApiResponse<List<RemoteCluster>> GetRemoteClusterByIdWithHttpInfo (long? id);
        /// <summary>
        /// List the remote Cohesity Clusters that are registered on this local Cohesity Cluster that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// Cohesity Clusters involved in replication, must be registered to each other. For example, if Cluster A is replicating Snapshots to Cluster B, Cluster B must be registered on Cluster A and Cluster B must be registered on Cluster A.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterNames">Filter by a list of Cluster names. (optional)</param>
        /// <param name="purposeReplication">Filter for purpose as Replication. (optional)</param>
        /// <param name="purposeRemoteAccess">Filter for purpose as Remote Access. (optional)</param>
        /// <param name="clusterIds">Filter by a list of Cluster ids. (optional)</param>
        /// <returns>List&lt;RemoteCluster&gt;</returns>
        List<RemoteCluster> GetRemoteClusters (List<string> clusterNames = null, bool? purposeReplication = null, bool? purposeRemoteAccess = null, List<long?> clusterIds = null);

        /// <summary>
        /// List the remote Cohesity Clusters that are registered on this local Cohesity Cluster that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// Cohesity Clusters involved in replication, must be registered to each other. For example, if Cluster A is replicating Snapshots to Cluster B, Cluster B must be registered on Cluster A and Cluster B must be registered on Cluster A.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterNames">Filter by a list of Cluster names. (optional)</param>
        /// <param name="purposeReplication">Filter for purpose as Replication. (optional)</param>
        /// <param name="purposeRemoteAccess">Filter for purpose as Remote Access. (optional)</param>
        /// <param name="clusterIds">Filter by a list of Cluster ids. (optional)</param>
        /// <returns>ApiResponse of List&lt;RemoteCluster&gt;</returns>
        ApiResponse<List<RemoteCluster>> GetRemoteClustersWithHttpInfo (List<string> clusterNames = null, bool? purposeReplication = null, bool? purposeRemoteAccess = null, List<long?> clusterIds = null);
        /// <summary>
        /// Get the encryption key on this Cluster.
        /// </summary>
        /// <remarks>
        /// Get the encryption key that is used for encrypting replication data between this Cluster and a remote Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReplicationEncryptionKeyReponse</returns>
        ReplicationEncryptionKeyReponse GetReplicationEncryptionKey ();

        /// <summary>
        /// Get the encryption key on this Cluster.
        /// </summary>
        /// <remarks>
        /// Get the encryption key that is used for encrypting replication data between this Cluster and a remote Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReplicationEncryptionKeyReponse</returns>
        ApiResponse<ReplicationEncryptionKeyReponse> GetReplicationEncryptionKeyWithHttpInfo ();
        /// <summary>
        /// Update the connection settings of the registered remote Cluster.
        /// </summary>
        /// <remarks>
        /// Update the connection settings of the specified remote Cluster that is registered on this Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <param name="body">Request to update a remote Cluster.</param>
        /// <returns>RemoteCluster</returns>
        RemoteCluster UpdateRemoteCluster (long? id, RegisterRemoteCluster body);

        /// <summary>
        /// Update the connection settings of the registered remote Cluster.
        /// </summary>
        /// <remarks>
        /// Update the connection settings of the specified remote Cluster that is registered on this Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <param name="body">Request to update a remote Cluster.</param>
        /// <returns>ApiResponse of RemoteCluster</returns>
        ApiResponse<RemoteCluster> UpdateRemoteClusterWithHttpInfo (long? id, RegisterRemoteCluster body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Register a remote Cluster on this local Cluster for replication.
        /// </summary>
        /// <remarks>
        /// For a Protection Job to replicate Snapshots from one Cluster to another Cluster, the Clusters must be paired together by registering each Cluster on the other Cluster. For example, Cluster A must be registered on Cluster B and Cluster B must be registered on Cluster A.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a remote Cluster.</param>
        /// <returns>Task of RemoteCluster</returns>
        System.Threading.Tasks.Task<RemoteCluster> CreateRemoteClusterAsync (RegisterRemoteCluster body);

        /// <summary>
        /// Register a remote Cluster on this local Cluster for replication.
        /// </summary>
        /// <remarks>
        /// For a Protection Job to replicate Snapshots from one Cluster to another Cluster, the Clusters must be paired together by registering each Cluster on the other Cluster. For example, Cluster A must be registered on Cluster B and Cluster B must be registered on Cluster A.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a remote Cluster.</param>
        /// <returns>Task of ApiResponse (RemoteCluster)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteCluster>> CreateRemoteClusterAsyncWithHttpInfo (RegisterRemoteCluster body);
        /// <summary>
        /// Delete a remote Cluster registration connection.
        /// </summary>
        /// <remarks>
        /// Delete the specified remote Cluster registration connection on this Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRemoteClusterAsync (long? id);

        /// <summary>
        /// Delete a remote Cluster registration connection.
        /// </summary>
        /// <remarks>
        /// Delete the specified remote Cluster registration connection on this Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRemoteClusterAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List details about a single remote Cluster registered on this local Cluster.
        /// </summary>
        /// <remarks>
        /// Returns the details about the remote Cluster with the specified Cluster id that is registered on this local Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>Task of List&lt;RemoteCluster&gt;</returns>
        System.Threading.Tasks.Task<List<RemoteCluster>> GetRemoteClusterByIdAsync (long? id);

        /// <summary>
        /// List details about a single remote Cluster registered on this local Cluster.
        /// </summary>
        /// <remarks>
        /// Returns the details about the remote Cluster with the specified Cluster id that is registered on this local Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>Task of ApiResponse (List&lt;RemoteCluster&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RemoteCluster>>> GetRemoteClusterByIdAsyncWithHttpInfo (long? id);
        /// <summary>
        /// List the remote Cohesity Clusters that are registered on this local Cohesity Cluster that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// Cohesity Clusters involved in replication, must be registered to each other. For example, if Cluster A is replicating Snapshots to Cluster B, Cluster B must be registered on Cluster A and Cluster B must be registered on Cluster A.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterNames">Filter by a list of Cluster names. (optional)</param>
        /// <param name="purposeReplication">Filter for purpose as Replication. (optional)</param>
        /// <param name="purposeRemoteAccess">Filter for purpose as Remote Access. (optional)</param>
        /// <param name="clusterIds">Filter by a list of Cluster ids. (optional)</param>
        /// <returns>Task of List&lt;RemoteCluster&gt;</returns>
        System.Threading.Tasks.Task<List<RemoteCluster>> GetRemoteClustersAsync (List<string> clusterNames = null, bool? purposeReplication = null, bool? purposeRemoteAccess = null, List<long?> clusterIds = null);

        /// <summary>
        /// List the remote Cohesity Clusters that are registered on this local Cohesity Cluster that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// Cohesity Clusters involved in replication, must be registered to each other. For example, if Cluster A is replicating Snapshots to Cluster B, Cluster B must be registered on Cluster A and Cluster B must be registered on Cluster A.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterNames">Filter by a list of Cluster names. (optional)</param>
        /// <param name="purposeReplication">Filter for purpose as Replication. (optional)</param>
        /// <param name="purposeRemoteAccess">Filter for purpose as Remote Access. (optional)</param>
        /// <param name="clusterIds">Filter by a list of Cluster ids. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RemoteCluster&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<RemoteCluster>>> GetRemoteClustersAsyncWithHttpInfo (List<string> clusterNames = null, bool? purposeReplication = null, bool? purposeRemoteAccess = null, List<long?> clusterIds = null);
        /// <summary>
        /// Get the encryption key on this Cluster.
        /// </summary>
        /// <remarks>
        /// Get the encryption key that is used for encrypting replication data between this Cluster and a remote Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReplicationEncryptionKeyReponse</returns>
        System.Threading.Tasks.Task<ReplicationEncryptionKeyReponse> GetReplicationEncryptionKeyAsync ();

        /// <summary>
        /// Get the encryption key on this Cluster.
        /// </summary>
        /// <remarks>
        /// Get the encryption key that is used for encrypting replication data between this Cluster and a remote Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReplicationEncryptionKeyReponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplicationEncryptionKeyReponse>> GetReplicationEncryptionKeyAsyncWithHttpInfo ();
        /// <summary>
        /// Update the connection settings of the registered remote Cluster.
        /// </summary>
        /// <remarks>
        /// Update the connection settings of the specified remote Cluster that is registered on this Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <param name="body">Request to update a remote Cluster.</param>
        /// <returns>Task of RemoteCluster</returns>
        System.Threading.Tasks.Task<RemoteCluster> UpdateRemoteClusterAsync (long? id, RegisterRemoteCluster body);

        /// <summary>
        /// Update the connection settings of the registered remote Cluster.
        /// </summary>
        /// <remarks>
        /// Update the connection settings of the specified remote Cluster that is registered on this Cluster.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <param name="body">Request to update a remote Cluster.</param>
        /// <returns>Task of ApiResponse (RemoteCluster)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoteCluster>> UpdateRemoteClusterAsyncWithHttpInfo (long? id, RegisterRemoteCluster body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RemoteClusterApi : IRemoteClusterApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteClusterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RemoteClusterApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RemoteClusterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RemoteClusterApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Register a remote Cluster on this local Cluster for replication. For a Protection Job to replicate Snapshots from one Cluster to another Cluster, the Clusters must be paired together by registering each Cluster on the other Cluster. For example, Cluster A must be registered on Cluster B and Cluster B must be registered on Cluster A.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a remote Cluster.</param>
        /// <returns>RemoteCluster</returns>
        public RemoteCluster CreateRemoteCluster (RegisterRemoteCluster body)
        {
             ApiResponse<RemoteCluster> localVarResponse = CreateRemoteClusterWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register a remote Cluster on this local Cluster for replication. For a Protection Job to replicate Snapshots from one Cluster to another Cluster, the Clusters must be paired together by registering each Cluster on the other Cluster. For example, Cluster A must be registered on Cluster B and Cluster B must be registered on Cluster A.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a remote Cluster.</param>
        /// <returns>ApiResponse of RemoteCluster</returns>
        public ApiResponse< RemoteCluster > CreateRemoteClusterWithHttpInfo (RegisterRemoteCluster body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RemoteClusterApi->CreateRemoteCluster");

            var localVarPath = "/public/remoteClusters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRemoteCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteCluster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteCluster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteCluster)));
        }

        /// <summary>
        /// Register a remote Cluster on this local Cluster for replication. For a Protection Job to replicate Snapshots from one Cluster to another Cluster, the Clusters must be paired together by registering each Cluster on the other Cluster. For example, Cluster A must be registered on Cluster B and Cluster B must be registered on Cluster A.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a remote Cluster.</param>
        /// <returns>Task of RemoteCluster</returns>
        public async System.Threading.Tasks.Task<RemoteCluster> CreateRemoteClusterAsync (RegisterRemoteCluster body)
        {
             ApiResponse<RemoteCluster> localVarResponse = await CreateRemoteClusterAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register a remote Cluster on this local Cluster for replication. For a Protection Job to replicate Snapshots from one Cluster to another Cluster, the Clusters must be paired together by registering each Cluster on the other Cluster. For example, Cluster A must be registered on Cluster B and Cluster B must be registered on Cluster A.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to register a remote Cluster.</param>
        /// <returns>Task of ApiResponse (RemoteCluster)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoteCluster>> CreateRemoteClusterAsyncWithHttpInfo (RegisterRemoteCluster body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RemoteClusterApi->CreateRemoteCluster");

            var localVarPath = "/public/remoteClusters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRemoteCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteCluster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteCluster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteCluster)));
        }

        /// <summary>
        /// Delete a remote Cluster registration connection. Delete the specified remote Cluster registration connection on this Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns></returns>
        public void DeleteRemoteCluster (long? id)
        {
             DeleteRemoteClusterWithHttpInfo(id);
        }

        /// <summary>
        /// Delete a remote Cluster registration connection. Delete the specified remote Cluster registration connection on this Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRemoteClusterWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RemoteClusterApi->DeleteRemoteCluster");

            var localVarPath = "/public/remoteClusters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRemoteCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a remote Cluster registration connection. Delete the specified remote Cluster registration connection on this Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRemoteClusterAsync (long? id)
        {
             await DeleteRemoteClusterAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Delete a remote Cluster registration connection. Delete the specified remote Cluster registration connection on this Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRemoteClusterAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RemoteClusterApi->DeleteRemoteCluster");

            var localVarPath = "/public/remoteClusters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRemoteCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List details about a single remote Cluster registered on this local Cluster. Returns the details about the remote Cluster with the specified Cluster id that is registered on this local Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>List&lt;RemoteCluster&gt;</returns>
        public List<RemoteCluster> GetRemoteClusterById (long? id)
        {
             ApiResponse<List<RemoteCluster>> localVarResponse = GetRemoteClusterByIdWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single remote Cluster registered on this local Cluster. Returns the details about the remote Cluster with the specified Cluster id that is registered on this local Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>ApiResponse of List&lt;RemoteCluster&gt;</returns>
        public ApiResponse< List<RemoteCluster> > GetRemoteClusterByIdWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RemoteClusterApi->GetRemoteClusterById");

            var localVarPath = "/public/remoteClusters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRemoteClusterById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RemoteCluster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RemoteCluster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RemoteCluster>)));
        }

        /// <summary>
        /// List details about a single remote Cluster registered on this local Cluster. Returns the details about the remote Cluster with the specified Cluster id that is registered on this local Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>Task of List&lt;RemoteCluster&gt;</returns>
        public async System.Threading.Tasks.Task<List<RemoteCluster>> GetRemoteClusterByIdAsync (long? id)
        {
             ApiResponse<List<RemoteCluster>> localVarResponse = await GetRemoteClusterByIdAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single remote Cluster registered on this local Cluster. Returns the details about the remote Cluster with the specified Cluster id that is registered on this local Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <returns>Task of ApiResponse (List&lt;RemoteCluster&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RemoteCluster>>> GetRemoteClusterByIdAsyncWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RemoteClusterApi->GetRemoteClusterById");

            var localVarPath = "/public/remoteClusters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRemoteClusterById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RemoteCluster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RemoteCluster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RemoteCluster>)));
        }

        /// <summary>
        /// List the remote Cohesity Clusters that are registered on this local Cohesity Cluster that match the filter criteria specified using parameters. Cohesity Clusters involved in replication, must be registered to each other. For example, if Cluster A is replicating Snapshots to Cluster B, Cluster B must be registered on Cluster A and Cluster B must be registered on Cluster A.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterNames">Filter by a list of Cluster names. (optional)</param>
        /// <param name="purposeReplication">Filter for purpose as Replication. (optional)</param>
        /// <param name="purposeRemoteAccess">Filter for purpose as Remote Access. (optional)</param>
        /// <param name="clusterIds">Filter by a list of Cluster ids. (optional)</param>
        /// <returns>List&lt;RemoteCluster&gt;</returns>
        public List<RemoteCluster> GetRemoteClusters (List<string> clusterNames = null, bool? purposeReplication = null, bool? purposeRemoteAccess = null, List<long?> clusterIds = null)
        {
             ApiResponse<List<RemoteCluster>> localVarResponse = GetRemoteClustersWithHttpInfo(clusterNames, purposeReplication, purposeRemoteAccess, clusterIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the remote Cohesity Clusters that are registered on this local Cohesity Cluster that match the filter criteria specified using parameters. Cohesity Clusters involved in replication, must be registered to each other. For example, if Cluster A is replicating Snapshots to Cluster B, Cluster B must be registered on Cluster A and Cluster B must be registered on Cluster A.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterNames">Filter by a list of Cluster names. (optional)</param>
        /// <param name="purposeReplication">Filter for purpose as Replication. (optional)</param>
        /// <param name="purposeRemoteAccess">Filter for purpose as Remote Access. (optional)</param>
        /// <param name="clusterIds">Filter by a list of Cluster ids. (optional)</param>
        /// <returns>ApiResponse of List&lt;RemoteCluster&gt;</returns>
        public ApiResponse< List<RemoteCluster> > GetRemoteClustersWithHttpInfo (List<string> clusterNames = null, bool? purposeReplication = null, bool? purposeRemoteAccess = null, List<long?> clusterIds = null)
        {

            var localVarPath = "/public/remoteClusters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clusterNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "clusterNames", clusterNames)); // query parameter
            if (purposeReplication != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purposeReplication", purposeReplication)); // query parameter
            if (purposeRemoteAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purposeRemoteAccess", purposeRemoteAccess)); // query parameter
            if (clusterIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "clusterIds", clusterIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRemoteClusters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RemoteCluster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RemoteCluster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RemoteCluster>)));
        }

        /// <summary>
        /// List the remote Cohesity Clusters that are registered on this local Cohesity Cluster that match the filter criteria specified using parameters. Cohesity Clusters involved in replication, must be registered to each other. For example, if Cluster A is replicating Snapshots to Cluster B, Cluster B must be registered on Cluster A and Cluster B must be registered on Cluster A.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterNames">Filter by a list of Cluster names. (optional)</param>
        /// <param name="purposeReplication">Filter for purpose as Replication. (optional)</param>
        /// <param name="purposeRemoteAccess">Filter for purpose as Remote Access. (optional)</param>
        /// <param name="clusterIds">Filter by a list of Cluster ids. (optional)</param>
        /// <returns>Task of List&lt;RemoteCluster&gt;</returns>
        public async System.Threading.Tasks.Task<List<RemoteCluster>> GetRemoteClustersAsync (List<string> clusterNames = null, bool? purposeReplication = null, bool? purposeRemoteAccess = null, List<long?> clusterIds = null)
        {
             ApiResponse<List<RemoteCluster>> localVarResponse = await GetRemoteClustersAsyncWithHttpInfo(clusterNames, purposeReplication, purposeRemoteAccess, clusterIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the remote Cohesity Clusters that are registered on this local Cohesity Cluster that match the filter criteria specified using parameters. Cohesity Clusters involved in replication, must be registered to each other. For example, if Cluster A is replicating Snapshots to Cluster B, Cluster B must be registered on Cluster A and Cluster B must be registered on Cluster A.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clusterNames">Filter by a list of Cluster names. (optional)</param>
        /// <param name="purposeReplication">Filter for purpose as Replication. (optional)</param>
        /// <param name="purposeRemoteAccess">Filter for purpose as Remote Access. (optional)</param>
        /// <param name="clusterIds">Filter by a list of Cluster ids. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;RemoteCluster&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<RemoteCluster>>> GetRemoteClustersAsyncWithHttpInfo (List<string> clusterNames = null, bool? purposeReplication = null, bool? purposeRemoteAccess = null, List<long?> clusterIds = null)
        {

            var localVarPath = "/public/remoteClusters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clusterNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "clusterNames", clusterNames)); // query parameter
            if (purposeReplication != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purposeReplication", purposeReplication)); // query parameter
            if (purposeRemoteAccess != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "purposeRemoteAccess", purposeRemoteAccess)); // query parameter
            if (clusterIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "clusterIds", clusterIds)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRemoteClusters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<RemoteCluster>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<RemoteCluster>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<RemoteCluster>)));
        }

        /// <summary>
        /// Get the encryption key on this Cluster. Get the encryption key that is used for encrypting replication data between this Cluster and a remote Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ReplicationEncryptionKeyReponse</returns>
        public ReplicationEncryptionKeyReponse GetReplicationEncryptionKey ()
        {
             ApiResponse<ReplicationEncryptionKeyReponse> localVarResponse = GetReplicationEncryptionKeyWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the encryption key on this Cluster. Get the encryption key that is used for encrypting replication data between this Cluster and a remote Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ReplicationEncryptionKeyReponse</returns>
        public ApiResponse< ReplicationEncryptionKeyReponse > GetReplicationEncryptionKeyWithHttpInfo ()
        {

            var localVarPath = "/public/replicationEncryptionKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplicationEncryptionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationEncryptionKeyReponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationEncryptionKeyReponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationEncryptionKeyReponse)));
        }

        /// <summary>
        /// Get the encryption key on this Cluster. Get the encryption key that is used for encrypting replication data between this Cluster and a remote Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ReplicationEncryptionKeyReponse</returns>
        public async System.Threading.Tasks.Task<ReplicationEncryptionKeyReponse> GetReplicationEncryptionKeyAsync ()
        {
             ApiResponse<ReplicationEncryptionKeyReponse> localVarResponse = await GetReplicationEncryptionKeyAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the encryption key on this Cluster. Get the encryption key that is used for encrypting replication data between this Cluster and a remote Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ReplicationEncryptionKeyReponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReplicationEncryptionKeyReponse>> GetReplicationEncryptionKeyAsyncWithHttpInfo ()
        {

            var localVarPath = "/public/replicationEncryptionKey";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetReplicationEncryptionKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReplicationEncryptionKeyReponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReplicationEncryptionKeyReponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReplicationEncryptionKeyReponse)));
        }

        /// <summary>
        /// Update the connection settings of the registered remote Cluster. Update the connection settings of the specified remote Cluster that is registered on this Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <param name="body">Request to update a remote Cluster.</param>
        /// <returns>RemoteCluster</returns>
        public RemoteCluster UpdateRemoteCluster (long? id, RegisterRemoteCluster body)
        {
             ApiResponse<RemoteCluster> localVarResponse = UpdateRemoteClusterWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the connection settings of the registered remote Cluster. Update the connection settings of the specified remote Cluster that is registered on this Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <param name="body">Request to update a remote Cluster.</param>
        /// <returns>ApiResponse of RemoteCluster</returns>
        public ApiResponse< RemoteCluster > UpdateRemoteClusterWithHttpInfo (long? id, RegisterRemoteCluster body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RemoteClusterApi->UpdateRemoteCluster");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RemoteClusterApi->UpdateRemoteCluster");

            var localVarPath = "/public/remoteClusters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRemoteCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteCluster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteCluster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteCluster)));
        }

        /// <summary>
        /// Update the connection settings of the registered remote Cluster. Update the connection settings of the specified remote Cluster that is registered on this Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <param name="body">Request to update a remote Cluster.</param>
        /// <returns>Task of RemoteCluster</returns>
        public async System.Threading.Tasks.Task<RemoteCluster> UpdateRemoteClusterAsync (long? id, RegisterRemoteCluster body)
        {
             ApiResponse<RemoteCluster> localVarResponse = await UpdateRemoteClusterAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the connection settings of the registered remote Cluster. Update the connection settings of the specified remote Cluster that is registered on this Cluster.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the remote Cluster</param>
        /// <param name="body">Request to update a remote Cluster.</param>
        /// <returns>Task of ApiResponse (RemoteCluster)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemoteCluster>> UpdateRemoteClusterAsyncWithHttpInfo (long? id, RegisterRemoteCluster body)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RemoteClusterApi->UpdateRemoteCluster");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RemoteClusterApi->UpdateRemoteCluster");

            var localVarPath = "/public/remoteClusters/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRemoteCluster", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemoteCluster>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemoteCluster) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemoteCluster)));
        }

    }
}
