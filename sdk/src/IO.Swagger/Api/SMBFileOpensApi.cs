/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISMBFileOpensApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Closes an active SMB file open.
        /// </summary>
        /// <remarks>
        /// Returns nothing upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to close an active SMB file open.</param>
        /// <returns></returns>
        void CloseSmbFileOpen (CloseSmbFileOpenParameters body);

        /// <summary>
        /// Closes an active SMB file open.
        /// </summary>
        /// <remarks>
        /// Returns nothing upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to close an active SMB file open.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloseSmbFileOpenWithHttpInfo (CloseSmbFileOpenParameters body);
        /// <summary>
        /// List the active SMB file opens that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all active SMB file opens currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the View in which to search. If a view name is not specified, all the views in the Cluster is searched. This field is mandatory if filePath field is specified. (optional)</param>
        /// <param name="pageCount">Specifies the maximum number of active opens to return in the response. This field cannot be set above 1000. If this is not set, maximum of 1000 entries are returned. (optional)</param>
        /// <param name="cookie">Specifies the opaque string returned in the previous response. If this is set, next set of active opens just after the previous response are returned. If this is not set, first set of active opens are returned. (optional)</param>
        /// <param name="filePath">Specifies the filepath in the view relative to the root filesystem. If this field is specified, viewName field must also be specified. (optional)</param>
        /// <returns>SmbActiveFileOpensResponse</returns>
        SmbActiveFileOpensResponse GetSmbFileOpens (string viewName = null, int? pageCount = null, string cookie = null, string filePath = null);

        /// <summary>
        /// List the active SMB file opens that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all active SMB file opens currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the View in which to search. If a view name is not specified, all the views in the Cluster is searched. This field is mandatory if filePath field is specified. (optional)</param>
        /// <param name="pageCount">Specifies the maximum number of active opens to return in the response. This field cannot be set above 1000. If this is not set, maximum of 1000 entries are returned. (optional)</param>
        /// <param name="cookie">Specifies the opaque string returned in the previous response. If this is set, next set of active opens just after the previous response are returned. If this is not set, first set of active opens are returned. (optional)</param>
        /// <param name="filePath">Specifies the filepath in the view relative to the root filesystem. If this field is specified, viewName field must also be specified. (optional)</param>
        /// <returns>ApiResponse of SmbActiveFileOpensResponse</returns>
        ApiResponse<SmbActiveFileOpensResponse> GetSmbFileOpensWithHttpInfo (string viewName = null, int? pageCount = null, string cookie = null, string filePath = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Closes an active SMB file open.
        /// </summary>
        /// <remarks>
        /// Returns nothing upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to close an active SMB file open.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloseSmbFileOpenAsync (CloseSmbFileOpenParameters body);

        /// <summary>
        /// Closes an active SMB file open.
        /// </summary>
        /// <remarks>
        /// Returns nothing upon success.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to close an active SMB file open.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloseSmbFileOpenAsyncWithHttpInfo (CloseSmbFileOpenParameters body);
        /// <summary>
        /// List the active SMB file opens that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all active SMB file opens currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the View in which to search. If a view name is not specified, all the views in the Cluster is searched. This field is mandatory if filePath field is specified. (optional)</param>
        /// <param name="pageCount">Specifies the maximum number of active opens to return in the response. This field cannot be set above 1000. If this is not set, maximum of 1000 entries are returned. (optional)</param>
        /// <param name="cookie">Specifies the opaque string returned in the previous response. If this is set, next set of active opens just after the previous response are returned. If this is not set, first set of active opens are returned. (optional)</param>
        /// <param name="filePath">Specifies the filepath in the view relative to the root filesystem. If this field is specified, viewName field must also be specified. (optional)</param>
        /// <returns>Task of SmbActiveFileOpensResponse</returns>
        System.Threading.Tasks.Task<SmbActiveFileOpensResponse> GetSmbFileOpensAsync (string viewName = null, int? pageCount = null, string cookie = null, string filePath = null);

        /// <summary>
        /// List the active SMB file opens that match the filter criteria specified using parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all active SMB file opens currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the View in which to search. If a view name is not specified, all the views in the Cluster is searched. This field is mandatory if filePath field is specified. (optional)</param>
        /// <param name="pageCount">Specifies the maximum number of active opens to return in the response. This field cannot be set above 1000. If this is not set, maximum of 1000 entries are returned. (optional)</param>
        /// <param name="cookie">Specifies the opaque string returned in the previous response. If this is set, next set of active opens just after the previous response are returned. If this is not set, first set of active opens are returned. (optional)</param>
        /// <param name="filePath">Specifies the filepath in the view relative to the root filesystem. If this field is specified, viewName field must also be specified. (optional)</param>
        /// <returns>Task of ApiResponse (SmbActiveFileOpensResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SmbActiveFileOpensResponse>> GetSmbFileOpensAsyncWithHttpInfo (string viewName = null, int? pageCount = null, string cookie = null, string filePath = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SMBFileOpensApi : ISMBFileOpensApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SMBFileOpensApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SMBFileOpensApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMBFileOpensApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SMBFileOpensApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Closes an active SMB file open. Returns nothing upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to close an active SMB file open.</param>
        /// <returns></returns>
        public void CloseSmbFileOpen (CloseSmbFileOpenParameters body)
        {
             CloseSmbFileOpenWithHttpInfo(body);
        }

        /// <summary>
        /// Closes an active SMB file open. Returns nothing upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to close an active SMB file open.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloseSmbFileOpenWithHttpInfo (CloseSmbFileOpenParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SMBFileOpensApi->CloseSmbFileOpen");

            var localVarPath = "/public/smbFileOpens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseSmbFileOpen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Closes an active SMB file open. Returns nothing upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to close an active SMB file open.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloseSmbFileOpenAsync (CloseSmbFileOpenParameters body)
        {
             await CloseSmbFileOpenAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Closes an active SMB file open. Returns nothing upon success.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to close an active SMB file open.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloseSmbFileOpenAsyncWithHttpInfo (CloseSmbFileOpenParameters body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SMBFileOpensApi->CloseSmbFileOpen");

            var localVarPath = "/public/smbFileOpens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloseSmbFileOpen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List the active SMB file opens that match the filter criteria specified using parameters. If no parameters are specified, all active SMB file opens currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the View in which to search. If a view name is not specified, all the views in the Cluster is searched. This field is mandatory if filePath field is specified. (optional)</param>
        /// <param name="pageCount">Specifies the maximum number of active opens to return in the response. This field cannot be set above 1000. If this is not set, maximum of 1000 entries are returned. (optional)</param>
        /// <param name="cookie">Specifies the opaque string returned in the previous response. If this is set, next set of active opens just after the previous response are returned. If this is not set, first set of active opens are returned. (optional)</param>
        /// <param name="filePath">Specifies the filepath in the view relative to the root filesystem. If this field is specified, viewName field must also be specified. (optional)</param>
        /// <returns>SmbActiveFileOpensResponse</returns>
        public SmbActiveFileOpensResponse GetSmbFileOpens (string viewName = null, int? pageCount = null, string cookie = null, string filePath = null)
        {
             ApiResponse<SmbActiveFileOpensResponse> localVarResponse = GetSmbFileOpensWithHttpInfo(viewName, pageCount, cookie, filePath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List the active SMB file opens that match the filter criteria specified using parameters. If no parameters are specified, all active SMB file opens currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the View in which to search. If a view name is not specified, all the views in the Cluster is searched. This field is mandatory if filePath field is specified. (optional)</param>
        /// <param name="pageCount">Specifies the maximum number of active opens to return in the response. This field cannot be set above 1000. If this is not set, maximum of 1000 entries are returned. (optional)</param>
        /// <param name="cookie">Specifies the opaque string returned in the previous response. If this is set, next set of active opens just after the previous response are returned. If this is not set, first set of active opens are returned. (optional)</param>
        /// <param name="filePath">Specifies the filepath in the view relative to the root filesystem. If this field is specified, viewName field must also be specified. (optional)</param>
        /// <returns>ApiResponse of SmbActiveFileOpensResponse</returns>
        public ApiResponse< SmbActiveFileOpensResponse > GetSmbFileOpensWithHttpInfo (string viewName = null, int? pageCount = null, string cookie = null, string filePath = null)
        {

            var localVarPath = "/public/smbFileOpens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "viewName", viewName)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (cookie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cookie", cookie)); // query parameter
            if (filePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filePath", filePath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSmbFileOpens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmbActiveFileOpensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmbActiveFileOpensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmbActiveFileOpensResponse)));
        }

        /// <summary>
        /// List the active SMB file opens that match the filter criteria specified using parameters. If no parameters are specified, all active SMB file opens currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the View in which to search. If a view name is not specified, all the views in the Cluster is searched. This field is mandatory if filePath field is specified. (optional)</param>
        /// <param name="pageCount">Specifies the maximum number of active opens to return in the response. This field cannot be set above 1000. If this is not set, maximum of 1000 entries are returned. (optional)</param>
        /// <param name="cookie">Specifies the opaque string returned in the previous response. If this is set, next set of active opens just after the previous response are returned. If this is not set, first set of active opens are returned. (optional)</param>
        /// <param name="filePath">Specifies the filepath in the view relative to the root filesystem. If this field is specified, viewName field must also be specified. (optional)</param>
        /// <returns>Task of SmbActiveFileOpensResponse</returns>
        public async System.Threading.Tasks.Task<SmbActiveFileOpensResponse> GetSmbFileOpensAsync (string viewName = null, int? pageCount = null, string cookie = null, string filePath = null)
        {
             ApiResponse<SmbActiveFileOpensResponse> localVarResponse = await GetSmbFileOpensAsyncWithHttpInfo(viewName, pageCount, cookie, filePath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List the active SMB file opens that match the filter criteria specified using parameters. If no parameters are specified, all active SMB file opens currently on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the View in which to search. If a view name is not specified, all the views in the Cluster is searched. This field is mandatory if filePath field is specified. (optional)</param>
        /// <param name="pageCount">Specifies the maximum number of active opens to return in the response. This field cannot be set above 1000. If this is not set, maximum of 1000 entries are returned. (optional)</param>
        /// <param name="cookie">Specifies the opaque string returned in the previous response. If this is set, next set of active opens just after the previous response are returned. If this is not set, first set of active opens are returned. (optional)</param>
        /// <param name="filePath">Specifies the filepath in the view relative to the root filesystem. If this field is specified, viewName field must also be specified. (optional)</param>
        /// <returns>Task of ApiResponse (SmbActiveFileOpensResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SmbActiveFileOpensResponse>> GetSmbFileOpensAsyncWithHttpInfo (string viewName = null, int? pageCount = null, string cookie = null, string filePath = null)
        {

            var localVarPath = "/public/smbFileOpens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "viewName", viewName)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter
            if (cookie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cookie", cookie)); // query parameter
            if (filePath != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filePath", filePath)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSmbFileOpens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SmbActiveFileOpensResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SmbActiveFileOpensResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SmbActiveFileOpensResponse)));
        }

    }
}
