/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IViewsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Clone a directory of a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a directory.</param>
        /// <returns></returns>
        void CloneDirectory (CloneDirectoryParams body);

        /// <summary>
        /// Clone a directory of a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a directory.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CloneDirectoryWithHttpInfo (CloneDirectoryParams body);
        /// <summary>
        /// Clone a View.
        /// </summary>
        /// <remarks>
        /// Returns the cloned View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a View.</param>
        /// <returns>View</returns>
        View CloneView (CloneViewRequest body);

        /// <summary>
        /// Clone a View.
        /// </summary>
        /// <remarks>
        /// Returns the cloned View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a View.</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> CloneViewWithHttpInfo (CloneViewRequest body);
        /// <summary>
        /// Create a View.
        /// </summary>
        /// <remarks>
        /// Returns the created View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>View</returns>
        View CreateView (CreateViewRequest body);

        /// <summary>
        /// Create a View.
        /// </summary>
        /// <remarks>
        /// Returns the created View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> CreateViewWithHttpInfo (CreateViewRequest body);
        /// <summary>
        /// Create a View Alias. A View Alias allows a directory inside the view to be mounted without specifying the entire path.
        /// </summary>
        /// <remarks>
        /// Returns the created View Alias.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>ViewAlias</returns>
        ViewAlias CreateViewAlias (ViewAlias body);

        /// <summary>
        /// Create a View Alias. A View Alias allows a directory inside the view to be mounted without specifying the entire path.
        /// </summary>
        /// <remarks>
        /// Returns the created View Alias.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>ApiResponse of ViewAlias</returns>
        ApiResponse<ViewAlias> CreateViewAliasWithHttpInfo (ViewAlias body);
        /// <summary>
        /// Create a new quota policy for a user in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>UserQuotaAndUsage</returns>
        UserQuotaAndUsage CreateViewUserQuota (ViewUserQuotaParameters body = null);

        /// <summary>
        /// Create a new quota policy for a user in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>ApiResponse of UserQuotaAndUsage</returns>
        ApiResponse<UserQuotaAndUsage> CreateViewUserQuotaWithHttpInfo (ViewUserQuotaParameters body = null);
        /// <summary>
        /// Delete a View.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns></returns>
        void DeleteView (string name);

        /// <summary>
        /// Delete a View.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteViewWithHttpInfo (string name);
        /// <summary>
        /// Delete a View Alias.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View Alias name.</param>
        /// <returns></returns>
        void DeleteViewAlias (string name);

        /// <summary>
        /// Delete a View Alias.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View Alias name.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteViewAliasWithHttpInfo (string name);
        /// <summary>
        /// Delete the quota policy overrides for users in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns></returns>
        void DeleteViewUsersQuota (DeleteViewUsersQuotaParameters body = null);

        /// <summary>
        /// Delete the quota policy overrides for users in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteViewUsersQuotaWithHttpInfo (DeleteViewUsersQuotaParameters body = null);
        /// <summary>
        /// List details about a single View.
        /// </summary>
        /// <remarks>
        /// Returns the View corresponding to the specified View name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>View</returns>
        View GetViewByName (string name);

        /// <summary>
        /// List details about a single View.
        /// </summary>
        /// <remarks>
        /// Returns the View corresponding to the specified View name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> GetViewByNameWithHttpInfo (string name);
        /// <summary>
        /// Get the quota policies, usage and summary for a view for all its users. It can also fetch the quota policies, usage and summary for a user in all his views.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the input view. If given, there could be three scenarios with the viewName input parameter: It gives the user quota overrides for this view, and the user quota settings. Returns &#39;usersQuotaAndUsage&#39;. If given along with the user id, it returns the quota policy for this user on this view. Returns &#39;usersQuotaAndUsage&#39;. If given along with SummaryOnly as true, a user quota summary for this view would be returned. Returns &#39;summaryForView&#39;. If not given, then the user id is checked. (optional)</param>
        /// <param name="excludeUsersWithinAlertThreshold">This field can be set only when includeUsage is set to true. By default, all the users with logical usage &gt; 0 will be returned in the result. If this field is set to true, only the list of users who has exceeded the alert threshold will be returned. (optional)</param>
        /// <param name="unixUid">If interested in a user via unix-identifier, include UnixUid. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. (optional)</param>
        /// <param name="maxViewId">Related to fetching a particular user&#39;s quota and usage in all his views. It only pertains to the scenario where either UnixUid or Sid is specified, and ViewName is nil. Specify the maxViewId for All the views returned would have view_id&#39;s less than or equal to the given MaxViewId if it is &gt;&#x3D; 0. (optional)</param>
        /// <param name="cookie">Cookie should be used from previous call to list user quota overrides. It resumes (or gives the next set of values) from the result of the previous call. (optional)</param>
        /// <param name="outputFormat">OutputFormat is the Output format for the output. If it is not specified, default is json. (optional)</param>
        /// <param name="includeUsage">If set to true, the logical usage info is included only for users with quota overrides. By default, it is set to false. (optional)</param>
        /// <param name="sid">If interested in a user via smb_client, include SID. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. The string is of following format - S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn. (optional)</param>
        /// <param name="summaryOnly">Specifies a flag to just return a summary. If set to true, and if ViewName is not nil, it returns the summary of users for a view. Otherwise if UserId not nil, and ViewName is nil then it fetches the summary for a user in his views.  By default, it is set to false. (optional)</param>
        /// <param name="pageCount">Specifies the max entries that should be returned in the result. (optional)</param>
        /// <returns>ViewUserQuotas</returns>
        ViewUserQuotas GetViewUserQuotas (string viewName = null, bool? excludeUsersWithinAlertThreshold = null, int? unixUid = null, long? maxViewId = null, string cookie = null, string outputFormat = null, bool? includeUsage = null, string sid = null, bool? summaryOnly = null, long? pageCount = null);

        /// <summary>
        /// Get the quota policies, usage and summary for a view for all its users. It can also fetch the quota policies, usage and summary for a user in all his views.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the input view. If given, there could be three scenarios with the viewName input parameter: It gives the user quota overrides for this view, and the user quota settings. Returns &#39;usersQuotaAndUsage&#39;. If given along with the user id, it returns the quota policy for this user on this view. Returns &#39;usersQuotaAndUsage&#39;. If given along with SummaryOnly as true, a user quota summary for this view would be returned. Returns &#39;summaryForView&#39;. If not given, then the user id is checked. (optional)</param>
        /// <param name="excludeUsersWithinAlertThreshold">This field can be set only when includeUsage is set to true. By default, all the users with logical usage &gt; 0 will be returned in the result. If this field is set to true, only the list of users who has exceeded the alert threshold will be returned. (optional)</param>
        /// <param name="unixUid">If interested in a user via unix-identifier, include UnixUid. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. (optional)</param>
        /// <param name="maxViewId">Related to fetching a particular user&#39;s quota and usage in all his views. It only pertains to the scenario where either UnixUid or Sid is specified, and ViewName is nil. Specify the maxViewId for All the views returned would have view_id&#39;s less than or equal to the given MaxViewId if it is &gt;&#x3D; 0. (optional)</param>
        /// <param name="cookie">Cookie should be used from previous call to list user quota overrides. It resumes (or gives the next set of values) from the result of the previous call. (optional)</param>
        /// <param name="outputFormat">OutputFormat is the Output format for the output. If it is not specified, default is json. (optional)</param>
        /// <param name="includeUsage">If set to true, the logical usage info is included only for users with quota overrides. By default, it is set to false. (optional)</param>
        /// <param name="sid">If interested in a user via smb_client, include SID. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. The string is of following format - S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn. (optional)</param>
        /// <param name="summaryOnly">Specifies a flag to just return a summary. If set to true, and if ViewName is not nil, it returns the summary of users for a view. Otherwise if UserId not nil, and ViewName is nil then it fetches the summary for a user in his views.  By default, it is set to false. (optional)</param>
        /// <param name="pageCount">Specifies the max entries that should be returned in the result. (optional)</param>
        /// <returns>ApiResponse of ViewUserQuotas</returns>
        ApiResponse<ViewUserQuotas> GetViewUserQuotasWithHttpInfo (string viewName = null, bool? excludeUsersWithinAlertThreshold = null, int? unixUid = null, long? maxViewId = null, string cookie = null, string outputFormat = null, bool? includeUsage = null, string sid = null, bool? summaryOnly = null, long? pageCount = null);
        /// <summary>
        /// List Views filtered by some parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Views on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the id of the last View returned in viewList from the previous response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeInactive">Specifies if inactive Views on this Remote Cluster (which have Snapshots copied by replication) should also be returned. Inactive Views are not counted towards the maxCount. By default, this field is set to false. (optional)</param>
        /// <param name="matchAliasNames">If true, view aliases are also matched with the names in viewNames. (optional)</param>
        /// <param name="viewNames">Filter by a list of View names. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Storage Domains (View Boxes) specified by id. (optional)</param>
        /// <param name="viewBoxNames">Filter by a list of View Box names. (optional)</param>
        /// <param name="matchPartialNames">If true, the names in viewNames are matched by prefix rather than exactly matched. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="maxViewId">If the number of Views to return exceeds the maxCount specified in the original request, specify the id of the last View from the viewList in the previous response to get the next set of Views. (optional)</param>
        /// <param name="jobIds">Filter by Protection Job ids. Return Views that are being protected by listed Jobs, which are specified by ids. (optional)</param>
        /// <param name="sortByLogicalUsage">If set to true, the list is sorted descending by logical usage. (optional)</param>
        /// <returns>GetViewsResult</returns>
        GetViewsResult GetViews (bool? includeInactive = null, bool? matchAliasNames = null, List<string> viewNames = null, List<long?> viewBoxIds = null, List<string> viewBoxNames = null, bool? matchPartialNames = null, int? maxCount = null, long? maxViewId = null, List<long?> jobIds = null, bool? sortByLogicalUsage = null);

        /// <summary>
        /// List Views filtered by some parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Views on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the id of the last View returned in viewList from the previous response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeInactive">Specifies if inactive Views on this Remote Cluster (which have Snapshots copied by replication) should also be returned. Inactive Views are not counted towards the maxCount. By default, this field is set to false. (optional)</param>
        /// <param name="matchAliasNames">If true, view aliases are also matched with the names in viewNames. (optional)</param>
        /// <param name="viewNames">Filter by a list of View names. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Storage Domains (View Boxes) specified by id. (optional)</param>
        /// <param name="viewBoxNames">Filter by a list of View Box names. (optional)</param>
        /// <param name="matchPartialNames">If true, the names in viewNames are matched by prefix rather than exactly matched. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="maxViewId">If the number of Views to return exceeds the maxCount specified in the original request, specify the id of the last View from the viewList in the previous response to get the next set of Views. (optional)</param>
        /// <param name="jobIds">Filter by Protection Job ids. Return Views that are being protected by listed Jobs, which are specified by ids. (optional)</param>
        /// <param name="sortByLogicalUsage">If set to true, the list is sorted descending by logical usage. (optional)</param>
        /// <returns>ApiResponse of GetViewsResult</returns>
        ApiResponse<GetViewsResult> GetViewsWithHttpInfo (bool? includeInactive = null, bool? matchAliasNames = null, List<string> viewNames = null, List<long?> viewBoxIds = null, List<string> viewBoxNames = null, bool? matchPartialNames = null, int? maxCount = null, long? maxViewId = null, List<long?> jobIds = null, bool? sortByLogicalUsage = null);
        /// <summary>
        /// List shares filtered by name.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all shares on the Cohesity Cluster are returned. Specifying share name/prefix filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the pagination cookie from the previous response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareName">The share name(substring) that needs to be searched against existing views and aliases. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="paginationCookie">Expected to be empty in the first call to GetViewsByShareName. To get the next set of results, set this value to the pagination cookie value returned  in the response of the previous call. (optional)</param>
        /// <returns>GetViewsByShareNameResult</returns>
        GetViewsByShareNameResult GetViewsByShareName (string shareName = null, int? maxCount = null, string paginationCookie = null);

        /// <summary>
        /// List shares filtered by name.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all shares on the Cohesity Cluster are returned. Specifying share name/prefix filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the pagination cookie from the previous response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareName">The share name(substring) that needs to be searched against existing views and aliases. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="paginationCookie">Expected to be empty in the first call to GetViewsByShareName. To get the next set of results, set this value to the pagination cookie value returned  in the response of the previous call. (optional)</param>
        /// <returns>ApiResponse of GetViewsByShareNameResult</returns>
        ApiResponse<GetViewsByShareNameResult> GetViewsByShareNameWithHttpInfo (string shareName = null, int? maxCount = null, string paginationCookie = null);
        /// <summary>
        /// Overwrites a Target view with contents of a Source view.
        /// </summary>
        /// <remarks>
        /// Specifies source and target view names as params. Returns the modified Target View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to overwrite a Target view with contents of a Source view.</param>
        /// <returns>View</returns>
        View OverwriteView (OverwriteViewParam body);

        /// <summary>
        /// Overwrites a Target view with contents of a Source view.
        /// </summary>
        /// <remarks>
        /// Specifies source and target view names as params. Returns the modified Target View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to overwrite a Target view with contents of a Source view.</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> OverwriteViewWithHttpInfo (OverwriteViewParam body);
        /// <summary>
        /// Rename a View.
        /// </summary>
        /// <remarks>
        /// Specify original name of the View in the &#39;name&#39; parameter. Returns the renamed View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to rename a View.</param>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>View</returns>
        View RenameView (RenameViewParam body, string name);

        /// <summary>
        /// Rename a View.
        /// </summary>
        /// <remarks>
        /// Specify original name of the View in the &#39;name&#39; parameter. Returns the renamed View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to rename a View.</param>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> RenameViewWithHttpInfo (RenameViewParam body, string name);
        /// <summary>
        /// Update the user quota settings in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota metadata params. (optional)</param>
        /// <returns>UserQuotaSettings</returns>
        UserQuotaSettings UpdateUserQuotaSettings (UpdateUserQuotaSettingsForView body = null);

        /// <summary>
        /// Update the user quota settings in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota metadata params. (optional)</param>
        /// <returns>ApiResponse of UserQuotaSettings</returns>
        ApiResponse<UserQuotaSettings> UpdateUserQuotaSettingsWithHttpInfo (UpdateUserQuotaSettingsForView body = null);
        /// <summary>
        /// Update a View.
        /// </summary>
        /// <remarks>
        /// Returns the updated View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <param name="body">Request to update a view.</param>
        /// <returns>View</returns>
        View UpdateView (string name, UpdateViewParam body);

        /// <summary>
        /// Update a View.
        /// </summary>
        /// <remarks>
        /// Returns the updated View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <param name="body">Request to update a view.</param>
        /// <returns>ApiResponse of View</returns>
        ApiResponse<View> UpdateViewWithHttpInfo (string name, UpdateViewParam body);
        /// <summary>
        /// Update a new quota policy for a user in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>UserQuotaAndUsage</returns>
        UserQuotaAndUsage UpdateViewUserQuota (ViewUserQuotaParameters body = null);

        /// <summary>
        /// Update a new quota policy for a user in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>ApiResponse of UserQuotaAndUsage</returns>
        ApiResponse<UserQuotaAndUsage> UpdateViewUserQuotaWithHttpInfo (ViewUserQuotaParameters body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Clone a directory of a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a directory.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CloneDirectoryAsync (CloneDirectoryParams body);

        /// <summary>
        /// Clone a directory of a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a directory.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CloneDirectoryAsyncWithHttpInfo (CloneDirectoryParams body);
        /// <summary>
        /// Clone a View.
        /// </summary>
        /// <remarks>
        /// Returns the cloned View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a View.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> CloneViewAsync (CloneViewRequest body);

        /// <summary>
        /// Clone a View.
        /// </summary>
        /// <remarks>
        /// Returns the cloned View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a View.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> CloneViewAsyncWithHttpInfo (CloneViewRequest body);
        /// <summary>
        /// Create a View.
        /// </summary>
        /// <remarks>
        /// Returns the created View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> CreateViewAsync (CreateViewRequest body);

        /// <summary>
        /// Create a View.
        /// </summary>
        /// <remarks>
        /// Returns the created View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> CreateViewAsyncWithHttpInfo (CreateViewRequest body);
        /// <summary>
        /// Create a View Alias. A View Alias allows a directory inside the view to be mounted without specifying the entire path.
        /// </summary>
        /// <remarks>
        /// Returns the created View Alias.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>Task of ViewAlias</returns>
        System.Threading.Tasks.Task<ViewAlias> CreateViewAliasAsync (ViewAlias body);

        /// <summary>
        /// Create a View Alias. A View Alias allows a directory inside the view to be mounted without specifying the entire path.
        /// </summary>
        /// <remarks>
        /// Returns the created View Alias.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>Task of ApiResponse (ViewAlias)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewAlias>> CreateViewAliasAsyncWithHttpInfo (ViewAlias body);
        /// <summary>
        /// Create a new quota policy for a user in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of UserQuotaAndUsage</returns>
        System.Threading.Tasks.Task<UserQuotaAndUsage> CreateViewUserQuotaAsync (ViewUserQuotaParameters body = null);

        /// <summary>
        /// Create a new quota policy for a user in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of ApiResponse (UserQuotaAndUsage)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserQuotaAndUsage>> CreateViewUserQuotaAsyncWithHttpInfo (ViewUserQuotaParameters body = null);
        /// <summary>
        /// Delete a View.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteViewAsync (string name);

        /// <summary>
        /// Delete a View.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteViewAsyncWithHttpInfo (string name);
        /// <summary>
        /// Delete a View Alias.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View Alias name.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteViewAliasAsync (string name);

        /// <summary>
        /// Delete a View Alias.
        /// </summary>
        /// <remarks>
        /// Returns delete status upon completion.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View Alias name.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteViewAliasAsyncWithHttpInfo (string name);
        /// <summary>
        /// Delete the quota policy overrides for users in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteViewUsersQuotaAsync (DeleteViewUsersQuotaParameters body = null);

        /// <summary>
        /// Delete the quota policy overrides for users in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteViewUsersQuotaAsyncWithHttpInfo (DeleteViewUsersQuotaParameters body = null);
        /// <summary>
        /// List details about a single View.
        /// </summary>
        /// <remarks>
        /// Returns the View corresponding to the specified View name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> GetViewByNameAsync (string name);

        /// <summary>
        /// List details about a single View.
        /// </summary>
        /// <remarks>
        /// Returns the View corresponding to the specified View name.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> GetViewByNameAsyncWithHttpInfo (string name);
        /// <summary>
        /// Get the quota policies, usage and summary for a view for all its users. It can also fetch the quota policies, usage and summary for a user in all his views.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the input view. If given, there could be three scenarios with the viewName input parameter: It gives the user quota overrides for this view, and the user quota settings. Returns &#39;usersQuotaAndUsage&#39;. If given along with the user id, it returns the quota policy for this user on this view. Returns &#39;usersQuotaAndUsage&#39;. If given along with SummaryOnly as true, a user quota summary for this view would be returned. Returns &#39;summaryForView&#39;. If not given, then the user id is checked. (optional)</param>
        /// <param name="excludeUsersWithinAlertThreshold">This field can be set only when includeUsage is set to true. By default, all the users with logical usage &gt; 0 will be returned in the result. If this field is set to true, only the list of users who has exceeded the alert threshold will be returned. (optional)</param>
        /// <param name="unixUid">If interested in a user via unix-identifier, include UnixUid. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. (optional)</param>
        /// <param name="maxViewId">Related to fetching a particular user&#39;s quota and usage in all his views. It only pertains to the scenario where either UnixUid or Sid is specified, and ViewName is nil. Specify the maxViewId for All the views returned would have view_id&#39;s less than or equal to the given MaxViewId if it is &gt;&#x3D; 0. (optional)</param>
        /// <param name="cookie">Cookie should be used from previous call to list user quota overrides. It resumes (or gives the next set of values) from the result of the previous call. (optional)</param>
        /// <param name="outputFormat">OutputFormat is the Output format for the output. If it is not specified, default is json. (optional)</param>
        /// <param name="includeUsage">If set to true, the logical usage info is included only for users with quota overrides. By default, it is set to false. (optional)</param>
        /// <param name="sid">If interested in a user via smb_client, include SID. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. The string is of following format - S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn. (optional)</param>
        /// <param name="summaryOnly">Specifies a flag to just return a summary. If set to true, and if ViewName is not nil, it returns the summary of users for a view. Otherwise if UserId not nil, and ViewName is nil then it fetches the summary for a user in his views.  By default, it is set to false. (optional)</param>
        /// <param name="pageCount">Specifies the max entries that should be returned in the result. (optional)</param>
        /// <returns>Task of ViewUserQuotas</returns>
        System.Threading.Tasks.Task<ViewUserQuotas> GetViewUserQuotasAsync (string viewName = null, bool? excludeUsersWithinAlertThreshold = null, int? unixUid = null, long? maxViewId = null, string cookie = null, string outputFormat = null, bool? includeUsage = null, string sid = null, bool? summaryOnly = null, long? pageCount = null);

        /// <summary>
        /// Get the quota policies, usage and summary for a view for all its users. It can also fetch the quota policies, usage and summary for a user in all his views.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the input view. If given, there could be three scenarios with the viewName input parameter: It gives the user quota overrides for this view, and the user quota settings. Returns &#39;usersQuotaAndUsage&#39;. If given along with the user id, it returns the quota policy for this user on this view. Returns &#39;usersQuotaAndUsage&#39;. If given along with SummaryOnly as true, a user quota summary for this view would be returned. Returns &#39;summaryForView&#39;. If not given, then the user id is checked. (optional)</param>
        /// <param name="excludeUsersWithinAlertThreshold">This field can be set only when includeUsage is set to true. By default, all the users with logical usage &gt; 0 will be returned in the result. If this field is set to true, only the list of users who has exceeded the alert threshold will be returned. (optional)</param>
        /// <param name="unixUid">If interested in a user via unix-identifier, include UnixUid. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. (optional)</param>
        /// <param name="maxViewId">Related to fetching a particular user&#39;s quota and usage in all his views. It only pertains to the scenario where either UnixUid or Sid is specified, and ViewName is nil. Specify the maxViewId for All the views returned would have view_id&#39;s less than or equal to the given MaxViewId if it is &gt;&#x3D; 0. (optional)</param>
        /// <param name="cookie">Cookie should be used from previous call to list user quota overrides. It resumes (or gives the next set of values) from the result of the previous call. (optional)</param>
        /// <param name="outputFormat">OutputFormat is the Output format for the output. If it is not specified, default is json. (optional)</param>
        /// <param name="includeUsage">If set to true, the logical usage info is included only for users with quota overrides. By default, it is set to false. (optional)</param>
        /// <param name="sid">If interested in a user via smb_client, include SID. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. The string is of following format - S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn. (optional)</param>
        /// <param name="summaryOnly">Specifies a flag to just return a summary. If set to true, and if ViewName is not nil, it returns the summary of users for a view. Otherwise if UserId not nil, and ViewName is nil then it fetches the summary for a user in his views.  By default, it is set to false. (optional)</param>
        /// <param name="pageCount">Specifies the max entries that should be returned in the result. (optional)</param>
        /// <returns>Task of ApiResponse (ViewUserQuotas)</returns>
        System.Threading.Tasks.Task<ApiResponse<ViewUserQuotas>> GetViewUserQuotasAsyncWithHttpInfo (string viewName = null, bool? excludeUsersWithinAlertThreshold = null, int? unixUid = null, long? maxViewId = null, string cookie = null, string outputFormat = null, bool? includeUsage = null, string sid = null, bool? summaryOnly = null, long? pageCount = null);
        /// <summary>
        /// List Views filtered by some parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Views on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the id of the last View returned in viewList from the previous response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeInactive">Specifies if inactive Views on this Remote Cluster (which have Snapshots copied by replication) should also be returned. Inactive Views are not counted towards the maxCount. By default, this field is set to false. (optional)</param>
        /// <param name="matchAliasNames">If true, view aliases are also matched with the names in viewNames. (optional)</param>
        /// <param name="viewNames">Filter by a list of View names. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Storage Domains (View Boxes) specified by id. (optional)</param>
        /// <param name="viewBoxNames">Filter by a list of View Box names. (optional)</param>
        /// <param name="matchPartialNames">If true, the names in viewNames are matched by prefix rather than exactly matched. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="maxViewId">If the number of Views to return exceeds the maxCount specified in the original request, specify the id of the last View from the viewList in the previous response to get the next set of Views. (optional)</param>
        /// <param name="jobIds">Filter by Protection Job ids. Return Views that are being protected by listed Jobs, which are specified by ids. (optional)</param>
        /// <param name="sortByLogicalUsage">If set to true, the list is sorted descending by logical usage. (optional)</param>
        /// <returns>Task of GetViewsResult</returns>
        System.Threading.Tasks.Task<GetViewsResult> GetViewsAsync (bool? includeInactive = null, bool? matchAliasNames = null, List<string> viewNames = null, List<long?> viewBoxIds = null, List<string> viewBoxNames = null, bool? matchPartialNames = null, int? maxCount = null, long? maxViewId = null, List<long?> jobIds = null, bool? sortByLogicalUsage = null);

        /// <summary>
        /// List Views filtered by some parameters.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all Views on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the id of the last View returned in viewList from the previous response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeInactive">Specifies if inactive Views on this Remote Cluster (which have Snapshots copied by replication) should also be returned. Inactive Views are not counted towards the maxCount. By default, this field is set to false. (optional)</param>
        /// <param name="matchAliasNames">If true, view aliases are also matched with the names in viewNames. (optional)</param>
        /// <param name="viewNames">Filter by a list of View names. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Storage Domains (View Boxes) specified by id. (optional)</param>
        /// <param name="viewBoxNames">Filter by a list of View Box names. (optional)</param>
        /// <param name="matchPartialNames">If true, the names in viewNames are matched by prefix rather than exactly matched. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="maxViewId">If the number of Views to return exceeds the maxCount specified in the original request, specify the id of the last View from the viewList in the previous response to get the next set of Views. (optional)</param>
        /// <param name="jobIds">Filter by Protection Job ids. Return Views that are being protected by listed Jobs, which are specified by ids. (optional)</param>
        /// <param name="sortByLogicalUsage">If set to true, the list is sorted descending by logical usage. (optional)</param>
        /// <returns>Task of ApiResponse (GetViewsResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetViewsResult>> GetViewsAsyncWithHttpInfo (bool? includeInactive = null, bool? matchAliasNames = null, List<string> viewNames = null, List<long?> viewBoxIds = null, List<string> viewBoxNames = null, bool? matchPartialNames = null, int? maxCount = null, long? maxViewId = null, List<long?> jobIds = null, bool? sortByLogicalUsage = null);
        /// <summary>
        /// List shares filtered by name.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all shares on the Cohesity Cluster are returned. Specifying share name/prefix filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the pagination cookie from the previous response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareName">The share name(substring) that needs to be searched against existing views and aliases. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="paginationCookie">Expected to be empty in the first call to GetViewsByShareName. To get the next set of results, set this value to the pagination cookie value returned  in the response of the previous call. (optional)</param>
        /// <returns>Task of GetViewsByShareNameResult</returns>
        System.Threading.Tasks.Task<GetViewsByShareNameResult> GetViewsByShareNameAsync (string shareName = null, int? maxCount = null, string paginationCookie = null);

        /// <summary>
        /// List shares filtered by name.
        /// </summary>
        /// <remarks>
        /// If no parameters are specified, all shares on the Cohesity Cluster are returned. Specifying share name/prefix filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the pagination cookie from the previous response.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareName">The share name(substring) that needs to be searched against existing views and aliases. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="paginationCookie">Expected to be empty in the first call to GetViewsByShareName. To get the next set of results, set this value to the pagination cookie value returned  in the response of the previous call. (optional)</param>
        /// <returns>Task of ApiResponse (GetViewsByShareNameResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetViewsByShareNameResult>> GetViewsByShareNameAsyncWithHttpInfo (string shareName = null, int? maxCount = null, string paginationCookie = null);
        /// <summary>
        /// Overwrites a Target view with contents of a Source view.
        /// </summary>
        /// <remarks>
        /// Specifies source and target view names as params. Returns the modified Target View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to overwrite a Target view with contents of a Source view.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> OverwriteViewAsync (OverwriteViewParam body);

        /// <summary>
        /// Overwrites a Target view with contents of a Source view.
        /// </summary>
        /// <remarks>
        /// Specifies source and target view names as params. Returns the modified Target View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to overwrite a Target view with contents of a Source view.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> OverwriteViewAsyncWithHttpInfo (OverwriteViewParam body);
        /// <summary>
        /// Rename a View.
        /// </summary>
        /// <remarks>
        /// Specify original name of the View in the &#39;name&#39; parameter. Returns the renamed View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to rename a View.</param>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> RenameViewAsync (RenameViewParam body, string name);

        /// <summary>
        /// Rename a View.
        /// </summary>
        /// <remarks>
        /// Specify original name of the View in the &#39;name&#39; parameter. Returns the renamed View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to rename a View.</param>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> RenameViewAsyncWithHttpInfo (RenameViewParam body, string name);
        /// <summary>
        /// Update the user quota settings in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota metadata params. (optional)</param>
        /// <returns>Task of UserQuotaSettings</returns>
        System.Threading.Tasks.Task<UserQuotaSettings> UpdateUserQuotaSettingsAsync (UpdateUserQuotaSettingsForView body = null);

        /// <summary>
        /// Update the user quota settings in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota metadata params. (optional)</param>
        /// <returns>Task of ApiResponse (UserQuotaSettings)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserQuotaSettings>> UpdateUserQuotaSettingsAsyncWithHttpInfo (UpdateUserQuotaSettingsForView body = null);
        /// <summary>
        /// Update a View.
        /// </summary>
        /// <remarks>
        /// Returns the updated View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <param name="body">Request to update a view.</param>
        /// <returns>Task of View</returns>
        System.Threading.Tasks.Task<View> UpdateViewAsync (string name, UpdateViewParam body);

        /// <summary>
        /// Update a View.
        /// </summary>
        /// <remarks>
        /// Returns the updated View.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <param name="body">Request to update a view.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        System.Threading.Tasks.Task<ApiResponse<View>> UpdateViewAsyncWithHttpInfo (string name, UpdateViewParam body);
        /// <summary>
        /// Update a new quota policy for a user in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of UserQuotaAndUsage</returns>
        System.Threading.Tasks.Task<UserQuotaAndUsage> UpdateViewUserQuotaAsync (ViewUserQuotaParameters body = null);

        /// <summary>
        /// Update a new quota policy for a user in a view.
        /// </summary>
        /// <remarks>
        /// Returns error if op fails.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of ApiResponse (UserQuotaAndUsage)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserQuotaAndUsage>> UpdateViewUserQuotaAsyncWithHttpInfo (ViewUserQuotaParameters body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ViewsApi : IViewsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ViewsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ViewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ViewsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Clone a directory of a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a directory.</param>
        /// <returns></returns>
        public void CloneDirectory (CloneDirectoryParams body)
        {
             CloneDirectoryWithHttpInfo(body);
        }

        /// <summary>
        /// Clone a directory of a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a directory.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CloneDirectoryWithHttpInfo (CloneDirectoryParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->CloneDirectory");

            var localVarPath = "/public/views/cloneDirectory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneDirectory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clone a directory of a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a directory.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CloneDirectoryAsync (CloneDirectoryParams body)
        {
             await CloneDirectoryAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Clone a directory of a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a directory.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CloneDirectoryAsyncWithHttpInfo (CloneDirectoryParams body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->CloneDirectory");

            var localVarPath = "/public/views/cloneDirectory";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneDirectory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Clone a View. Returns the cloned View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a View.</param>
        /// <returns>View</returns>
        public View CloneView (CloneViewRequest body)
        {
             ApiResponse<View> localVarResponse = CloneViewWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clone a View. Returns the cloned View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a View.</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse< View > CloneViewWithHttpInfo (CloneViewRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->CloneView");

            var localVarPath = "/public/views/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Clone a View. Returns the cloned View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a View.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> CloneViewAsync (CloneViewRequest body)
        {
             ApiResponse<View> localVarResponse = await CloneViewAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clone a View. Returns the cloned View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to clone a View.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> CloneViewAsyncWithHttpInfo (CloneViewRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->CloneView");

            var localVarPath = "/public/views/clone";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloneView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Create a View. Returns the created View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>View</returns>
        public View CreateView (CreateViewRequest body)
        {
             ApiResponse<View> localVarResponse = CreateViewWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a View. Returns the created View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse< View > CreateViewWithHttpInfo (CreateViewRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->CreateView");

            var localVarPath = "/public/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Create a View. Returns the created View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> CreateViewAsync (CreateViewRequest body)
        {
             ApiResponse<View> localVarResponse = await CreateViewAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a View. Returns the created View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> CreateViewAsyncWithHttpInfo (CreateViewRequest body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->CreateView");

            var localVarPath = "/public/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Create a View Alias. A View Alias allows a directory inside the view to be mounted without specifying the entire path. Returns the created View Alias.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>ViewAlias</returns>
        public ViewAlias CreateViewAlias (ViewAlias body)
        {
             ApiResponse<ViewAlias> localVarResponse = CreateViewAliasWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a View Alias. A View Alias allows a directory inside the view to be mounted without specifying the entire path. Returns the created View Alias.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>ApiResponse of ViewAlias</returns>
        public ApiResponse< ViewAlias > CreateViewAliasWithHttpInfo (ViewAlias body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->CreateViewAlias");

            var localVarPath = "/public/viewAliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateViewAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewAlias>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewAlias) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewAlias)));
        }

        /// <summary>
        /// Create a View Alias. A View Alias allows a directory inside the view to be mounted without specifying the entire path. Returns the created View Alias.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>Task of ViewAlias</returns>
        public async System.Threading.Tasks.Task<ViewAlias> CreateViewAliasAsync (ViewAlias body)
        {
             ApiResponse<ViewAlias> localVarResponse = await CreateViewAliasAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a View Alias. A View Alias allows a directory inside the view to be mounted without specifying the entire path. Returns the created View Alias.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to create a View.</param>
        /// <returns>Task of ApiResponse (ViewAlias)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewAlias>> CreateViewAliasAsyncWithHttpInfo (ViewAlias body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->CreateViewAlias");

            var localVarPath = "/public/viewAliases";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateViewAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewAlias>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewAlias) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewAlias)));
        }

        /// <summary>
        /// Create a new quota policy for a user in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>UserQuotaAndUsage</returns>
        public UserQuotaAndUsage CreateViewUserQuota (ViewUserQuotaParameters body = null)
        {
             ApiResponse<UserQuotaAndUsage> localVarResponse = CreateViewUserQuotaWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new quota policy for a user in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>ApiResponse of UserQuotaAndUsage</returns>
        public ApiResponse< UserQuotaAndUsage > CreateViewUserQuotaWithHttpInfo (ViewUserQuotaParameters body = null)
        {

            var localVarPath = "/public/viewUserQuotas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateViewUserQuota", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserQuotaAndUsage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserQuotaAndUsage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserQuotaAndUsage)));
        }

        /// <summary>
        /// Create a new quota policy for a user in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of UserQuotaAndUsage</returns>
        public async System.Threading.Tasks.Task<UserQuotaAndUsage> CreateViewUserQuotaAsync (ViewUserQuotaParameters body = null)
        {
             ApiResponse<UserQuotaAndUsage> localVarResponse = await CreateViewUserQuotaAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new quota policy for a user in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of ApiResponse (UserQuotaAndUsage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserQuotaAndUsage>> CreateViewUserQuotaAsyncWithHttpInfo (ViewUserQuotaParameters body = null)
        {

            var localVarPath = "/public/viewUserQuotas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateViewUserQuota", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserQuotaAndUsage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserQuotaAndUsage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserQuotaAndUsage)));
        }

        /// <summary>
        /// Delete a View. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns></returns>
        public void DeleteView (string name)
        {
             DeleteViewWithHttpInfo(name);
        }

        /// <summary>
        /// Delete a View. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteViewWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ViewsApi->DeleteView");

            var localVarPath = "/public/views/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a View. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteViewAsync (string name)
        {
             await DeleteViewAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// Delete a View. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteViewAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ViewsApi->DeleteView");

            var localVarPath = "/public/views/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a View Alias. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View Alias name.</param>
        /// <returns></returns>
        public void DeleteViewAlias (string name)
        {
             DeleteViewAliasWithHttpInfo(name);
        }

        /// <summary>
        /// Delete a View Alias. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View Alias name.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteViewAliasWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ViewsApi->DeleteViewAlias");

            var localVarPath = "/public/viewAliases/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteViewAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete a View Alias. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View Alias name.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteViewAliasAsync (string name)
        {
             await DeleteViewAliasAsyncWithHttpInfo(name);

        }

        /// <summary>
        /// Delete a View Alias. Returns delete status upon completion.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View Alias name.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteViewAliasAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ViewsApi->DeleteViewAlias");

            var localVarPath = "/public/viewAliases/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteViewAlias", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the quota policy overrides for users in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns></returns>
        public void DeleteViewUsersQuota (DeleteViewUsersQuotaParameters body = null)
        {
             DeleteViewUsersQuotaWithHttpInfo(body);
        }

        /// <summary>
        /// Delete the quota policy overrides for users in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteViewUsersQuotaWithHttpInfo (DeleteViewUsersQuotaParameters body = null)
        {

            var localVarPath = "/public/viewUserQuotas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteViewUsersQuota", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete the quota policy overrides for users in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteViewUsersQuotaAsync (DeleteViewUsersQuotaParameters body = null)
        {
             await DeleteViewUsersQuotaAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Delete the quota policy overrides for users in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteViewUsersQuotaAsyncWithHttpInfo (DeleteViewUsersQuotaParameters body = null)
        {

            var localVarPath = "/public/viewUserQuotas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteViewUsersQuota", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List details about a single View. Returns the View corresponding to the specified View name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>View</returns>
        public View GetViewByName (string name)
        {
             ApiResponse<View> localVarResponse = GetViewByNameWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List details about a single View. Returns the View corresponding to the specified View name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse< View > GetViewByNameWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ViewsApi->GetViewByName");

            var localVarPath = "/public/views/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// List details about a single View. Returns the View corresponding to the specified View name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> GetViewByNameAsync (string name)
        {
             ApiResponse<View> localVarResponse = await GetViewByNameAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List details about a single View. Returns the View corresponding to the specified View name.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> GetViewByNameAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ViewsApi->GetViewByName");

            var localVarPath = "/public/views/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Get the quota policies, usage and summary for a view for all its users. It can also fetch the quota policies, usage and summary for a user in all his views. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the input view. If given, there could be three scenarios with the viewName input parameter: It gives the user quota overrides for this view, and the user quota settings. Returns &#39;usersQuotaAndUsage&#39;. If given along with the user id, it returns the quota policy for this user on this view. Returns &#39;usersQuotaAndUsage&#39;. If given along with SummaryOnly as true, a user quota summary for this view would be returned. Returns &#39;summaryForView&#39;. If not given, then the user id is checked. (optional)</param>
        /// <param name="excludeUsersWithinAlertThreshold">This field can be set only when includeUsage is set to true. By default, all the users with logical usage &gt; 0 will be returned in the result. If this field is set to true, only the list of users who has exceeded the alert threshold will be returned. (optional)</param>
        /// <param name="unixUid">If interested in a user via unix-identifier, include UnixUid. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. (optional)</param>
        /// <param name="maxViewId">Related to fetching a particular user&#39;s quota and usage in all his views. It only pertains to the scenario where either UnixUid or Sid is specified, and ViewName is nil. Specify the maxViewId for All the views returned would have view_id&#39;s less than or equal to the given MaxViewId if it is &gt;&#x3D; 0. (optional)</param>
        /// <param name="cookie">Cookie should be used from previous call to list user quota overrides. It resumes (or gives the next set of values) from the result of the previous call. (optional)</param>
        /// <param name="outputFormat">OutputFormat is the Output format for the output. If it is not specified, default is json. (optional)</param>
        /// <param name="includeUsage">If set to true, the logical usage info is included only for users with quota overrides. By default, it is set to false. (optional)</param>
        /// <param name="sid">If interested in a user via smb_client, include SID. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. The string is of following format - S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn. (optional)</param>
        /// <param name="summaryOnly">Specifies a flag to just return a summary. If set to true, and if ViewName is not nil, it returns the summary of users for a view. Otherwise if UserId not nil, and ViewName is nil then it fetches the summary for a user in his views.  By default, it is set to false. (optional)</param>
        /// <param name="pageCount">Specifies the max entries that should be returned in the result. (optional)</param>
        /// <returns>ViewUserQuotas</returns>
        public ViewUserQuotas GetViewUserQuotas (string viewName = null, bool? excludeUsersWithinAlertThreshold = null, int? unixUid = null, long? maxViewId = null, string cookie = null, string outputFormat = null, bool? includeUsage = null, string sid = null, bool? summaryOnly = null, long? pageCount = null)
        {
             ApiResponse<ViewUserQuotas> localVarResponse = GetViewUserQuotasWithHttpInfo(viewName, excludeUsersWithinAlertThreshold, unixUid, maxViewId, cookie, outputFormat, includeUsage, sid, summaryOnly, pageCount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the quota policies, usage and summary for a view for all its users. It can also fetch the quota policies, usage and summary for a user in all his views. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the input view. If given, there could be three scenarios with the viewName input parameter: It gives the user quota overrides for this view, and the user quota settings. Returns &#39;usersQuotaAndUsage&#39;. If given along with the user id, it returns the quota policy for this user on this view. Returns &#39;usersQuotaAndUsage&#39;. If given along with SummaryOnly as true, a user quota summary for this view would be returned. Returns &#39;summaryForView&#39;. If not given, then the user id is checked. (optional)</param>
        /// <param name="excludeUsersWithinAlertThreshold">This field can be set only when includeUsage is set to true. By default, all the users with logical usage &gt; 0 will be returned in the result. If this field is set to true, only the list of users who has exceeded the alert threshold will be returned. (optional)</param>
        /// <param name="unixUid">If interested in a user via unix-identifier, include UnixUid. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. (optional)</param>
        /// <param name="maxViewId">Related to fetching a particular user&#39;s quota and usage in all his views. It only pertains to the scenario where either UnixUid or Sid is specified, and ViewName is nil. Specify the maxViewId for All the views returned would have view_id&#39;s less than or equal to the given MaxViewId if it is &gt;&#x3D; 0. (optional)</param>
        /// <param name="cookie">Cookie should be used from previous call to list user quota overrides. It resumes (or gives the next set of values) from the result of the previous call. (optional)</param>
        /// <param name="outputFormat">OutputFormat is the Output format for the output. If it is not specified, default is json. (optional)</param>
        /// <param name="includeUsage">If set to true, the logical usage info is included only for users with quota overrides. By default, it is set to false. (optional)</param>
        /// <param name="sid">If interested in a user via smb_client, include SID. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. The string is of following format - S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn. (optional)</param>
        /// <param name="summaryOnly">Specifies a flag to just return a summary. If set to true, and if ViewName is not nil, it returns the summary of users for a view. Otherwise if UserId not nil, and ViewName is nil then it fetches the summary for a user in his views.  By default, it is set to false. (optional)</param>
        /// <param name="pageCount">Specifies the max entries that should be returned in the result. (optional)</param>
        /// <returns>ApiResponse of ViewUserQuotas</returns>
        public ApiResponse< ViewUserQuotas > GetViewUserQuotasWithHttpInfo (string viewName = null, bool? excludeUsersWithinAlertThreshold = null, int? unixUid = null, long? maxViewId = null, string cookie = null, string outputFormat = null, bool? includeUsage = null, string sid = null, bool? summaryOnly = null, long? pageCount = null)
        {

            var localVarPath = "/public/viewUserQuotas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "viewName", viewName)); // query parameter
            if (excludeUsersWithinAlertThreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeUsersWithinAlertThreshold", excludeUsersWithinAlertThreshold)); // query parameter
            if (unixUid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unixUid", unixUid)); // query parameter
            if (maxViewId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxViewId", maxViewId)); // query parameter
            if (cookie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cookie", cookie)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (includeUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeUsage", includeUsage)); // query parameter
            if (sid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sid", sid)); // query parameter
            if (summaryOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "summaryOnly", summaryOnly)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewUserQuotas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewUserQuotas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewUserQuotas) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewUserQuotas)));
        }

        /// <summary>
        /// Get the quota policies, usage and summary for a view for all its users. It can also fetch the quota policies, usage and summary for a user in all his views. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the input view. If given, there could be three scenarios with the viewName input parameter: It gives the user quota overrides for this view, and the user quota settings. Returns &#39;usersQuotaAndUsage&#39;. If given along with the user id, it returns the quota policy for this user on this view. Returns &#39;usersQuotaAndUsage&#39;. If given along with SummaryOnly as true, a user quota summary for this view would be returned. Returns &#39;summaryForView&#39;. If not given, then the user id is checked. (optional)</param>
        /// <param name="excludeUsersWithinAlertThreshold">This field can be set only when includeUsage is set to true. By default, all the users with logical usage &gt; 0 will be returned in the result. If this field is set to true, only the list of users who has exceeded the alert threshold will be returned. (optional)</param>
        /// <param name="unixUid">If interested in a user via unix-identifier, include UnixUid. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. (optional)</param>
        /// <param name="maxViewId">Related to fetching a particular user&#39;s quota and usage in all his views. It only pertains to the scenario where either UnixUid or Sid is specified, and ViewName is nil. Specify the maxViewId for All the views returned would have view_id&#39;s less than or equal to the given MaxViewId if it is &gt;&#x3D; 0. (optional)</param>
        /// <param name="cookie">Cookie should be used from previous call to list user quota overrides. It resumes (or gives the next set of values) from the result of the previous call. (optional)</param>
        /// <param name="outputFormat">OutputFormat is the Output format for the output. If it is not specified, default is json. (optional)</param>
        /// <param name="includeUsage">If set to true, the logical usage info is included only for users with quota overrides. By default, it is set to false. (optional)</param>
        /// <param name="sid">If interested in a user via smb_client, include SID. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. The string is of following format - S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn. (optional)</param>
        /// <param name="summaryOnly">Specifies a flag to just return a summary. If set to true, and if ViewName is not nil, it returns the summary of users for a view. Otherwise if UserId not nil, and ViewName is nil then it fetches the summary for a user in his views.  By default, it is set to false. (optional)</param>
        /// <param name="pageCount">Specifies the max entries that should be returned in the result. (optional)</param>
        /// <returns>Task of ViewUserQuotas</returns>
        public async System.Threading.Tasks.Task<ViewUserQuotas> GetViewUserQuotasAsync (string viewName = null, bool? excludeUsersWithinAlertThreshold = null, int? unixUid = null, long? maxViewId = null, string cookie = null, string outputFormat = null, bool? includeUsage = null, string sid = null, bool? summaryOnly = null, long? pageCount = null)
        {
             ApiResponse<ViewUserQuotas> localVarResponse = await GetViewUserQuotasAsyncWithHttpInfo(viewName, excludeUsersWithinAlertThreshold, unixUid, maxViewId, cookie, outputFormat, includeUsage, sid, summaryOnly, pageCount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the quota policies, usage and summary for a view for all its users. It can also fetch the quota policies, usage and summary for a user in all his views. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="viewName">Specifies the name of the input view. If given, there could be three scenarios with the viewName input parameter: It gives the user quota overrides for this view, and the user quota settings. Returns &#39;usersQuotaAndUsage&#39;. If given along with the user id, it returns the quota policy for this user on this view. Returns &#39;usersQuotaAndUsage&#39;. If given along with SummaryOnly as true, a user quota summary for this view would be returned. Returns &#39;summaryForView&#39;. If not given, then the user id is checked. (optional)</param>
        /// <param name="excludeUsersWithinAlertThreshold">This field can be set only when includeUsage is set to true. By default, all the users with logical usage &gt; 0 will be returned in the result. If this field is set to true, only the list of users who has exceeded the alert threshold will be returned. (optional)</param>
        /// <param name="unixUid">If interested in a user via unix-identifier, include UnixUid. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. (optional)</param>
        /// <param name="maxViewId">Related to fetching a particular user&#39;s quota and usage in all his views. It only pertains to the scenario where either UnixUid or Sid is specified, and ViewName is nil. Specify the maxViewId for All the views returned would have view_id&#39;s less than or equal to the given MaxViewId if it is &gt;&#x3D; 0. (optional)</param>
        /// <param name="cookie">Cookie should be used from previous call to list user quota overrides. It resumes (or gives the next set of values) from the result of the previous call. (optional)</param>
        /// <param name="outputFormat">OutputFormat is the Output format for the output. If it is not specified, default is json. (optional)</param>
        /// <param name="includeUsage">If set to true, the logical usage info is included only for users with quota overrides. By default, it is set to false. (optional)</param>
        /// <param name="sid">If interested in a user via smb_client, include SID. Otherwise, If valid unix-id to SID mappings are available (i.e., when mixed mode is enabled) the server will perform the necessary id mapping and return the correct usage irrespective of whether the unix id / SID is provided. The string is of following format - S-1-IdentifierAuthority-SubAuthority1-SubAuthority2-...-SubAuthorityn. (optional)</param>
        /// <param name="summaryOnly">Specifies a flag to just return a summary. If set to true, and if ViewName is not nil, it returns the summary of users for a view. Otherwise if UserId not nil, and ViewName is nil then it fetches the summary for a user in his views.  By default, it is set to false. (optional)</param>
        /// <param name="pageCount">Specifies the max entries that should be returned in the result. (optional)</param>
        /// <returns>Task of ApiResponse (ViewUserQuotas)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ViewUserQuotas>> GetViewUserQuotasAsyncWithHttpInfo (string viewName = null, bool? excludeUsersWithinAlertThreshold = null, int? unixUid = null, long? maxViewId = null, string cookie = null, string outputFormat = null, bool? includeUsage = null, string sid = null, bool? summaryOnly = null, long? pageCount = null)
        {

            var localVarPath = "/public/viewUserQuotas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (viewName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "viewName", viewName)); // query parameter
            if (excludeUsersWithinAlertThreshold != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "excludeUsersWithinAlertThreshold", excludeUsersWithinAlertThreshold)); // query parameter
            if (unixUid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unixUid", unixUid)); // query parameter
            if (maxViewId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxViewId", maxViewId)); // query parameter
            if (cookie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cookie", cookie)); // query parameter
            if (outputFormat != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "outputFormat", outputFormat)); // query parameter
            if (includeUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeUsage", includeUsage)); // query parameter
            if (sid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sid", sid)); // query parameter
            if (summaryOnly != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "summaryOnly", summaryOnly)); // query parameter
            if (pageCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageCount", pageCount)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewUserQuotas", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ViewUserQuotas>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ViewUserQuotas) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ViewUserQuotas)));
        }

        /// <summary>
        /// List Views filtered by some parameters. If no parameters are specified, all Views on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the id of the last View returned in viewList from the previous response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeInactive">Specifies if inactive Views on this Remote Cluster (which have Snapshots copied by replication) should also be returned. Inactive Views are not counted towards the maxCount. By default, this field is set to false. (optional)</param>
        /// <param name="matchAliasNames">If true, view aliases are also matched with the names in viewNames. (optional)</param>
        /// <param name="viewNames">Filter by a list of View names. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Storage Domains (View Boxes) specified by id. (optional)</param>
        /// <param name="viewBoxNames">Filter by a list of View Box names. (optional)</param>
        /// <param name="matchPartialNames">If true, the names in viewNames are matched by prefix rather than exactly matched. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="maxViewId">If the number of Views to return exceeds the maxCount specified in the original request, specify the id of the last View from the viewList in the previous response to get the next set of Views. (optional)</param>
        /// <param name="jobIds">Filter by Protection Job ids. Return Views that are being protected by listed Jobs, which are specified by ids. (optional)</param>
        /// <param name="sortByLogicalUsage">If set to true, the list is sorted descending by logical usage. (optional)</param>
        /// <returns>GetViewsResult</returns>
        public GetViewsResult GetViews (bool? includeInactive = null, bool? matchAliasNames = null, List<string> viewNames = null, List<long?> viewBoxIds = null, List<string> viewBoxNames = null, bool? matchPartialNames = null, int? maxCount = null, long? maxViewId = null, List<long?> jobIds = null, bool? sortByLogicalUsage = null)
        {
             ApiResponse<GetViewsResult> localVarResponse = GetViewsWithHttpInfo(includeInactive, matchAliasNames, viewNames, viewBoxIds, viewBoxNames, matchPartialNames, maxCount, maxViewId, jobIds, sortByLogicalUsage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Views filtered by some parameters. If no parameters are specified, all Views on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the id of the last View returned in viewList from the previous response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeInactive">Specifies if inactive Views on this Remote Cluster (which have Snapshots copied by replication) should also be returned. Inactive Views are not counted towards the maxCount. By default, this field is set to false. (optional)</param>
        /// <param name="matchAliasNames">If true, view aliases are also matched with the names in viewNames. (optional)</param>
        /// <param name="viewNames">Filter by a list of View names. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Storage Domains (View Boxes) specified by id. (optional)</param>
        /// <param name="viewBoxNames">Filter by a list of View Box names. (optional)</param>
        /// <param name="matchPartialNames">If true, the names in viewNames are matched by prefix rather than exactly matched. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="maxViewId">If the number of Views to return exceeds the maxCount specified in the original request, specify the id of the last View from the viewList in the previous response to get the next set of Views. (optional)</param>
        /// <param name="jobIds">Filter by Protection Job ids. Return Views that are being protected by listed Jobs, which are specified by ids. (optional)</param>
        /// <param name="sortByLogicalUsage">If set to true, the list is sorted descending by logical usage. (optional)</param>
        /// <returns>ApiResponse of GetViewsResult</returns>
        public ApiResponse< GetViewsResult > GetViewsWithHttpInfo (bool? includeInactive = null, bool? matchAliasNames = null, List<string> viewNames = null, List<long?> viewBoxIds = null, List<string> viewBoxNames = null, bool? matchPartialNames = null, int? maxCount = null, long? maxViewId = null, List<long?> jobIds = null, bool? sortByLogicalUsage = null)
        {

            var localVarPath = "/public/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeInactive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeInactive", includeInactive)); // query parameter
            if (matchAliasNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "matchAliasNames", matchAliasNames)); // query parameter
            if (viewNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewNames", viewNames)); // query parameter
            if (viewBoxIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewBoxIds", viewBoxIds)); // query parameter
            if (viewBoxNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewBoxNames", viewBoxNames)); // query parameter
            if (matchPartialNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "matchPartialNames", matchPartialNames)); // query parameter
            if (maxCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxCount", maxCount)); // query parameter
            if (maxViewId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxViewId", maxViewId)); // query parameter
            if (jobIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "jobIds", jobIds)); // query parameter
            if (sortByLogicalUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortByLogicalUsage", sortByLogicalUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetViewsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetViewsResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetViewsResult)));
        }

        /// <summary>
        /// List Views filtered by some parameters. If no parameters are specified, all Views on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the id of the last View returned in viewList from the previous response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeInactive">Specifies if inactive Views on this Remote Cluster (which have Snapshots copied by replication) should also be returned. Inactive Views are not counted towards the maxCount. By default, this field is set to false. (optional)</param>
        /// <param name="matchAliasNames">If true, view aliases are also matched with the names in viewNames. (optional)</param>
        /// <param name="viewNames">Filter by a list of View names. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Storage Domains (View Boxes) specified by id. (optional)</param>
        /// <param name="viewBoxNames">Filter by a list of View Box names. (optional)</param>
        /// <param name="matchPartialNames">If true, the names in viewNames are matched by prefix rather than exactly matched. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="maxViewId">If the number of Views to return exceeds the maxCount specified in the original request, specify the id of the last View from the viewList in the previous response to get the next set of Views. (optional)</param>
        /// <param name="jobIds">Filter by Protection Job ids. Return Views that are being protected by listed Jobs, which are specified by ids. (optional)</param>
        /// <param name="sortByLogicalUsage">If set to true, the list is sorted descending by logical usage. (optional)</param>
        /// <returns>Task of GetViewsResult</returns>
        public async System.Threading.Tasks.Task<GetViewsResult> GetViewsAsync (bool? includeInactive = null, bool? matchAliasNames = null, List<string> viewNames = null, List<long?> viewBoxIds = null, List<string> viewBoxNames = null, bool? matchPartialNames = null, int? maxCount = null, long? maxViewId = null, List<long?> jobIds = null, bool? sortByLogicalUsage = null)
        {
             ApiResponse<GetViewsResult> localVarResponse = await GetViewsAsyncWithHttpInfo(includeInactive, matchAliasNames, viewNames, viewBoxIds, viewBoxNames, matchPartialNames, maxCount, maxViewId, jobIds, sortByLogicalUsage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Views filtered by some parameters. If no parameters are specified, all Views on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the id of the last View returned in viewList from the previous response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeInactive">Specifies if inactive Views on this Remote Cluster (which have Snapshots copied by replication) should also be returned. Inactive Views are not counted towards the maxCount. By default, this field is set to false. (optional)</param>
        /// <param name="matchAliasNames">If true, view aliases are also matched with the names in viewNames. (optional)</param>
        /// <param name="viewNames">Filter by a list of View names. (optional)</param>
        /// <param name="viewBoxIds">Filter by a list of Storage Domains (View Boxes) specified by id. (optional)</param>
        /// <param name="viewBoxNames">Filter by a list of View Box names. (optional)</param>
        /// <param name="matchPartialNames">If true, the names in viewNames are matched by prefix rather than exactly matched. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="maxViewId">If the number of Views to return exceeds the maxCount specified in the original request, specify the id of the last View from the viewList in the previous response to get the next set of Views. (optional)</param>
        /// <param name="jobIds">Filter by Protection Job ids. Return Views that are being protected by listed Jobs, which are specified by ids. (optional)</param>
        /// <param name="sortByLogicalUsage">If set to true, the list is sorted descending by logical usage. (optional)</param>
        /// <returns>Task of ApiResponse (GetViewsResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetViewsResult>> GetViewsAsyncWithHttpInfo (bool? includeInactive = null, bool? matchAliasNames = null, List<string> viewNames = null, List<long?> viewBoxIds = null, List<string> viewBoxNames = null, bool? matchPartialNames = null, int? maxCount = null, long? maxViewId = null, List<long?> jobIds = null, bool? sortByLogicalUsage = null)
        {

            var localVarPath = "/public/views";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeInactive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeInactive", includeInactive)); // query parameter
            if (matchAliasNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "matchAliasNames", matchAliasNames)); // query parameter
            if (viewNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewNames", viewNames)); // query parameter
            if (viewBoxIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewBoxIds", viewBoxIds)); // query parameter
            if (viewBoxNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "viewBoxNames", viewBoxNames)); // query parameter
            if (matchPartialNames != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "matchPartialNames", matchPartialNames)); // query parameter
            if (maxCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxCount", maxCount)); // query parameter
            if (maxViewId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxViewId", maxViewId)); // query parameter
            if (jobIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "jobIds", jobIds)); // query parameter
            if (sortByLogicalUsage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "SortByLogicalUsage", sortByLogicalUsage)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViews", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetViewsResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetViewsResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetViewsResult)));
        }

        /// <summary>
        /// List shares filtered by name. If no parameters are specified, all shares on the Cohesity Cluster are returned. Specifying share name/prefix filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the pagination cookie from the previous response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareName">The share name(substring) that needs to be searched against existing views and aliases. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="paginationCookie">Expected to be empty in the first call to GetViewsByShareName. To get the next set of results, set this value to the pagination cookie value returned  in the response of the previous call. (optional)</param>
        /// <returns>GetViewsByShareNameResult</returns>
        public GetViewsByShareNameResult GetViewsByShareName (string shareName = null, int? maxCount = null, string paginationCookie = null)
        {
             ApiResponse<GetViewsByShareNameResult> localVarResponse = GetViewsByShareNameWithHttpInfo(shareName, maxCount, paginationCookie);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List shares filtered by name. If no parameters are specified, all shares on the Cohesity Cluster are returned. Specifying share name/prefix filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the pagination cookie from the previous response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareName">The share name(substring) that needs to be searched against existing views and aliases. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="paginationCookie">Expected to be empty in the first call to GetViewsByShareName. To get the next set of results, set this value to the pagination cookie value returned  in the response of the previous call. (optional)</param>
        /// <returns>ApiResponse of GetViewsByShareNameResult</returns>
        public ApiResponse< GetViewsByShareNameResult > GetViewsByShareNameWithHttpInfo (string shareName = null, int? maxCount = null, string paginationCookie = null)
        {

            var localVarPath = "/public/shares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shareName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shareName", shareName)); // query parameter
            if (maxCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxCount", maxCount)); // query parameter
            if (paginationCookie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationCookie", paginationCookie)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewsByShareName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetViewsByShareNameResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetViewsByShareNameResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetViewsByShareNameResult)));
        }

        /// <summary>
        /// List shares filtered by name. If no parameters are specified, all shares on the Cohesity Cluster are returned. Specifying share name/prefix filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the pagination cookie from the previous response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareName">The share name(substring) that needs to be searched against existing views and aliases. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="paginationCookie">Expected to be empty in the first call to GetViewsByShareName. To get the next set of results, set this value to the pagination cookie value returned  in the response of the previous call. (optional)</param>
        /// <returns>Task of GetViewsByShareNameResult</returns>
        public async System.Threading.Tasks.Task<GetViewsByShareNameResult> GetViewsByShareNameAsync (string shareName = null, int? maxCount = null, string paginationCookie = null)
        {
             ApiResponse<GetViewsByShareNameResult> localVarResponse = await GetViewsByShareNameAsyncWithHttpInfo(shareName, maxCount, paginationCookie);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List shares filtered by name. If no parameters are specified, all shares on the Cohesity Cluster are returned. Specifying share name/prefix filters the results that are returned. NOTE: If maxCount is set and the number of Views returned exceeds the maxCount, there are more Views to return. To get the next set of Views, send another request and specify the pagination cookie from the previous response.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shareName">The share name(substring) that needs to be searched against existing views and aliases. (optional)</param>
        /// <param name="maxCount">Specifies a limit on the number of Views returned. (optional)</param>
        /// <param name="paginationCookie">Expected to be empty in the first call to GetViewsByShareName. To get the next set of results, set this value to the pagination cookie value returned  in the response of the previous call. (optional)</param>
        /// <returns>Task of ApiResponse (GetViewsByShareNameResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetViewsByShareNameResult>> GetViewsByShareNameAsyncWithHttpInfo (string shareName = null, int? maxCount = null, string paginationCookie = null)
        {

            var localVarPath = "/public/shares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (shareName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shareName", shareName)); // query parameter
            if (maxCount != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "maxCount", maxCount)); // query parameter
            if (paginationCookie != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "paginationCookie", paginationCookie)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetViewsByShareName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetViewsByShareNameResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetViewsByShareNameResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetViewsByShareNameResult)));
        }

        /// <summary>
        /// Overwrites a Target view with contents of a Source view. Specifies source and target view names as params. Returns the modified Target View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to overwrite a Target view with contents of a Source view.</param>
        /// <returns>View</returns>
        public View OverwriteView (OverwriteViewParam body)
        {
             ApiResponse<View> localVarResponse = OverwriteViewWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Overwrites a Target view with contents of a Source view. Specifies source and target view names as params. Returns the modified Target View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to overwrite a Target view with contents of a Source view.</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse< View > OverwriteViewWithHttpInfo (OverwriteViewParam body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->OverwriteView");

            var localVarPath = "/public/views/overwrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OverwriteView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Overwrites a Target view with contents of a Source view. Specifies source and target view names as params. Returns the modified Target View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to overwrite a Target view with contents of a Source view.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> OverwriteViewAsync (OverwriteViewParam body)
        {
             ApiResponse<View> localVarResponse = await OverwriteViewAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Overwrites a Target view with contents of a Source view. Specifies source and target view names as params. Returns the modified Target View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to overwrite a Target view with contents of a Source view.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> OverwriteViewAsyncWithHttpInfo (OverwriteViewParam body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->OverwriteView");

            var localVarPath = "/public/views/overwrite";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OverwriteView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Rename a View. Specify original name of the View in the &#39;name&#39; parameter. Returns the renamed View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to rename a View.</param>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>View</returns>
        public View RenameView (RenameViewParam body, string name)
        {
             ApiResponse<View> localVarResponse = RenameViewWithHttpInfo(body, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rename a View. Specify original name of the View in the &#39;name&#39; parameter. Returns the renamed View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to rename a View.</param>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse< View > RenameViewWithHttpInfo (RenameViewParam body, string name)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->RenameView");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ViewsApi->RenameView");

            var localVarPath = "/public/views/rename/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Rename a View. Specify original name of the View in the &#39;name&#39; parameter. Returns the renamed View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to rename a View.</param>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> RenameViewAsync (RenameViewParam body, string name)
        {
             ApiResponse<View> localVarResponse = await RenameViewAsyncWithHttpInfo(body, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rename a View. Specify original name of the View in the &#39;name&#39; parameter. Returns the renamed View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request to rename a View.</param>
        /// <param name="name">Specifies the View name.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> RenameViewAsyncWithHttpInfo (RenameViewParam body, string name)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->RenameView");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ViewsApi->RenameView");

            var localVarPath = "/public/views/rename/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RenameView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Update the user quota settings in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota metadata params. (optional)</param>
        /// <returns>UserQuotaSettings</returns>
        public UserQuotaSettings UpdateUserQuotaSettings (UpdateUserQuotaSettingsForView body = null)
        {
             ApiResponse<UserQuotaSettings> localVarResponse = UpdateUserQuotaSettingsWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the user quota settings in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota metadata params. (optional)</param>
        /// <returns>ApiResponse of UserQuotaSettings</returns>
        public ApiResponse< UserQuotaSettings > UpdateUserQuotaSettingsWithHttpInfo (UpdateUserQuotaSettingsForView body = null)
        {

            var localVarPath = "/public/viewUserQuotasSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserQuotaSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserQuotaSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserQuotaSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserQuotaSettings)));
        }

        /// <summary>
        /// Update the user quota settings in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota metadata params. (optional)</param>
        /// <returns>Task of UserQuotaSettings</returns>
        public async System.Threading.Tasks.Task<UserQuotaSettings> UpdateUserQuotaSettingsAsync (UpdateUserQuotaSettingsForView body = null)
        {
             ApiResponse<UserQuotaSettings> localVarResponse = await UpdateUserQuotaSettingsAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the user quota settings in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota metadata params. (optional)</param>
        /// <returns>Task of ApiResponse (UserQuotaSettings)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserQuotaSettings>> UpdateUserQuotaSettingsAsyncWithHttpInfo (UpdateUserQuotaSettingsForView body = null)
        {

            var localVarPath = "/public/viewUserQuotasSettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserQuotaSettings", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserQuotaSettings>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserQuotaSettings) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserQuotaSettings)));
        }

        /// <summary>
        /// Update a View. Returns the updated View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <param name="body">Request to update a view.</param>
        /// <returns>View</returns>
        public View UpdateView (string name, UpdateViewParam body)
        {
             ApiResponse<View> localVarResponse = UpdateViewWithHttpInfo(name, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a View. Returns the updated View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <param name="body">Request to update a view.</param>
        /// <returns>ApiResponse of View</returns>
        public ApiResponse< View > UpdateViewWithHttpInfo (string name, UpdateViewParam body)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ViewsApi->UpdateView");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->UpdateView");

            var localVarPath = "/public/views/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Update a View. Returns the updated View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <param name="body">Request to update a view.</param>
        /// <returns>Task of View</returns>
        public async System.Threading.Tasks.Task<View> UpdateViewAsync (string name, UpdateViewParam body)
        {
             ApiResponse<View> localVarResponse = await UpdateViewAsyncWithHttpInfo(name, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a View. Returns the updated View.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Specifies the View name.</param>
        /// <param name="body">Request to update a view.</param>
        /// <returns>Task of ApiResponse (View)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<View>> UpdateViewAsyncWithHttpInfo (string name, UpdateViewParam body)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ViewsApi->UpdateView");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ViewsApi->UpdateView");

            var localVarPath = "/public/views/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateView", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<View>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (View) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(View)));
        }

        /// <summary>
        /// Update a new quota policy for a user in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>UserQuotaAndUsage</returns>
        public UserQuotaAndUsage UpdateViewUserQuota (ViewUserQuotaParameters body = null)
        {
             ApiResponse<UserQuotaAndUsage> localVarResponse = UpdateViewUserQuotaWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a new quota policy for a user in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>ApiResponse of UserQuotaAndUsage</returns>
        public ApiResponse< UserQuotaAndUsage > UpdateViewUserQuotaWithHttpInfo (ViewUserQuotaParameters body = null)
        {

            var localVarPath = "/public/viewUserQuotas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateViewUserQuota", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserQuotaAndUsage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserQuotaAndUsage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserQuotaAndUsage)));
        }

        /// <summary>
        /// Update a new quota policy for a user in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of UserQuotaAndUsage</returns>
        public async System.Threading.Tasks.Task<UserQuotaAndUsage> UpdateViewUserQuotaAsync (ViewUserQuotaParameters body = null)
        {
             ApiResponse<UserQuotaAndUsage> localVarResponse = await UpdateViewUserQuotaAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a new quota policy for a user in a view. Returns error if op fails.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">update user quota params. (optional)</param>
        /// <returns>Task of ApiResponse (UserQuotaAndUsage)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserQuotaAndUsage>> UpdateViewUserQuotaAsyncWithHttpInfo (ViewUserQuotaParameters body = null)
        {

            var localVarPath = "/public/viewUserQuotas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateViewUserQuota", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserQuotaAndUsage>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserQuotaAndUsage) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserQuotaAndUsage)));
        }

    }
}
