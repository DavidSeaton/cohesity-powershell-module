/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MappersWrapper
    /// </summary>
    [DataContract]
    public partial class MappersWrapper :  IEquatable<MappersWrapper>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MappersWrapper" /> class.
        /// </summary>
        /// <param name="mappers">mappers.</param>
        public MappersWrapper(List<MapperInfo> mappers = default(List<MapperInfo>))
        {
            this.Mappers = mappers;
        }
        
        /// <summary>
        /// Gets or Sets Mappers
        /// </summary>
        [DataMember(Name="mappers", EmitDefaultValue=false)]
        public List<MapperInfo> Mappers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MappersWrapper {\n");
            sb.Append("  Mappers: ").Append(Mappers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MappersWrapper);
        }

        /// <summary>
        /// Returns true if MappersWrapper instances are equal
        /// </summary>
        /// <param name="input">Instance of MappersWrapper to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MappersWrapper input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mappers == input.Mappers ||
                    this.Mappers != null &&
                    this.Mappers.SequenceEqual(input.Mappers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mappers != null)
                    hashCode = hashCode * 59 + this.Mappers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
