/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ViewsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ViewsApiTests
    {
        private ViewsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ViewsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ViewsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ViewsApi
            //Assert.IsInstanceOfType(typeof(ViewsApi), instance, "instance is a ViewsApi");
        }

        
        /// <summary>
        /// Test CloneDirectory
        /// </summary>
        [Test]
        public void CloneDirectoryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CloneDirectoryParams body = null;
            //instance.CloneDirectory(body);
            
        }
        
        /// <summary>
        /// Test CloneView
        /// </summary>
        [Test]
        public void CloneViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CloneViewRequest body = null;
            //var response = instance.CloneView(body);
            //Assert.IsInstanceOf<View> (response, "response is View");
        }
        
        /// <summary>
        /// Test CreateView
        /// </summary>
        [Test]
        public void CreateViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateViewRequest body = null;
            //var response = instance.CreateView(body);
            //Assert.IsInstanceOf<View> (response, "response is View");
        }
        
        /// <summary>
        /// Test CreateViewAlias
        /// </summary>
        [Test]
        public void CreateViewAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ViewAlias body = null;
            //var response = instance.CreateViewAlias(body);
            //Assert.IsInstanceOf<ViewAlias> (response, "response is ViewAlias");
        }
        
        /// <summary>
        /// Test CreateViewUserQuota
        /// </summary>
        [Test]
        public void CreateViewUserQuotaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ViewUserQuotaParameters body = null;
            //var response = instance.CreateViewUserQuota(body);
            //Assert.IsInstanceOf<UserQuotaAndUsage> (response, "response is UserQuotaAndUsage");
        }
        
        /// <summary>
        /// Test DeleteView
        /// </summary>
        [Test]
        public void DeleteViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteView(name);
            
        }
        
        /// <summary>
        /// Test DeleteViewAlias
        /// </summary>
        [Test]
        public void DeleteViewAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //instance.DeleteViewAlias(name);
            
        }
        
        /// <summary>
        /// Test DeleteViewUsersQuota
        /// </summary>
        [Test]
        public void DeleteViewUsersQuotaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DeleteViewUsersQuotaParameters body = null;
            //instance.DeleteViewUsersQuota(body);
            
        }
        
        /// <summary>
        /// Test GetViewByName
        /// </summary>
        [Test]
        public void GetViewByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.GetViewByName(name);
            //Assert.IsInstanceOf<View> (response, "response is View");
        }
        
        /// <summary>
        /// Test GetViewUserQuotas
        /// </summary>
        [Test]
        public void GetViewUserQuotasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string viewName = null;
            //bool? excludeUsersWithinAlertThreshold = null;
            //int? unixUid = null;
            //long? maxViewId = null;
            //string cookie = null;
            //string outputFormat = null;
            //bool? includeUsage = null;
            //string sid = null;
            //bool? summaryOnly = null;
            //long? pageCount = null;
            //var response = instance.GetViewUserQuotas(viewName, excludeUsersWithinAlertThreshold, unixUid, maxViewId, cookie, outputFormat, includeUsage, sid, summaryOnly, pageCount);
            //Assert.IsInstanceOf<ViewUserQuotas> (response, "response is ViewUserQuotas");
        }
        
        /// <summary>
        /// Test GetViews
        /// </summary>
        [Test]
        public void GetViewsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? includeInactive = null;
            //bool? matchAliasNames = null;
            //List<string> viewNames = null;
            //List<long?> viewBoxIds = null;
            //List<string> viewBoxNames = null;
            //bool? matchPartialNames = null;
            //int? maxCount = null;
            //long? maxViewId = null;
            //List<long?> jobIds = null;
            //bool? sortByLogicalUsage = null;
            //var response = instance.GetViews(includeInactive, matchAliasNames, viewNames, viewBoxIds, viewBoxNames, matchPartialNames, maxCount, maxViewId, jobIds, sortByLogicalUsage);
            //Assert.IsInstanceOf<GetViewsResult> (response, "response is GetViewsResult");
        }
        
        /// <summary>
        /// Test GetViewsByShareName
        /// </summary>
        [Test]
        public void GetViewsByShareNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string shareName = null;
            //int? maxCount = null;
            //string paginationCookie = null;
            //var response = instance.GetViewsByShareName(shareName, maxCount, paginationCookie);
            //Assert.IsInstanceOf<GetViewsByShareNameResult> (response, "response is GetViewsByShareNameResult");
        }
        
        /// <summary>
        /// Test OverwriteView
        /// </summary>
        [Test]
        public void OverwriteViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //OverwriteViewParam body = null;
            //var response = instance.OverwriteView(body);
            //Assert.IsInstanceOf<View> (response, "response is View");
        }
        
        /// <summary>
        /// Test RenameView
        /// </summary>
        [Test]
        public void RenameViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RenameViewParam body = null;
            //string name = null;
            //var response = instance.RenameView(body, name);
            //Assert.IsInstanceOf<View> (response, "response is View");
        }
        
        /// <summary>
        /// Test UpdateUserQuotaSettings
        /// </summary>
        [Test]
        public void UpdateUserQuotaSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateUserQuotaSettingsForView body = null;
            //var response = instance.UpdateUserQuotaSettings(body);
            //Assert.IsInstanceOf<UserQuotaSettings> (response, "response is UserQuotaSettings");
        }
        
        /// <summary>
        /// Test UpdateView
        /// </summary>
        [Test]
        public void UpdateViewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //UpdateViewParam body = null;
            //var response = instance.UpdateView(name, body);
            //Assert.IsInstanceOf<View> (response, "response is View");
        }
        
        /// <summary>
        /// Test UpdateViewUserQuota
        /// </summary>
        [Test]
        public void UpdateViewUserQuotaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ViewUserQuotaParameters body = null;
            //var response = instance.UpdateViewUserQuota(body);
            //Assert.IsInstanceOf<UserQuotaAndUsage> (response, "response is UserQuotaAndUsage");
        }
        
    }

}
