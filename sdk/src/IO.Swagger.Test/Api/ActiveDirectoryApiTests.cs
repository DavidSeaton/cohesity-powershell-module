/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing ActiveDirectoryApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class ActiveDirectoryApiTests
    {
        private ActiveDirectoryApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ActiveDirectoryApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ActiveDirectoryApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ActiveDirectoryApi
            //Assert.IsInstanceOfType(typeof(ActiveDirectoryApi), instance, "instance is a ActiveDirectoryApi");
        }

        
        /// <summary>
        /// Test AddActiveDirectoryPrincipals
        /// </summary>
        [Test]
        public void AddActiveDirectoryPrincipalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<ActiveDirectoryPrincipalsAddParameters> body = null;
            //var response = instance.AddActiveDirectoryPrincipals(body);
            //Assert.IsInstanceOf<List<AddedActiveDirectoryPrincipal>> (response, "response is List<AddedActiveDirectoryPrincipal>");
        }
        
        /// <summary>
        /// Test CreateActiveDirectoryEntry
        /// </summary>
        [Test]
        public void CreateActiveDirectoryEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ActiveDirectoryEntry body = null;
            //var response = instance.CreateActiveDirectoryEntry(body);
            //Assert.IsInstanceOf<ActiveDirectoryEntry> (response, "response is ActiveDirectoryEntry");
        }
        
        /// <summary>
        /// Test DeleteActiveDirectoryEntry
        /// </summary>
        [Test]
        public void DeleteActiveDirectoryEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ActiveDirectoryEntry body = null;
            //instance.DeleteActiveDirectoryEntry(body);
            
        }
        
        /// <summary>
        /// Test GetActiveDirectoryEntry
        /// </summary>
        [Test]
        public void GetActiveDirectoryEntryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetActiveDirectoryEntry();
            //Assert.IsInstanceOf<List<ActiveDirectoryEntry>> (response, "response is List<ActiveDirectoryEntry>");
        }
        
        /// <summary>
        /// Test ListCentrifyZones
        /// </summary>
        [Test]
        public void ListCentrifyZonesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string domainName = null;
            //var response = instance.ListCentrifyZones(domainName);
            //Assert.IsInstanceOf<List<ListCentrifyZone>> (response, "response is List<ListCentrifyZone>");
        }
        
        /// <summary>
        /// Test SearchActiveDirectoryPrincipals
        /// </summary>
        [Test]
        public void SearchActiveDirectoryPrincipalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string domain = null;
            //string objectClass = null;
            //string search = null;
            //List<string> sids = null;
            //var response = instance.SearchActiveDirectoryPrincipals(domain, objectClass, search, sids);
            //Assert.IsInstanceOf<List<ActiveDirectoryPrincipal>> (response, "response is List<ActiveDirectoryPrincipal>");
        }
        
        /// <summary>
        /// Test UpdateActiveDirectoryIdMapping
        /// </summary>
        [Test]
        public void UpdateActiveDirectoryIdMappingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IdMappingInfo body = null;
            //string name = null;
            //var response = instance.UpdateActiveDirectoryIdMapping(body, name);
            //Assert.IsInstanceOf<ActiveDirectoryEntry> (response, "response is ActiveDirectoryEntry");
        }
        
        /// <summary>
        /// Test UpdateActiveDirectoryMachineAccounts
        /// </summary>
        [Test]
        public void UpdateActiveDirectoryMachineAccountsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateMachineAccountsParams body = null;
            //string name = null;
            //var response = instance.UpdateActiveDirectoryMachineAccounts(body, name);
            //Assert.IsInstanceOf<ActiveDirectoryEntry> (response, "response is ActiveDirectoryEntry");
        }
        
    }

}
