/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing StaticRouteApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StaticRouteApiTests
    {
        private StaticRouteApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new StaticRouteApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StaticRouteApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StaticRouteApi
            //Assert.IsInstanceOfType(typeof(StaticRouteApi), instance, "instance is a StaticRouteApi");
        }

        
        /// <summary>
        /// Test GetStaticRoutes
        /// </summary>
        [Test]
        public void GetStaticRoutesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetStaticRoutes();
            //Assert.IsInstanceOf<List<StaticRoute>> (response, "response is List<StaticRoute>");
        }
        
        /// <summary>
        /// Test RemoveStaticRoute
        /// </summary>
        [Test]
        public void RemoveStaticRouteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ip = null;
            //instance.RemoveStaticRoute(ip);
            
        }
        
        /// <summary>
        /// Test UpdateStaticRoute
        /// </summary>
        [Test]
        public void UpdateStaticRouteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string ip = null;
            //StaticRoute body = null;
            //var response = instance.UpdateStaticRoute(ip, body);
            //Assert.IsInstanceOf<StaticRoute> (response, "response is StaticRoute");
        }
        
    }

}
