/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing StatisticsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StatisticsApiTests
    {
        private StatisticsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new StatisticsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of StatisticsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' StatisticsApi
            //Assert.IsInstanceOfType(typeof(StatisticsApi), instance, "instance is a StatisticsApi");
        }

        
        /// <summary>
        /// Test GetEntities
        /// </summary>
        [Test]
        public void GetEntitiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string schemaName = null;
            //List<string> metricNames = null;
            //bool? includeAggrMetricSources = null;
            //var response = instance.GetEntities(schemaName, metricNames, includeAggrMetricSources);
            //Assert.IsInstanceOf<List<EntityProto>> (response, "response is List<EntityProto>");
        }
        
        /// <summary>
        /// Test GetEntitiesSchema
        /// </summary>
        [Test]
        public void GetEntitiesSchemaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> metricNames = null;
            //List<string> schemaNames = null;
            //var response = instance.GetEntitiesSchema(metricNames, schemaNames);
            //Assert.IsInstanceOf<List<EntitySchemaProto>> (response, "response is List<EntitySchemaProto>");
        }
        
        /// <summary>
        /// Test GetEntitySchemaByName
        /// </summary>
        [Test]
        public void GetEntitySchemaByNameTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string schemaName = null;
            //var response = instance.GetEntitySchemaByName(schemaName);
            //Assert.IsInstanceOf<List<EntitySchemaProto>> (response, "response is List<EntitySchemaProto>");
        }
        
        /// <summary>
        /// Test GetTimeSeriesStats
        /// </summary>
        [Test]
        public void GetTimeSeriesStatsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string schemaName = null;
            //string entityId = null;
            //string metricName = null;
            //long? startTimeMsecs = null;
            //int? rollupIntervalSecs = null;
            //long? endTimeMsecs = null;
            //string rollupFunction = null;
            //var response = instance.GetTimeSeriesStats(schemaName, entityId, metricName, startTimeMsecs, rollupIntervalSecs, endTimeMsecs, rollupFunction);
            //Assert.IsInstanceOf<MetricDataBlock> (response, "response is MetricDataBlock");
        }
        
    }

}
