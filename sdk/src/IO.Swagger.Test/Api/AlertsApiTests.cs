/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AlertsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AlertsApiTests
    {
        private AlertsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AlertsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AlertsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AlertsApi
            //Assert.IsInstanceOfType(typeof(AlertsApi), instance, "instance is a AlertsApi");
        }

        
        /// <summary>
        /// Test CreateResolution
        /// </summary>
        [Test]
        public void CreateResolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AlertResolutionRequest body = null;
            //var response = instance.CreateResolution(body);
            //Assert.IsInstanceOf<AlertResolution> (response, "response is AlertResolution");
        }
        
        /// <summary>
        /// Test GetAlertById
        /// </summary>
        [Test]
        public void GetAlertByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.GetAlertById(id);
            //Assert.IsInstanceOf<Alert> (response, "response is Alert");
        }
        
        /// <summary>
        /// Test GetAlerts
        /// </summary>
        [Test]
        public void GetAlertsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? maxAlerts = null;
            //List<string> alertIdList = null;
            //List<int?> alertTypeList = null;
            //List<string> alertStateList = null;
            //List<string> alertSeverityList = null;
            //List<long?> resolutionIdList = null;
            //List<string> alertCategoryList = null;
            //long? startDateUsecs = null;
            //long? endDateUsecs = null;
            //var response = instance.GetAlerts(maxAlerts, alertIdList, alertTypeList, alertStateList, alertSeverityList, resolutionIdList, alertCategoryList, startDateUsecs, endDateUsecs);
            //Assert.IsInstanceOf<List<Alert>> (response, "response is List<Alert>");
        }
        
        /// <summary>
        /// Test GetResolutionById
        /// </summary>
        [Test]
        public void GetResolutionByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetResolutionById(id);
            //Assert.IsInstanceOf<AlertResolution> (response, "response is AlertResolution");
        }
        
        /// <summary>
        /// Test GetResolutions
        /// </summary>
        [Test]
        public void GetResolutionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? maxResolutions = null;
            //List<long?> resolutionIdList = null;
            //List<string> alertIdList = null;
            //long? startDateUsecs = null;
            //long? endDateUsecs = null;
            //var response = instance.GetResolutions(maxResolutions, resolutionIdList, alertIdList, startDateUsecs, endDateUsecs);
            //Assert.IsInstanceOf<List<AlertResolution>> (response, "response is List<AlertResolution>");
        }
        
        /// <summary>
        /// Test UpdateResolution
        /// </summary>
        [Test]
        public void UpdateResolutionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //UpdateResolutionParams body = null;
            //var response = instance.UpdateResolution(id, body);
            //Assert.IsInstanceOf<AlertResolution> (response, "response is AlertResolution");
        }
        
    }

}
