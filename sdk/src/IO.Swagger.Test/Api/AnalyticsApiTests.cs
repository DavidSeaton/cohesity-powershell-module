/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing AnalyticsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class AnalyticsApiTests
    {
        private AnalyticsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new AnalyticsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of AnalyticsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' AnalyticsApi
            //Assert.IsInstanceOfType(typeof(AnalyticsApi), instance, "instance is a AnalyticsApi");
        }

        
        /// <summary>
        /// Test AnalyzeJar
        /// </summary>
        [Test]
        public void AnalyzeJarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //AnalyseJarArg body = null;
            //var response = instance.AnalyzeJar(body);
            //Assert.IsInstanceOf<AnalyseJarResult> (response, "response is AnalyseJarResult");
        }
        
        /// <summary>
        /// Test CancelMapReduceInstanceRun
        /// </summary>
        [Test]
        public void CancelMapReduceInstanceRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.CancelMapReduceInstanceRun(id);
            //Assert.IsInstanceOf<KillMapReduceInstanceResult> (response, "response is KillMapReduceInstanceResult");
        }
        
        /// <summary>
        /// Test CreateApplication
        /// </summary>
        [Test]
        public void CreateApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MapReduceInfo body = null;
            //var response = instance.CreateApplication(body);
            //Assert.IsInstanceOf<MapReduceInfo> (response, "response is MapReduceInfo");
        }
        
        /// <summary>
        /// Test CreateMapper
        /// </summary>
        [Test]
        public void CreateMapperTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MapperInfo body = null;
            //var response = instance.CreateMapper(body);
            //Assert.IsInstanceOf<MapperInfo> (response, "response is MapperInfo");
        }
        
        /// <summary>
        /// Test CreateReducer
        /// </summary>
        [Test]
        public void CreateReducerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReducerInfo body = null;
            //var response = instance.CreateReducer(body);
            //Assert.IsInstanceOf<ReducerInfo> (response, "response is ReducerInfo");
        }
        
        /// <summary>
        /// Test DeleteApplication
        /// </summary>
        [Test]
        public void DeleteApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteApplication(id);
            
        }
        
        /// <summary>
        /// Test DeleteMapReduceInstanceRun
        /// </summary>
        [Test]
        public void DeleteMapReduceInstanceRunTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteMapReduceInstanceRun(id);
            
        }
        
        /// <summary>
        /// Test DeleteMapper
        /// </summary>
        [Test]
        public void DeleteMapperTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteMapper(id);
            
        }
        
        /// <summary>
        /// Test DeleteReducer
        /// </summary>
        [Test]
        public void DeleteReducerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteReducer(id);
            
        }
        
        /// <summary>
        /// Test DeleteUploadedJar
        /// </summary>
        [Test]
        public void DeleteUploadedJarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UploadMRJarViewPathWrapper body = null;
            //instance.DeleteUploadedJar(body);
            
        }
        
        /// <summary>
        /// Test DownloadMRBaseJar
        /// </summary>
        [Test]
        public void DownloadMRBaseJarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DownloadMRBaseJar();
            //Assert.IsInstanceOf<ExtractFileRangeResult> (response, "response is ExtractFileRangeResult");
        }
        
        /// <summary>
        /// Test DownloadMROutputFiles
        /// </summary>
        [Test]
        public void DownloadMROutputFilesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filePath = null;
            //long? startOffset = null;
            //long? lengthBytes = null;
            //bool? isNfsFile = null;
            //long? partitionId = null;
            //long? viewBoxId = null;
            //string viewName = null;
            //var response = instance.DownloadMROutputFiles(filePath, startOffset, lengthBytes, isNfsFile, partitionId, viewBoxId, viewName);
            //Assert.IsInstanceOf<ExtractFileRangeResult> (response, "response is ExtractFileRangeResult");
        }
        
        /// <summary>
        /// Test GetApplicationById
        /// </summary>
        [Test]
        public void GetApplicationByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetApplicationById(id);
            //Assert.IsInstanceOf<MapReduceInfo> (response, "response is MapReduceInfo");
        }
        
        /// <summary>
        /// Test GetApplications
        /// </summary>
        [Test]
        public void GetApplicationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetApplications();
            //Assert.IsInstanceOf<ApplicationsWrapper> (response, "response is ApplicationsWrapper");
        }
        
        /// <summary>
        /// Test GetMRUploadJarPath
        /// </summary>
        [Test]
        public void GetMRUploadJarPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMRUploadJarPath();
            //Assert.IsInstanceOf<GetMRJarUploadPathResult> (response, "response is GetMRJarUploadPathResult");
        }
        
        /// <summary>
        /// Test GetMapReduceAppRuns
        /// </summary>
        [Test]
        public void GetMapReduceAppRunsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //GetMapReduceAppRunsParams body = null;
            //var response = instance.GetMapReduceAppRuns(body);
            //Assert.IsInstanceOf<ApplicationsWrapper> (response, "response is ApplicationsWrapper");
        }
        
        /// <summary>
        /// Test GetMapperById
        /// </summary>
        [Test]
        public void GetMapperByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetMapperById(id);
            //Assert.IsInstanceOf<MapperInfo> (response, "response is MapperInfo");
        }
        
        /// <summary>
        /// Test GetMappers
        /// </summary>
        [Test]
        public void GetMappersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMappers();
            //Assert.IsInstanceOf<MappersWrapper> (response, "response is MappersWrapper");
        }
        
        /// <summary>
        /// Test GetReducerById
        /// </summary>
        [Test]
        public void GetReducerByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetReducerById(id);
            //Assert.IsInstanceOf<ReducerInfo> (response, "response is ReducerInfo");
        }
        
        /// <summary>
        /// Test GetReducers
        /// </summary>
        [Test]
        public void GetReducersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetReducers();
            //Assert.IsInstanceOf<ReducersWrapper> (response, "response is ReducersWrapper");
        }
        
        /// <summary>
        /// Test RunMapReduceAppInstance
        /// </summary>
        [Test]
        public void RunMapReduceAppInstanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RunMapReduceParams body = null;
            //var response = instance.RunMapReduceAppInstance(body);
            //Assert.IsInstanceOf<RunMapReduceInstanceResult> (response, "response is RunMapReduceInstanceResult");
        }
        
        /// <summary>
        /// Test UpdateApplication
        /// </summary>
        [Test]
        public void UpdateApplicationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //MapReduceInfo body = null;
            //var response = instance.UpdateApplication(id, body);
            //Assert.IsInstanceOf<MapReduceInfo> (response, "response is MapReduceInfo");
        }
        
        /// <summary>
        /// Test UpdateMapper
        /// </summary>
        [Test]
        public void UpdateMapperTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //MapperInfo body = null;
            //var response = instance.UpdateMapper(id, body);
            //Assert.IsInstanceOf<MapperInfo> (response, "response is MapperInfo");
        }
        
        /// <summary>
        /// Test UpdateReducer
        /// </summary>
        [Test]
        public void UpdateReducerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //ReducerInfo body = null;
            //var response = instance.UpdateReducer(id, body);
            //Assert.IsInstanceOf<ReducerInfo> (response, "response is ReducerInfo");
        }
        
        /// <summary>
        /// Test UploadJar
        /// </summary>
        [Test]
        public void UploadJarTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UploadJar();
            //Assert.IsInstanceOf<UploadMRJarViewPathWrapper> (response, "response is UploadMRJarViewPathWrapper");
        }
        
    }

}
