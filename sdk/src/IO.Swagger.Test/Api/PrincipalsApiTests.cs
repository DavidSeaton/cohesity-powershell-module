/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PrincipalsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PrincipalsApiTests
    {
        private PrincipalsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PrincipalsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PrincipalsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PrincipalsApi
            //Assert.IsInstanceOfType(typeof(PrincipalsApi), instance, "instance is a PrincipalsApi");
        }

        
        /// <summary>
        /// Test CreateUser
        /// </summary>
        [Test]
        public void CreateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserParameters body = null;
            //var response = instance.CreateUser(body);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test DeleteUsers
        /// </summary>
        [Test]
        public void DeleteUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserDeleteParameters body = null;
            //instance.DeleteUsers(body);
            
        }
        
        /// <summary>
        /// Test GetUserPrivileges
        /// </summary>
        [Test]
        public void GetUserPrivilegesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetUserPrivileges();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> usernames = null;
            //List<string> emailAddresses = null;
            //string domain = null;
            //var response = instance.GetUsers(usernames, emailAddresses, domain);
            //Assert.IsInstanceOf<List<User>> (response, "response is List<User>");
        }
        
        /// <summary>
        /// Test ListSourcesForPrincipals
        /// </summary>
        [Test]
        public void ListSourcesForPrincipalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> sids = null;
            //var response = instance.ListSourcesForPrincipals(sids);
            //Assert.IsInstanceOf<List<SourcesForSid>> (response, "response is List<SourcesForSid>");
        }
        
        /// <summary>
        /// Test ResetS3SecretKey
        /// </summary>
        [Test]
        public void ResetS3SecretKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ResetS3SecretKeyParameters body = null;
            //var response = instance.ResetS3SecretKey(body);
            //Assert.IsInstanceOf<NewS3SecretAccessKey> (response, "response is NewS3SecretAccessKey");
        }
        
        /// <summary>
        /// Test SearchPrincipals
        /// </summary>
        [Test]
        public void SearchPrincipalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string domain = null;
            //string objectClass = null;
            //string search = null;
            //List<string> sids = null;
            //var response = instance.SearchPrincipals(domain, objectClass, search, sids);
            //Assert.IsInstanceOf<List<Principal>> (response, "response is List<Principal>");
        }
        
        /// <summary>
        /// Test UpdateSourcesForPrincipals
        /// </summary>
        [Test]
        public void UpdateSourcesForPrincipalsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UpdateSourcesForPrincipalsParams body = null;
            //instance.UpdateSourcesForPrincipals(body);
            
        }
        
        /// <summary>
        /// Test UpdateUser
        /// </summary>
        [Test]
        public void UpdateUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserParameters body = null;
            //var response = instance.UpdateUser(body);
            //Assert.IsInstanceOf<User> (response, "response is User");
        }
        
    }

}
