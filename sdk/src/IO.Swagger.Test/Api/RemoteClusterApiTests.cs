/* 
 * Cohesity REST API
 *
 * This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing RemoteClusterApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class RemoteClusterApiTests
    {
        private RemoteClusterApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new RemoteClusterApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of RemoteClusterApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' RemoteClusterApi
            //Assert.IsInstanceOfType(typeof(RemoteClusterApi), instance, "instance is a RemoteClusterApi");
        }

        
        /// <summary>
        /// Test CreateRemoteCluster
        /// </summary>
        [Test]
        public void CreateRemoteClusterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RegisterRemoteCluster body = null;
            //var response = instance.CreateRemoteCluster(body);
            //Assert.IsInstanceOf<RemoteCluster> (response, "response is RemoteCluster");
        }
        
        /// <summary>
        /// Test DeleteRemoteCluster
        /// </summary>
        [Test]
        public void DeleteRemoteClusterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //instance.DeleteRemoteCluster(id);
            
        }
        
        /// <summary>
        /// Test GetRemoteClusterById
        /// </summary>
        [Test]
        public void GetRemoteClusterByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //var response = instance.GetRemoteClusterById(id);
            //Assert.IsInstanceOf<List<RemoteCluster>> (response, "response is List<RemoteCluster>");
        }
        
        /// <summary>
        /// Test GetRemoteClusters
        /// </summary>
        [Test]
        public void GetRemoteClustersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> clusterNames = null;
            //bool? purposeReplication = null;
            //bool? purposeRemoteAccess = null;
            //List<long?> clusterIds = null;
            //var response = instance.GetRemoteClusters(clusterNames, purposeReplication, purposeRemoteAccess, clusterIds);
            //Assert.IsInstanceOf<List<RemoteCluster>> (response, "response is List<RemoteCluster>");
        }
        
        /// <summary>
        /// Test GetReplicationEncryptionKey
        /// </summary>
        [Test]
        public void GetReplicationEncryptionKeyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetReplicationEncryptionKey();
            //Assert.IsInstanceOf<ReplicationEncryptionKeyReponse> (response, "response is ReplicationEncryptionKeyReponse");
        }
        
        /// <summary>
        /// Test UpdateRemoteCluster
        /// </summary>
        [Test]
        public void UpdateRemoteClusterTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? id = null;
            //RegisterRemoteCluster body = null;
            //var response = instance.UpdateRemoteCluster(id, body);
            //Assert.IsInstanceOf<RemoteCluster> (response, "response is RemoteCluster");
        }
        
    }

}
